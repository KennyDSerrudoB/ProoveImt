
helloWorldUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004388  08004388  00005388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004404  08004404  00005404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800440c  0800440c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004410  08004410  00005410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004414  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000284  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4cd  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b36  00000000  00000000  00010565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  000120a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000605  00000000  00000000  00012890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b48c  00000000  00000000  00012e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad34  00000000  00000000  0002e321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c860  00000000  00000000  00039055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d58b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002654  00000000  00000000  000d58f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  000d7f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004370 	.word	0x08004370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004370 	.word	0x08004370

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fae0 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f824 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f8b4 	bl	80003e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000280:	f000 f88c 	bl	800039c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f85a 	bl	800033c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Contador: %d\n", c);
 8000288:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <main+0x4c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4619      	mov	r1, r3
 800028e:	480c      	ldr	r0, [pc, #48]	@ (80002c0 <main+0x50>)
 8000290:	f003 fa00 	bl	8003694 <iprintf>
  HAL_Delay(100);
 8000294:	2064      	movs	r0, #100	@ 0x64
 8000296:	f000 fb35 	bl	8000904 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	c++;
 800029a:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <main+0x4c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	4a06      	ldr	r2, [pc, #24]	@ (80002bc <main+0x4c>)
 80002a2:	6013      	str	r3, [r2, #0]
	printf("Contador: %d\n", c);
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <main+0x4c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4619      	mov	r1, r3
 80002aa:	4805      	ldr	r0, [pc, #20]	@ (80002c0 <main+0x50>)
 80002ac:	f003 f9f2 	bl	8003694 <iprintf>
	HAL_Delay(1000);
 80002b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b4:	f000 fb26 	bl	8000904 <HAL_Delay>
	c++;
 80002b8:	bf00      	nop
 80002ba:	e7ee      	b.n	800029a <main+0x2a>
 80002bc:	20000194 	.word	0x20000194
 80002c0:	08004388 	.word	0x08004388

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	@ 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	@ 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 fa33 	bl	800373e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f2:	2300      	movs	r3, #0
 80002f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 ff30 	bl	8001160 <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000306:	f000 f8a9 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 ff5a 	bl	80021dc <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032e:	f000 f895 	bl	800045c <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	@ 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000340:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 8000342:	4a15      	ldr	r2, [pc, #84]	@ (8000398 <MX_USART2_UART_Init+0x5c>)
 8000344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000346:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 8000348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800034c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000372:	4b08      	ldr	r3, [pc, #32]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800037e:	4805      	ldr	r0, [pc, #20]	@ (8000394 <MX_USART2_UART_Init+0x58>)
 8000380:	f002 f94c 	bl	800261c <HAL_UART_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800038a:	f000 f867 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000084 	.word	0x20000084
 8000398:	40004400 	.word	0x40004400

0800039c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003a2:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <MX_DMA_Init+0x48>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a0f      	ldr	r2, [pc, #60]	@ (80003e4 <MX_DMA_Init+0x48>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <MX_DMA_Init+0x48>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	2010      	movs	r0, #16
 80003c0:	f000 fb9f 	bl	8000b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80003c4:	2010      	movs	r0, #16
 80003c6:	f000 fbb8 	bl	8000b3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	2011      	movs	r0, #17
 80003d0:	f000 fb97 	bl	8000b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003d4:	2011      	movs	r0, #17
 80003d6:	f000 fbb0 	bl	8000b3a <HAL_NVIC_EnableIRQ>

}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_GPIO_Init+0x44>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	@ (800042c <MX_GPIO_Init+0x44>)
 80003f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_GPIO_Init+0x44>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_GPIO_Init+0x44>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a08      	ldr	r2, [pc, #32]	@ (800042c <MX_GPIO_Init+0x44>)
 800040c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_GPIO_Init+0x44>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800041a:	603b      	str	r3, [r7, #0]
 800041c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	b29a      	uxth	r2, r3
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	68b9      	ldr	r1, [r7, #8]
 8000446:	4804      	ldr	r0, [pc, #16]	@ (8000458 <_write+0x28>)
 8000448:	f002 f936 	bl	80026b8 <HAL_UART_Transmit>
    return len;
 800044c:	687b      	ldr	r3, [r7, #4]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3710      	adds	r7, #16
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000084 	.word	0x20000084

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <Error_Handler+0x8>

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a0e      	ldr	r2, [pc, #56]	@ (80004ac <HAL_MspInit+0x44>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <HAL_MspInit+0x44>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <HAL_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a08      	ldr	r2, [pc, #32]	@ (80004ac <HAL_MspInit+0x44>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <HAL_MspInit+0x44>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	@ 0x28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a4b      	ldr	r2, [pc, #300]	@ (80005fc <HAL_UART_MspInit+0x14c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	f040 808f 	bne.w	80005f2 <HAL_UART_MspInit+0x142>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000600 <HAL_UART_MspInit+0x150>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	4a49      	ldr	r2, [pc, #292]	@ (8000600 <HAL_UART_MspInit+0x150>)
 80004da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004de:	61d3      	str	r3, [r2, #28]
 80004e0:	4b47      	ldr	r3, [pc, #284]	@ (8000600 <HAL_UART_MspInit+0x150>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b44      	ldr	r3, [pc, #272]	@ (8000600 <HAL_UART_MspInit+0x150>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a43      	ldr	r2, [pc, #268]	@ (8000600 <HAL_UART_MspInit+0x150>)
 80004f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f6:	6153      	str	r3, [r2, #20]
 80004f8:	4b41      	ldr	r3, [pc, #260]	@ (8000600 <HAL_UART_MspInit+0x150>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000504:	2304      	movs	r3, #4
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000508:	2302      	movs	r3, #2
 800050a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000514:	2307      	movs	r3, #7
 8000516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000522:	f000 fcab 	bl	8000e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000530:	2301      	movs	r3, #1
 8000532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000534:	2303      	movs	r3, #3
 8000536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000538:	2307      	movs	r3, #7
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	4619      	mov	r1, r3
 8000542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000546:	f000 fc99 	bl	8000e7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800054a:	4b2e      	ldr	r3, [pc, #184]	@ (8000604 <HAL_UART_MspInit+0x154>)
 800054c:	4a2e      	ldr	r2, [pc, #184]	@ (8000608 <HAL_UART_MspInit+0x158>)
 800054e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000550:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <HAL_UART_MspInit+0x154>)
 8000552:	2210      	movs	r2, #16
 8000554:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000556:	4b2b      	ldr	r3, [pc, #172]	@ (8000604 <HAL_UART_MspInit+0x154>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800055c:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <HAL_UART_MspInit+0x154>)
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000562:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <HAL_UART_MspInit+0x154>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000568:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <HAL_UART_MspInit+0x154>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800056e:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <HAL_UART_MspInit+0x154>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <HAL_UART_MspInit+0x154>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800057a:	4822      	ldr	r0, [pc, #136]	@ (8000604 <HAL_UART_MspInit+0x154>)
 800057c:	f000 faf7 	bl	8000b6e <HAL_DMA_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 8000586:	f7ff ff69 	bl	800045c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a1d      	ldr	r2, [pc, #116]	@ (8000604 <HAL_UART_MspInit+0x154>)
 800058e:	671a      	str	r2, [r3, #112]	@ 0x70
 8000590:	4a1c      	ldr	r2, [pc, #112]	@ (8000604 <HAL_UART_MspInit+0x154>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000596:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <HAL_UART_MspInit+0x15c>)
 8000598:	4a1d      	ldr	r2, [pc, #116]	@ (8000610 <HAL_UART_MspInit+0x160>)
 800059a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800059c:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <HAL_UART_MspInit+0x15c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <HAL_UART_MspInit+0x15c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005a8:	4b18      	ldr	r3, [pc, #96]	@ (800060c <HAL_UART_MspInit+0x15c>)
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005ae:	4b17      	ldr	r3, [pc, #92]	@ (800060c <HAL_UART_MspInit+0x15c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <HAL_UART_MspInit+0x15c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80005ba:	4b14      	ldr	r3, [pc, #80]	@ (800060c <HAL_UART_MspInit+0x15c>)
 80005bc:	2220      	movs	r2, #32
 80005be:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <HAL_UART_MspInit+0x15c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80005c6:	4811      	ldr	r0, [pc, #68]	@ (800060c <HAL_UART_MspInit+0x15c>)
 80005c8:	f000 fad1 	bl	8000b6e <HAL_DMA_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 80005d2:	f7ff ff43 	bl	800045c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a0c      	ldr	r2, [pc, #48]	@ (800060c <HAL_UART_MspInit+0x15c>)
 80005da:	675a      	str	r2, [r3, #116]	@ 0x74
 80005dc:	4a0b      	ldr	r2, [pc, #44]	@ (800060c <HAL_UART_MspInit+0x15c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	2026      	movs	r0, #38	@ 0x26
 80005e8:	f000 fa8b 	bl	8000b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005ec:	2026      	movs	r0, #38	@ 0x26
 80005ee:	f000 faa4 	bl	8000b3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	@ 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40004400 	.word	0x40004400
 8000600:	40021000 	.word	0x40021000
 8000604:	2000010c 	.word	0x2000010c
 8000608:	40020080 	.word	0x40020080
 800060c:	20000150 	.word	0x20000150
 8000610:	4002006c 	.word	0x4002006c

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <NMI_Handler+0x4>

0800061c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <MemManage_Handler+0x4>

0800062c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <UsageFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066a:	f000 f92b 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000678:	4802      	ldr	r0, [pc, #8]	@ (8000684 <DMA1_Channel6_IRQHandler+0x10>)
 800067a:	f000 fb3b 	bl	8000cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000150 	.word	0x20000150

08000688 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800068c:	4802      	ldr	r0, [pc, #8]	@ (8000698 <DMA1_Channel7_IRQHandler+0x10>)
 800068e:	f000 fb31 	bl	8000cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000010c 	.word	0x2000010c

0800069c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006a0:	4802      	ldr	r0, [pc, #8]	@ (80006ac <USART2_IRQHandler+0x10>)
 80006a2:	f002 f893 	bl	80027cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000084 	.word	0x20000084

080006b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e00a      	b.n	80006d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006c2:	f3af 8000 	nop.w
 80006c6:	4601      	mov	r1, r0
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	b2ca      	uxtb	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf0      	blt.n	80006c2 <_read+0x12>
  }

  return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000712:	605a      	str	r2, [r3, #4]
  return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <_isatty>:

int _isatty(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800075c:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <_sbrk+0x5c>)
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <_sbrk+0x60>)
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <_sbrk+0x64>)
 8000772:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <_sbrk+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	429a      	cmp	r2, r3
 8000782:	d207      	bcs.n	8000794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000784:	f003 f82a 	bl	80037dc <__errno>
 8000788:	4603      	mov	r3, r0
 800078a:	220c      	movs	r2, #12
 800078c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	e009      	b.n	80007a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <_sbrk+0x64>)
 80007a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20003000 	.word	0x20003000
 80007b4:	00000400 	.word	0x00000400
 80007b8:	20000198 	.word	0x20000198
 80007bc:	200002f0 	.word	0x200002f0

080007c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <SystemInit+0x20>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ca:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <SystemInit+0x20>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800081c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e8:	f7ff ffea 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	@ (8000824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <LoopForever+0xe>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	@ (8000830 <LoopForever+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000812:	f002 ffe9 	bl	80037e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000816:	f7ff fd2b 	bl	8000270 <main>

0800081a <LoopForever>:

LoopForever:
    b LoopForever
 800081a:	e7fe      	b.n	800081a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800081c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000828:	08004414 	.word	0x08004414
  ldr r2, =_sbss
 800082c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000830:	200002ec 	.word	0x200002ec

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f94f 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f808 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff fe08 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_InitTick+0x54>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_InitTick+0x58>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f967 	bl	8000b56 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f000 f92f 	bl	8000b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <HAL_InitTick+0x5c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <HAL_IncTick+0x20>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_IncTick+0x24>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <HAL_IncTick+0x24>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008
 80008e8:	2000019c 	.word	0x2000019c

080008ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80008f0:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <HAL_GetTick+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2000019c 	.word	0x2000019c

08000904 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff ffee 	bl	80008ec <HAL_GetTick>
 8000910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d005      	beq.n	800092a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <HAL_Delay+0x44>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800092a:	bf00      	nop
 800092c:	f7ff ffde 	bl	80008ec <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d8f7      	bhi.n	800092c <HAL_Delay+0x28>
  {
  }
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4907      	ldr	r1, [pc, #28]	@ (80009e8 <__NVIC_EnableIRQ+0x38>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000e100 	.word	0xe000e100

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	@ (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	@ (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	@ 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	@ 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab8:	d301      	bcc.n	8000abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00f      	b.n	8000ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <SysTick_Config+0x40>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f7ff ff8e 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <SysTick_Config+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <SysTick_Config+0x40>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff29 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b14:	f7ff ff3e 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f7ff ff8e 	bl	8000a40 <NVIC_EncodePriority>
 8000b24:	4602      	mov	r2, r0
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff5d 	bl	80009ec <__NVIC_SetPriority>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff31 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffa2 	bl	8000aa8 <SysTick_Config>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e037      	b.n	8000bf4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2202      	movs	r2, #2
 8000b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000b9a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f930 	bl	8000e3c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e02e      	b.n	8000c6c <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d008      	beq.n	8000c2a <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e020      	b.n	8000c6c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 020e 	bic.w	r2, r2, #14
 8000c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0201 	bic.w	r2, r2, #1
 8000c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d005      	beq.n	8000c9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2204      	movs	r2, #4
 8000c92:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e027      	b.n	8000cea <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 020e 	bic.w	r2, r2, #14
 8000ca8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0201 	bic.w	r2, r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	4798      	blx	r3
    }
  }
  return status;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	2204      	movs	r2, #4
 8000d12:	409a      	lsls	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4013      	ands	r3, r2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d024      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x72>
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01f      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0320 	and.w	r3, r3, #32
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d107      	bne.n	8000d44 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0204 	bic.w	r2, r2, #4
 8000d42:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d06a      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d64:	e065      	b.n	8000e32 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d02c      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0xdc>
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d027      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10b      	bne.n	8000da6 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 020a 	bic.w	r2, r2, #10
 8000d9c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dae:	2102      	movs	r1, #2
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d035      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000dce:	e030      	b.n	8000e32 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d028      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x13e>
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d023      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 020e 	bic.w	r2, r2, #14
 8000df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e02:	2101      	movs	r1, #1
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d004      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	4798      	blx	r3
    }
  }
}
 8000e30:	e7ff      	b.n	8000e32 <HAL_DMA_IRQHandler+0x13e>
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <DMA_CalcBaseAndBitshift+0x34>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <DMA_CalcBaseAndBitshift+0x38>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	009a      	lsls	r2, r3, #2
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a06      	ldr	r2, [pc, #24]	@ (8000e78 <DMA_CalcBaseAndBitshift+0x3c>)
 8000e60:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	bffdfff8 	.word	0xbffdfff8
 8000e74:	cccccccd 	.word	0xcccccccd
 8000e78:	40020000 	.word	0x40020000

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e14e      	b.n	800112a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8140 	beq.w	8001124 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d005      	beq.n	8000ebc <HAL_GPIO_Init+0x40>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d130      	bne.n	8000f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 0201 	and.w	r2, r3, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d017      	beq.n	8000f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d123      	bne.n	8000fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	6939      	ldr	r1, [r7, #16]
 8000faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0203 	and.w	r2, r3, #3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 809a 	beq.w	8001124 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	4b55      	ldr	r3, [pc, #340]	@ (8001148 <HAL_GPIO_Init+0x2cc>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a54      	ldr	r2, [pc, #336]	@ (8001148 <HAL_GPIO_Init+0x2cc>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b52      	ldr	r3, [pc, #328]	@ (8001148 <HAL_GPIO_Init+0x2cc>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001008:	4a50      	ldr	r2, [pc, #320]	@ (800114c <HAL_GPIO_Init+0x2d0>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001032:	d013      	beq.n	800105c <HAL_GPIO_Init+0x1e0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a46      	ldr	r2, [pc, #280]	@ (8001150 <HAL_GPIO_Init+0x2d4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d00d      	beq.n	8001058 <HAL_GPIO_Init+0x1dc>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a45      	ldr	r2, [pc, #276]	@ (8001154 <HAL_GPIO_Init+0x2d8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x1d8>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a44      	ldr	r2, [pc, #272]	@ (8001158 <HAL_GPIO_Init+0x2dc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_GPIO_Init+0x1d4>
 800104c:	2303      	movs	r3, #3
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x1e2>
 8001050:	2305      	movs	r3, #5
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x1e2>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x1e2>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x1e2>
 800105c:	2300      	movs	r3, #0
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106e:	4937      	ldr	r1, [pc, #220]	@ (800114c <HAL_GPIO_Init+0x2d0>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107c:	4b37      	ldr	r3, [pc, #220]	@ (800115c <HAL_GPIO_Init+0x2e0>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010a0:	4a2e      	ldr	r2, [pc, #184]	@ (800115c <HAL_GPIO_Init+0x2e0>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a6:	4b2d      	ldr	r3, [pc, #180]	@ (800115c <HAL_GPIO_Init+0x2e0>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ca:	4a24      	ldr	r2, [pc, #144]	@ (800115c <HAL_GPIO_Init+0x2e0>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <HAL_GPIO_Init+0x2e0>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010f4:	4a19      	ldr	r2, [pc, #100]	@ (800115c <HAL_GPIO_Init+0x2e0>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <HAL_GPIO_Init+0x2e0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800111e:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <HAL_GPIO_Init+0x2e0>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f aea9 	bne.w	8000e8c <HAL_GPIO_Init+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001166:	af00      	add	r7, sp, #0
 8001168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800116c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001170:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001176:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	f001 b823 	b.w	80021cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800118a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 817d 	beq.w	8001496 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800119c:	4bbc      	ldr	r3, [pc, #752]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d00c      	beq.n	80011c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d15c      	bne.n	800126e <HAL_RCC_OscConfig+0x10e>
 80011b4:	4bb6      	ldr	r3, [pc, #728]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c0:	d155      	bne.n	800126e <HAL_RCC_OscConfig+0x10e>
 80011c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011c6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <HAL_RCC_OscConfig+0x94>
 80011ee:	4ba8      	ldr	r3, [pc, #672]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	e015      	b.n	8001220 <HAL_RCC_OscConfig+0xc0>
 80011f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011f8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001208:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800120c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001210:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800121c:	4b9c      	ldr	r3, [pc, #624]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 800121e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001220:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001224:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001228:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800122c:	fa92 f2a2 	rbit	r2, r2
 8001230:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001234:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f002 021f 	and.w	r2, r2, #31
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 811f 	beq.w	8001494 <HAL_RCC_OscConfig+0x334>
 8001256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800125a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 8116 	bne.w	8001494 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	f000 bfaf 	b.w	80021cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x12e>
 8001280:	4b83      	ldr	r3, [pc, #524]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a82      	ldr	r2, [pc, #520]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 8001286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e036      	b.n	80012fc <HAL_RCC_OscConfig+0x19c>
 800128e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001292:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x158>
 800129e:	4b7c      	ldr	r3, [pc, #496]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a7b      	ldr	r2, [pc, #492]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b79      	ldr	r3, [pc, #484]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a78      	ldr	r2, [pc, #480]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e021      	b.n	80012fc <HAL_RCC_OscConfig+0x19c>
 80012b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x184>
 80012ca:	4b71      	ldr	r3, [pc, #452]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a70      	ldr	r2, [pc, #448]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6d      	ldr	r2, [pc, #436]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0x19c>
 80012e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a69      	ldr	r2, [pc, #420]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b67      	ldr	r3, [pc, #412]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a66      	ldr	r2, [pc, #408]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012fc:	4b64      	ldr	r3, [pc, #400]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80012fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001300:	f023 020f 	bic.w	r2, r3, #15
 8001304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	495f      	ldr	r1, [pc, #380]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 8001312:	4313      	orrs	r3, r2
 8001314:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800131a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d059      	beq.n	80013da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fae1 	bl	80008ec <HAL_GetTick>
 800132a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	e00a      	b.n	8001346 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fadc 	bl	80008ec <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b64      	cmp	r3, #100	@ 0x64
 800133e:	d902      	bls.n	8001346 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	f000 bf43 	b.w	80021cc <HAL_RCC_OscConfig+0x106c>
 8001346:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800134a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800135a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d102      	bne.n	8001378 <HAL_RCC_OscConfig+0x218>
 8001372:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	e015      	b.n	80013a4 <HAL_RCC_OscConfig+0x244>
 8001378:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800137c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001380:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800138c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001390:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001394:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80013a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 80013a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013a8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80013ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80013b0:	fa92 f2a2 	rbit	r2, r2
 80013b4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80013b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80013bc:	fab2 f282 	clz	r2, r2
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	f042 0220 	orr.w	r2, r2, #32
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	f002 021f 	and.w	r2, r2, #31
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0ab      	beq.n	8001330 <HAL_RCC_OscConfig+0x1d0>
 80013d8:	e05d      	b.n	8001496 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fa87 	bl	80008ec <HAL_GetTick>
 80013de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fa82 	bl	80008ec <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b64      	cmp	r3, #100	@ 0x64
 80013f2:	d902      	bls.n	80013fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f000 bee9 	b.w	80021cc <HAL_RCC_OscConfig+0x106c>
 80013fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013fe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800140e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	095b      	lsrs	r3, r3, #5
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d102      	bne.n	800142c <HAL_RCC_OscConfig+0x2cc>
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	e015      	b.n	8001458 <HAL_RCC_OscConfig+0x2f8>
 800142c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001430:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001440:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001444:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001448:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_RCC_OscConfig+0x330>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800145c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001460:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001464:	fa92 f2a2 	rbit	r2, r2
 8001468:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800146c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001470:	fab2 f282 	clz	r2, r2
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	f042 0220 	orr.w	r2, r2, #32
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	f002 021f 	and.w	r2, r2, #31
 8001480:	2101      	movs	r1, #1
 8001482:	fa01 f202 	lsl.w	r2, r1, r2
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ab      	bne.n	80013e4 <HAL_RCC_OscConfig+0x284>
 800148c:	e003      	b.n	8001496 <HAL_RCC_OscConfig+0x336>
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 817d 	beq.w	80017a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014ac:	4ba6      	ldr	r3, [pc, #664]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014b8:	4ba3      	ldr	r3, [pc, #652]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d172      	bne.n	80015aa <HAL_RCC_OscConfig+0x44a>
 80014c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d16c      	bne.n	80015aa <HAL_RCC_OscConfig+0x44a>
 80014d0:	2302      	movs	r3, #2
 80014d2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80014e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d102      	bne.n	8001500 <HAL_RCC_OscConfig+0x3a0>
 80014fa:	4b93      	ldr	r3, [pc, #588]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	e013      	b.n	8001528 <HAL_RCC_OscConfig+0x3c8>
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001518:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001524:	4b88      	ldr	r3, [pc, #544]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 8001526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001528:	2202      	movs	r2, #2
 800152a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800152e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001532:	fa92 f2a2 	rbit	r2, r2
 8001536:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800153a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800153e:	fab2 f282 	clz	r2, r2
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	f042 0220 	orr.w	r2, r2, #32
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f002 021f 	and.w	r2, r2, #31
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <HAL_RCC_OscConfig+0x410>
 800155a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d002      	beq.n	8001570 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	f000 be2e 	b.w	80021cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b75      	ldr	r3, [pc, #468]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800157c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	21f8      	movs	r1, #248	@ 0xf8
 8001586:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800158e:	fa91 f1a1 	rbit	r1, r1
 8001592:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001596:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800159a:	fab1 f181 	clz	r1, r1
 800159e:	b2c9      	uxtb	r1, r1
 80015a0:	408b      	lsls	r3, r1
 80015a2:	4969      	ldr	r1, [pc, #420]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a8:	e0fd      	b.n	80017a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8088 	beq.w	80016cc <HAL_RCC_OscConfig+0x56c>
 80015bc:	2301      	movs	r3, #1
 80015be:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80015ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80015dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	461a      	mov	r2, r3
 80015e4:	2301      	movs	r3, #1
 80015e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff f980 	bl	80008ec <HAL_GetTick>
 80015ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff f97b 	bl	80008ec <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d902      	bls.n	8001608 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	f000 bde2 	b.w	80021cc <HAL_RCC_OscConfig+0x106c>
 8001608:	2302      	movs	r3, #2
 800160a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800161a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	095b      	lsrs	r3, r3, #5
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <HAL_RCC_OscConfig+0x4d8>
 8001632:	4b45      	ldr	r3, [pc, #276]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e013      	b.n	8001660 <HAL_RCC_OscConfig+0x500>
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001650:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800165c:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001660:	2202      	movs	r2, #2
 8001662:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001666:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800166a:	fa92 f2a2 	rbit	r2, r2
 800166e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001672:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001676:	fab2 f282 	clz	r2, r2
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f042 0220 	orr.w	r2, r2, #32
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	f002 021f 	and.w	r2, r2, #31
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0af      	beq.n	80015f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800169a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	21f8      	movs	r1, #248	@ 0xf8
 80016a8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80016b0:	fa91 f1a1 	rbit	r1, r1
 80016b4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80016b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80016bc:	fab1 f181 	clz	r1, r1
 80016c0:	b2c9      	uxtb	r1, r1
 80016c2:	408b      	lsls	r3, r1
 80016c4:	4920      	ldr	r1, [pc, #128]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
 80016ca:	e06c      	b.n	80017a6 <HAL_RCC_OscConfig+0x646>
 80016cc:	2301      	movs	r3, #1
 80016ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80016de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80016ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	461a      	mov	r2, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff f8f8 	bl	80008ec <HAL_GetTick>
 80016fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff f8f3 	bl	80008ec <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d902      	bls.n	8001718 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	f000 bd5a 	b.w	80021cc <HAL_RCC_OscConfig+0x106c>
 8001718:	2302      	movs	r3, #2
 800171a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800172a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	095b      	lsrs	r3, r3, #5
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d104      	bne.n	800174c <HAL_RCC_OscConfig+0x5ec>
 8001742:	4b01      	ldr	r3, [pc, #4]	@ (8001748 <HAL_RCC_OscConfig+0x5e8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	e015      	b.n	8001774 <HAL_RCC_OscConfig+0x614>
 8001748:	40021000 	.word	0x40021000
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001756:	fa93 f3a3 	rbit	r3, r3
 800175a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001764:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001770:	4bc8      	ldr	r3, [pc, #800]	@ (8001a94 <HAL_RCC_OscConfig+0x934>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	2202      	movs	r2, #2
 8001776:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800177a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800177e:	fa92 f2a2 	rbit	r2, r2
 8001782:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001786:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800178a:	fab2 f282 	clz	r2, r2
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	f042 0220 	orr.w	r2, r2, #32
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	f002 021f 	and.w	r2, r2, #31
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1ad      	bne.n	8001702 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8110 	beq.w	80019dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d079      	beq.n	80018c0 <HAL_RCC_OscConfig+0x760>
 80017cc:	2301      	movs	r3, #1
 80017ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80017de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4bab      	ldr	r3, [pc, #684]	@ (8001a98 <HAL_RCC_OscConfig+0x938>)
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	461a      	mov	r2, r3
 80017f2:	2301      	movs	r3, #1
 80017f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f6:	f7ff f879 	bl	80008ec <HAL_GetTick>
 80017fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff f874 	bl	80008ec <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d902      	bls.n	8001816 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	f000 bcdb 	b.w	80021cc <HAL_RCC_OscConfig+0x106c>
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001830:	2202      	movs	r2, #2
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001838:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fa93 f2a3 	rbit	r2, r3
 8001842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001854:	2202      	movs	r2, #2
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	fa93 f2a3 	rbit	r2, r3
 8001866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800186e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001870:	4b88      	ldr	r3, [pc, #544]	@ (8001a94 <HAL_RCC_OscConfig+0x934>)
 8001872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001878:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800187c:	2102      	movs	r1, #2
 800187e:	6019      	str	r1, [r3, #0]
 8001880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001884:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	fa93 f1a3 	rbit	r1, r3
 800188e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001892:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001896:	6019      	str	r1, [r3, #0]
  return result;
 8001898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	2101      	movs	r1, #1
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0a0      	beq.n	8001800 <HAL_RCC_OscConfig+0x6a0>
 80018be:	e08d      	b.n	80019dc <HAL_RCC_OscConfig+0x87c>
 80018c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	fa93 f2a3 	rbit	r2, r3
 80018da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80018e2:	601a      	str	r2, [r3, #0]
  return result;
 80018e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80018ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b68      	ldr	r3, [pc, #416]	@ (8001a98 <HAL_RCC_OscConfig+0x938>)
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	461a      	mov	r2, r3
 80018fe:	2300      	movs	r3, #0
 8001900:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7fe fff3 	bl	80008ec <HAL_GetTick>
 8001906:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190c:	f7fe ffee 	bl	80008ec <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d902      	bls.n	8001922 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	f000 bc55 	b.w	80021cc <HAL_RCC_OscConfig+0x106c>
 8001922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001926:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800192a:	2202      	movs	r2, #2
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001932:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001940:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800194e:	2202      	movs	r2, #2
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001956:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001964:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001972:	2202      	movs	r2, #2
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001988:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800198c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198e:	4b41      	ldr	r3, [pc, #260]	@ (8001a94 <HAL_RCC_OscConfig+0x934>)
 8001990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001996:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800199a:	2102      	movs	r1, #2
 800199c:	6019      	str	r1, [r3, #0]
 800199e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f1a3 	rbit	r1, r3
 80019ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80019b4:	6019      	str	r1, [r3, #0]
  return result;
 80019b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d197      	bne.n	800190c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 81a1 	beq.w	8001d34 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <HAL_RCC_OscConfig+0x934>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d116      	bne.n	8001a32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <HAL_RCC_OscConfig+0x934>)
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	4a22      	ldr	r2, [pc, #136]	@ (8001a94 <HAL_RCC_OscConfig+0x934>)
 8001a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	61d3      	str	r3, [r2, #28]
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_RCC_OscConfig+0x934>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a26:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001a2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <HAL_RCC_OscConfig+0x93c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d11a      	bne.n	8001a74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <HAL_RCC_OscConfig+0x93c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a16      	ldr	r2, [pc, #88]	@ (8001a9c <HAL_RCC_OscConfig+0x93c>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7fe ff4f 	bl	80008ec <HAL_GetTick>
 8001a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a52:	e009      	b.n	8001a68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a54:	f7fe ff4a 	bl	80008ec <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	@ 0x64
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e3b1      	b.n	80021cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_RCC_OscConfig+0x93c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ef      	beq.n	8001a54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10d      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x940>
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <HAL_RCC_OscConfig+0x934>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a02      	ldr	r2, [pc, #8]	@ (8001a94 <HAL_RCC_OscConfig+0x934>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6213      	str	r3, [r2, #32]
 8001a90:	e03c      	b.n	8001b0c <HAL_RCC_OscConfig+0x9ac>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	10908120 	.word	0x10908120
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x96a>
 8001ab0:	4bc1      	ldr	r3, [pc, #772]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4ac0      	ldr	r2, [pc, #768]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	4bbe      	ldr	r3, [pc, #760]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	4abd      	ldr	r2, [pc, #756]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6213      	str	r3, [r2, #32]
 8001ac8:	e020      	b.n	8001b0c <HAL_RCC_OscConfig+0x9ac>
 8001aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x994>
 8001ada:	4bb7      	ldr	r3, [pc, #732]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4ab6      	ldr	r2, [pc, #728]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4bb4      	ldr	r3, [pc, #720]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4ab3      	ldr	r2, [pc, #716]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0x9ac>
 8001af4:	4bb0      	ldr	r3, [pc, #704]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4aaf      	ldr	r2, [pc, #700]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	4bad      	ldr	r3, [pc, #692]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4aac      	ldr	r2, [pc, #688]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8081 	beq.w	8001c20 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7fe fee5 	bl	80008ec <HAL_GetTick>
 8001b22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7fe fee0 	bl	80008ec <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e345      	b.n	80021cc <HAL_RCC_OscConfig+0x106c>
 8001b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b48:	2202      	movs	r2, #2
 8001b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b50:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b68:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b86:	601a      	str	r2, [r3, #0]
  return result;
 8001b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	095b      	lsrs	r3, r3, #5
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_OscConfig+0xa4c>
 8001ba6:	4b84      	ldr	r3, [pc, #528]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	e013      	b.n	8001bd4 <HAL_RCC_OscConfig+0xa74>
 8001bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	fa93 f2a3 	rbit	r2, r3
 8001bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	4b79      	ldr	r3, [pc, #484]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bd8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001bdc:	2102      	movs	r1, #2
 8001bde:	6011      	str	r1, [r2, #0]
 8001be0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001be4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	fa92 f1a2 	rbit	r1, r2
 8001bee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bf2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001bf6:	6011      	str	r1, [r2, #0]
  return result;
 8001bf8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bfc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	fab2 f282 	clz	r2, r2
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	f002 021f 	and.w	r2, r2, #31
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d084      	beq.n	8001b28 <HAL_RCC_OscConfig+0x9c8>
 8001c1e:	e07f      	b.n	8001d20 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7fe fe64 	bl	80008ec <HAL_GetTick>
 8001c24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	e00b      	b.n	8001c42 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7fe fe5f 	bl	80008ec <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e2c4      	b.n	80021cc <HAL_RCC_OscConfig+0x106c>
 8001c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c46:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c52:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c60:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c6e:	2202      	movs	r2, #2
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c88:	601a      	str	r2, [r3, #0]
  return result;
 8001c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d102      	bne.n	8001cae <HAL_RCC_OscConfig+0xb4e>
 8001ca8:	4b43      	ldr	r3, [pc, #268]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	e013      	b.n	8001cd6 <HAL_RCC_OscConfig+0xb76>
 8001cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f2a3 	rbit	r2, r3
 8001cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ccc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	4b39      	ldr	r3, [pc, #228]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cda:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001cde:	2102      	movs	r1, #2
 8001ce0:	6011      	str	r1, [r2, #0]
 8001ce2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ce6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fa92 f1a2 	rbit	r1, r2
 8001cf0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cf4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001cf8:	6011      	str	r1, [r2, #0]
  return result;
 8001cfa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cfe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d184      	bne.n	8001c2a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d20:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b23      	ldr	r3, [pc, #140]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	4a22      	ldr	r2, [pc, #136]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8242 	beq.w	80021ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <HAL_RCC_OscConfig+0xc58>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	f000 8213 	beq.w	800217a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	f040 8162 	bne.w	800202a <HAL_RCC_OscConfig+0xeca>
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d78:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fa93 f2a3 	rbit	r2, r3
 8001d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d86:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d8a:	601a      	str	r2, [r3, #0]
  return result;
 8001d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d90:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001da0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	461a      	mov	r2, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe fd9e 	bl	80008ec <HAL_GetTick>
 8001db0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db4:	e00c      	b.n	8001dd0 <HAL_RCC_OscConfig+0xc70>
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7fe fd96 	bl	80008ec <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1fd      	b.n	80021cc <HAL_RCC_OscConfig+0x106c>
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001dd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f2a3 	rbit	r2, r3
 8001dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001df4:	601a      	str	r2, [r3, #0]
  return result;
 8001df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dfa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001dfe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d102      	bne.n	8001e1a <HAL_RCC_OscConfig+0xcba>
 8001e14:	4bb0      	ldr	r3, [pc, #704]	@ (80020d8 <HAL_RCC_OscConfig+0xf78>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	e027      	b.n	8001e6a <HAL_RCC_OscConfig+0xd0a>
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e44:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e52:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e60:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	4b9c      	ldr	r3, [pc, #624]	@ (80020d8 <HAL_RCC_OscConfig+0xf78>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e6e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e72:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e76:	6011      	str	r1, [r2, #0]
 8001e78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e7c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	fa92 f1a2 	rbit	r1, r2
 8001e86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e8a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e8e:	6011      	str	r1, [r2, #0]
  return result;
 8001e90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e94:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f042 0220 	orr.w	r2, r2, #32
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f002 021f 	and.w	r2, r2, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d182      	bne.n	8001dbc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb6:	4b88      	ldr	r3, [pc, #544]	@ (80020d8 <HAL_RCC_OscConfig+0xf78>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	497f      	ldr	r1, [pc, #508]	@ (80020d8 <HAL_RCC_OscConfig+0xf78>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ee6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f02:	601a      	str	r2, [r3, #0]
  return result;
 8001f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f08:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f18:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2301      	movs	r3, #1
 8001f22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe fce2 	bl	80008ec <HAL_GetTick>
 8001f28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	e009      	b.n	8001f42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe fcdd 	bl	80008ec <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e144      	b.n	80021cc <HAL_RCC_OscConfig+0x106c>
 8001f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f46:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f54:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f62:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f66:	601a      	str	r2, [r3, #0]
  return result;
 8001f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d102      	bne.n	8001f8c <HAL_RCC_OscConfig+0xe2c>
 8001f86:	4b54      	ldr	r3, [pc, #336]	@ (80020d8 <HAL_RCC_OscConfig+0xf78>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e027      	b.n	8001fdc <HAL_RCC_OscConfig+0xe7c>
 8001f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f90:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001fba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <HAL_RCC_OscConfig+0xf78>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fe0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001fe4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001fe8:	6011      	str	r1, [r2, #0]
 8001fea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fee:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	fa92 f1a2 	rbit	r1, r2
 8001ff8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ffc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002000:	6011      	str	r1, [r2, #0]
  return result;
 8002002:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002006:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f002 021f 	and.w	r2, r2, #31
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d082      	beq.n	8001f2e <HAL_RCC_OscConfig+0xdce>
 8002028:	e0cf      	b.n	80021ca <HAL_RCC_OscConfig+0x106a>
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002032:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800204e:	601a      	str	r2, [r3, #0]
  return result;
 8002050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002054:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002058:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002064:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	461a      	mov	r2, r3
 800206c:	2300      	movs	r3, #0
 800206e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe fc3c 	bl	80008ec <HAL_GetTick>
 8002074:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002078:	e009      	b.n	800208e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207a:	f7fe fc37 	bl	80008ec <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e09e      	b.n	80021cc <HAL_RCC_OscConfig+0x106c>
 800208e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002092:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002096:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800209a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	fa93 f2a3 	rbit	r2, r3
 80020aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020b2:	601a      	str	r2, [r3, #0]
  return result;
 80020b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d104      	bne.n	80020dc <HAL_RCC_OscConfig+0xf7c>
 80020d2:	4b01      	ldr	r3, [pc, #4]	@ (80020d8 <HAL_RCC_OscConfig+0xf78>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e029      	b.n	800212c <HAL_RCC_OscConfig+0xfcc>
 80020d8:	40021000 	.word	0x40021000
 80020dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80020e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fa93 f2a3 	rbit	r2, r3
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002106:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800210a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <HAL_RCC_OscConfig+0x1078>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002130:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002134:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002138:	6011      	str	r1, [r2, #0]
 800213a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800213e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	fa92 f1a2 	rbit	r1, r2
 8002148:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800214c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002150:	6011      	str	r1, [r2, #0]
  return result;
 8002152:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002156:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d180      	bne.n	800207a <HAL_RCC_OscConfig+0xf1a>
 8002178:	e027      	b.n	80021ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e01e      	b.n	80021cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800218e:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_RCC_OscConfig+0x1078>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002196:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800219a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800219e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d10b      	bne.n	80021c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80021ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80021b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000

080021dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b09e      	sub	sp, #120	@ 0x78
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e162      	b.n	80024ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b90      	ldr	r3, [pc, #576]	@ (8002438 <HAL_RCC_ClockConfig+0x25c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d910      	bls.n	8002224 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b8d      	ldr	r3, [pc, #564]	@ (8002438 <HAL_RCC_ClockConfig+0x25c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0207 	bic.w	r2, r3, #7
 800220a:	498b      	ldr	r1, [pc, #556]	@ (8002438 <HAL_RCC_ClockConfig+0x25c>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b89      	ldr	r3, [pc, #548]	@ (8002438 <HAL_RCC_ClockConfig+0x25c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e14a      	b.n	80024ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b82      	ldr	r3, [pc, #520]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	497f      	ldr	r1, [pc, #508]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80dc 	beq.w	8002408 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d13c      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xf6>
 8002258:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800225c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d102      	bne.n	8002282 <HAL_RCC_ClockConfig+0xa6>
 800227c:	4b6f      	ldr	r3, [pc, #444]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	e00f      	b.n	80022a2 <HAL_RCC_ClockConfig+0xc6>
 8002282:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002286:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002290:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002294:	663b      	str	r3, [r7, #96]	@ 0x60
 8002296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800229e:	4b67      	ldr	r3, [pc, #412]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80022a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022aa:	fa92 f2a2 	rbit	r2, r2
 80022ae:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80022b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80022b2:	fab2 f282 	clz	r2, r2
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f042 0220 	orr.w	r2, r2, #32
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f002 021f 	and.w	r2, r2, #31
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f202 	lsl.w	r2, r1, r2
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d17b      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0f3      	b.n	80024ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d13c      	bne.n	8002354 <HAL_RCC_ClockConfig+0x178>
 80022da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80022e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_ClockConfig+0x128>
 80022fe:	4b4f      	ldr	r3, [pc, #316]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	e00f      	b.n	8002324 <HAL_RCC_ClockConfig+0x148>
 8002304:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002308:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	647b      	str	r3, [r7, #68]	@ 0x44
 8002312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002316:	643b      	str	r3, [r7, #64]	@ 0x40
 8002318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002320:	4b46      	ldr	r3, [pc, #280]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002328:	63ba      	str	r2, [r7, #56]	@ 0x38
 800232a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800232c:	fa92 f2a2 	rbit	r2, r2
 8002330:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002332:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f042 0220 	orr.w	r2, r2, #32
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f002 021f 	and.w	r2, r2, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d13a      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b2      	b.n	80024ba <HAL_RCC_ClockConfig+0x2de>
 8002354:	2302      	movs	r3, #2
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_RCC_ClockConfig+0x1a0>
 8002376:	4b31      	ldr	r3, [pc, #196]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e00d      	b.n	8002398 <HAL_RCC_ClockConfig+0x1bc>
 800237c:	2302      	movs	r3, #2
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
 8002388:	2302      	movs	r3, #2
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	4b29      	ldr	r3, [pc, #164]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	2202      	movs	r2, #2
 800239a:	61ba      	str	r2, [r7, #24]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	fa92 f2a2 	rbit	r2, r2
 80023a2:	617a      	str	r2, [r7, #20]
  return result;
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	fab2 f282 	clz	r2, r2
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	f042 0220 	orr.w	r2, r2, #32
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	f002 021f 	and.w	r2, r2, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f202 	lsl.w	r2, r1, r2
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e079      	b.n	80024ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	4b1d      	ldr	r3, [pc, #116]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	491a      	ldr	r1, [pc, #104]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fa88 	bl	80008ec <HAL_GetTick>
 80023dc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7fe fa84 	bl	80008ec <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e061      	b.n	80024ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b11      	ldr	r3, [pc, #68]	@ (800243c <HAL_RCC_ClockConfig+0x260>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 020c 	and.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1eb      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_RCC_ClockConfig+0x25c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d214      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <HAL_RCC_ClockConfig+0x25c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	4906      	ldr	r1, [pc, #24]	@ (8002438 <HAL_RCC_ClockConfig+0x25c>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <HAL_RCC_ClockConfig+0x25c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e040      	b.n	80024ba <HAL_RCC_ClockConfig+0x2de>
 8002438:	40022000 	.word	0x40022000
 800243c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244c:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_RCC_ClockConfig+0x2e8>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	491a      	ldr	r1, [pc, #104]	@ (80024c4 <HAL_RCC_ClockConfig+0x2e8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246a:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <HAL_RCC_ClockConfig+0x2e8>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4912      	ldr	r1, [pc, #72]	@ (80024c4 <HAL_RCC_ClockConfig+0x2e8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800247e:	f000 f829 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002482:	4601      	mov	r1, r0
 8002484:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <HAL_RCC_ClockConfig+0x2e8>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800248c:	22f0      	movs	r2, #240	@ 0xf0
 800248e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	fa92 f2a2 	rbit	r2, r2
 8002496:	60fa      	str	r2, [r7, #12]
  return result;
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	40d3      	lsrs	r3, r2
 80024a2:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <HAL_RCC_ClockConfig+0x2ec>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	fa21 f303 	lsr.w	r3, r1, r3
 80024aa:	4a08      	ldr	r2, [pc, #32]	@ (80024cc <HAL_RCC_ClockConfig+0x2f0>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_RCC_ClockConfig+0x2f4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe f9d6 	bl	8000864 <HAL_InitTick>
  
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3778      	adds	r7, #120	@ 0x78
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08004398 	.word	0x08004398
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d002      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x30>
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d003      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x36>
 8002502:	e026      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_RCC_GetSysClockFreq+0x98>)
 8002506:	613b      	str	r3, [r7, #16]
      break;
 8002508:	e026      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0c9b      	lsrs	r3, r3, #18
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	4a17      	ldr	r2, [pc, #92]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002518:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x94>)
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002530:	4a0e      	ldr	r2, [pc, #56]	@ (800256c <HAL_RCC_GetSysClockFreq+0x98>)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	fbb2 f2f3 	udiv	r2, r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e004      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a0c      	ldr	r2, [pc, #48]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	613b      	str	r3, [r7, #16]
      break;
 8002550:	e002      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_RCC_GetSysClockFreq+0x98>)
 8002554:	613b      	str	r3, [r7, #16]
      break;
 8002556:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002558:	693b      	ldr	r3, [r7, #16]
}
 800255a:	4618      	mov	r0, r3
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	007a1200 	.word	0x007a1200
 8002570:	080043b0 	.word	0x080043b0
 8002574:	080043c0 	.word	0x080043c0
 8002578:	003d0900 	.word	0x003d0900

0800257c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_RCC_GetHCLKFreq+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800259a:	f7ff ffef 	bl	800257c <HAL_RCC_GetHCLKFreq>
 800259e:	4601      	mov	r1, r0
 80025a0:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025a8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80025ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	fa92 f2a2 	rbit	r2, r2
 80025b4:	603a      	str	r2, [r7, #0]
  return result;
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	fab2 f282 	clz	r2, r2
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	40d3      	lsrs	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	080043a8 	.word	0x080043a8

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025de:	f7ff ffcd 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025e2:	4601      	mov	r1, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80025ec:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80025f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	fa92 f2a2 	rbit	r2, r2
 80025f8:	603a      	str	r2, [r7, #0]
  return result;
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	40d3      	lsrs	r3, r2
 8002604:	4a04      	ldr	r2, [pc, #16]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	080043a8 	.word	0x080043a8

0800261c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e040      	b.n	80026b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fd ff36 	bl	80004b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	@ 0x24
 8002648:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fcee 	bl	8003044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fbb5 	bl	8002dd8 <UART_SetConfig>
 800266e:	4603      	mov	r3, r0
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e01b      	b.n	80026b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fd6d 	bl	8003188 <UART_CheckIdleState>
 80026ae:	4603      	mov	r3, r0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d177      	bne.n	80027c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_UART_Transmit+0x24>
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e070      	b.n	80027c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2221      	movs	r2, #33	@ 0x21
 80026ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ee:	f7fe f8fd 	bl	80008ec <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270c:	d108      	bne.n	8002720 <HAL_UART_Transmit+0x68>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e003      	b.n	8002728 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002728:	e02f      	b.n	800278a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2180      	movs	r1, #128	@ 0x80
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fdcf 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e03b      	b.n	80027c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800275c:	b292      	uxth	r2, r2
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	3302      	adds	r3, #2
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	e007      	b.n	8002778 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3301      	adds	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1c9      	bne.n	800272a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2200      	movs	r2, #0
 800279e:	2140      	movs	r1, #64	@ 0x40
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fd99 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d004      	beq.n	80027b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e005      	b.n	80027c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0ba      	sub	sp, #232	@ 0xe8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80027f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80027fa:	4013      	ands	r3, r2
 80027fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d115      	bne.n	8002834 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00f      	beq.n	8002834 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d009      	beq.n	8002834 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 82ab 	beq.w	8002d80 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
      }
      return;
 8002832:	e2a5      	b.n	8002d80 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8117 	beq.w	8002a6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800283e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800284a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800284e:	4b85      	ldr	r3, [pc, #532]	@ (8002a64 <HAL_UART_IRQHandler+0x298>)
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 810a 	beq.w	8002a6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d011      	beq.n	8002888 <HAL_UART_IRQHandler+0xbc>
 8002864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d011      	beq.n	80028b8 <HAL_UART_IRQHandler+0xec>
 8002894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2202      	movs	r2, #2
 80028a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d011      	beq.n	80028e8 <HAL_UART_IRQHandler+0x11c>
 80028c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2204      	movs	r2, #4
 80028d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028de:	f043 0202 	orr.w	r2, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d017      	beq.n	8002924 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002904:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2208      	movs	r2, #8
 8002912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800291a:	f043 0208 	orr.w	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800292c:	2b00      	cmp	r3, #0
 800292e:	d012      	beq.n	8002956 <HAL_UART_IRQHandler+0x18a>
 8002930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002934:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00c      	beq.n	8002956 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8211 	beq.w	8002d84 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800296e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002990:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299e:	2b40      	cmp	r3, #64	@ 0x40
 80029a0:	d005      	beq.n	80029ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d04f      	beq.n	8002a4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fcff 	bl	80033b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029be:	2b40      	cmp	r3, #64	@ 0x40
 80029c0:	d141      	bne.n	8002a46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3308      	adds	r3, #8
 80029c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80029d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3308      	adds	r3, #8
 80029ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029fe:	e841 2300 	strex	r3, r2, [r1]
 8002a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1d9      	bne.n	80029c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d013      	beq.n	8002a3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a1a:	4a13      	ldr	r2, [pc, #76]	@ (8002a68 <HAL_UART_IRQHandler+0x29c>)
 8002a1c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f928 	bl	8000c78 <HAL_DMA_Abort_IT>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d017      	beq.n	8002a5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	e00f      	b.n	8002a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f9b4 	bl	8002dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	e00b      	b.n	8002a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f9b0 	bl	8002dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a4c:	e007      	b.n	8002a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f9ac 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002a5c:	e192      	b.n	8002d84 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5e:	bf00      	nop
    return;
 8002a60:	e190      	b.n	8002d84 <HAL_UART_IRQHandler+0x5b8>
 8002a62:	bf00      	nop
 8002a64:	04000120 	.word	0x04000120
 8002a68:	0800347b 	.word	0x0800347b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f040 814b 	bne.w	8002d0c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8144 	beq.w	8002d0c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 813d 	beq.w	8002d0c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2210      	movs	r2, #16
 8002a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa4:	2b40      	cmp	r3, #64	@ 0x40
 8002aa6:	f040 80b5 	bne.w	8002c14 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ab6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8164 	beq.w	8002d88 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002aca:	429a      	cmp	r2, r3
 8002acc:	f080 815c 	bcs.w	8002d88 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	f000 8086 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002af2:	e853 3f00 	ldrex	r3, [r3]
 8002af6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002afe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b14:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b18:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1da      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3308      	adds	r3, #8
 8002b36:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3308      	adds	r3, #8
 8002b50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b54:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b60:	e841 2300 	strex	r3, r2, [r1]
 8002b64:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1e1      	bne.n	8002b30 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3308      	adds	r3, #8
 8002b72:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b76:	e853 3f00 	ldrex	r3, [r3]
 8002b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e3      	bne.n	8002b6c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bc2:	f023 0310 	bic.w	r3, r3, #16
 8002bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bd6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e4      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe f805 	bl	8000bfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f8d7 	bl	8002dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c12:	e0b9      	b.n	8002d88 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80ab 	beq.w	8002d8c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002c36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80a6 	beq.w	8002d8c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	e853 3f00 	ldrex	r3, [r3]
 8002c4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c64:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e4      	bne.n	8002c40 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	623b      	str	r3, [r7, #32]
   return(result);
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e3      	bne.n	8002c76 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0310 	bic.w	r3, r3, #16
 8002cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	69b9      	ldr	r1, [r7, #24]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e4      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f85b 	bl	8002dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d0a:	e03f      	b.n	8002d8c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <HAL_UART_IRQHandler+0x56a>
 8002d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fbe3 	bl	80034fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d34:	e02d      	b.n	8002d92 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00e      	beq.n	8002d60 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01c      	beq.n	8002d90 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
    }
    return;
 8002d5e:	e017      	b.n	8002d90 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d012      	beq.n	8002d92 <HAL_UART_IRQHandler+0x5c6>
 8002d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00c      	beq.n	8002d92 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fb94 	bl	80034a6 <UART_EndTransmit_IT>
    return;
 8002d7e:	e008      	b.n	8002d92 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d80:	bf00      	nop
 8002d82:	e006      	b.n	8002d92 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002d84:	bf00      	nop
 8002d86:	e004      	b.n	8002d92 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d88:	bf00      	nop
 8002d8a:	e002      	b.n	8002d92 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d8c:	bf00      	nop
 8002d8e:	e000      	b.n	8002d92 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002d90:	bf00      	nop
  }

}
 8002d92:	37e8      	adds	r7, #232	@ 0xe8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b8a      	ldr	r3, [pc, #552]	@ (800302c <UART_SetConfig+0x254>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	6979      	ldr	r1, [r7, #20]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a78      	ldr	r2, [pc, #480]	@ (8003030 <UART_SetConfig+0x258>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d120      	bne.n	8002e96 <UART_SetConfig+0xbe>
 8002e54:	4b77      	ldr	r3, [pc, #476]	@ (8003034 <UART_SetConfig+0x25c>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d817      	bhi.n	8002e90 <UART_SetConfig+0xb8>
 8002e60:	a201      	add	r2, pc, #4	@ (adr r2, 8002e68 <UART_SetConfig+0x90>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e85 	.word	0x08002e85
 8002e70:	08002e8b 	.word	0x08002e8b
 8002e74:	08002e7f 	.word	0x08002e7f
 8002e78:	2300      	movs	r3, #0
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e01d      	b.n	8002eba <UART_SetConfig+0xe2>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e01a      	b.n	8002eba <UART_SetConfig+0xe2>
 8002e84:	2304      	movs	r3, #4
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e017      	b.n	8002eba <UART_SetConfig+0xe2>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e014      	b.n	8002eba <UART_SetConfig+0xe2>
 8002e90:	2310      	movs	r3, #16
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e011      	b.n	8002eba <UART_SetConfig+0xe2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a67      	ldr	r2, [pc, #412]	@ (8003038 <UART_SetConfig+0x260>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d102      	bne.n	8002ea6 <UART_SetConfig+0xce>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e009      	b.n	8002eba <UART_SetConfig+0xe2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a64      	ldr	r2, [pc, #400]	@ (800303c <UART_SetConfig+0x264>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d102      	bne.n	8002eb6 <UART_SetConfig+0xde>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e001      	b.n	8002eba <UART_SetConfig+0xe2>
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec2:	d15a      	bne.n	8002f7a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002ec4:	7ffb      	ldrb	r3, [r7, #31]
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d827      	bhi.n	8002f1a <UART_SetConfig+0x142>
 8002eca:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed0 <UART_SetConfig+0xf8>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ef5 	.word	0x08002ef5
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002f05 	.word	0x08002f05
 8002edc:	08002f1b 	.word	0x08002f1b
 8002ee0:	08002f0b 	.word	0x08002f0b
 8002ee4:	08002f1b 	.word	0x08002f1b
 8002ee8:	08002f1b 	.word	0x08002f1b
 8002eec:	08002f1b 	.word	0x08002f1b
 8002ef0:	08002f13 	.word	0x08002f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef4:	f7ff fb4e 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8002ef8:	61b8      	str	r0, [r7, #24]
        break;
 8002efa:	e013      	b.n	8002f24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7ff fb6c 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 8002f00:	61b8      	str	r0, [r7, #24]
        break;
 8002f02:	e00f      	b.n	8002f24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f04:	4b4e      	ldr	r3, [pc, #312]	@ (8003040 <UART_SetConfig+0x268>)
 8002f06:	61bb      	str	r3, [r7, #24]
        break;
 8002f08:	e00c      	b.n	8002f24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0a:	f7ff fae3 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002f0e:	61b8      	str	r0, [r7, #24]
        break;
 8002f10:	e008      	b.n	8002f24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f16:	61bb      	str	r3, [r7, #24]
        break;
 8002f18:	e004      	b.n	8002f24 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	77bb      	strb	r3, [r7, #30]
        break;
 8002f22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d074      	beq.n	8003014 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	005a      	lsls	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	d916      	bls.n	8002f74 <UART_SetConfig+0x19c>
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f4c:	d212      	bcs.n	8002f74 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f023 030f 	bic.w	r3, r3, #15
 8002f56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	89fb      	ldrh	r3, [r7, #14]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	89fa      	ldrh	r2, [r7, #14]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	e04f      	b.n	8003014 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	77bb      	strb	r3, [r7, #30]
 8002f78:	e04c      	b.n	8003014 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f7a:	7ffb      	ldrb	r3, [r7, #31]
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d828      	bhi.n	8002fd2 <UART_SetConfig+0x1fa>
 8002f80:	a201      	add	r2, pc, #4	@ (adr r2, 8002f88 <UART_SetConfig+0x1b0>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002fad 	.word	0x08002fad
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	08002fbd 	.word	0x08002fbd
 8002f94:	08002fd3 	.word	0x08002fd3
 8002f98:	08002fc3 	.word	0x08002fc3
 8002f9c:	08002fd3 	.word	0x08002fd3
 8002fa0:	08002fd3 	.word	0x08002fd3
 8002fa4:	08002fd3 	.word	0x08002fd3
 8002fa8:	08002fcb 	.word	0x08002fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fac:	f7ff faf2 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8002fb0:	61b8      	str	r0, [r7, #24]
        break;
 8002fb2:	e013      	b.n	8002fdc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fb4:	f7ff fb10 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	61b8      	str	r0, [r7, #24]
        break;
 8002fba:	e00f      	b.n	8002fdc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fbc:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <UART_SetConfig+0x268>)
 8002fbe:	61bb      	str	r3, [r7, #24]
        break;
 8002fc0:	e00c      	b.n	8002fdc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc2:	f7ff fa87 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002fc6:	61b8      	str	r0, [r7, #24]
        break;
 8002fc8:	e008      	b.n	8002fdc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fce:	61bb      	str	r3, [r7, #24]
        break;
 8002fd0:	e004      	b.n	8002fdc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	77bb      	strb	r3, [r7, #30]
        break;
 8002fda:	bf00      	nop
    }

    if (pclk != 0U)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d018      	beq.n	8003014 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	085a      	lsrs	r2, r3, #1
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	441a      	add	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d909      	bls.n	8003010 <UART_SetConfig+0x238>
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003002:	d205      	bcs.n	8003010 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	e001      	b.n	8003014 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003020:	7fbb      	ldrb	r3, [r7, #30]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	efff69f3 	.word	0xefff69f3
 8003030:	40013800 	.word	0x40013800
 8003034:	40021000 	.word	0x40021000
 8003038:	40004400 	.word	0x40004400
 800303c:	40004800 	.word	0x40004800
 8003040:	007a1200 	.word	0x007a1200

08003044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01a      	beq.n	800315a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003142:	d10a      	bne.n	800315a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
  }
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b098      	sub	sp, #96	@ 0x60
 800318c:	af02      	add	r7, sp, #8
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003198:	f7fd fba8 	bl	80008ec <HAL_GetTick>
 800319c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d12e      	bne.n	800320a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b4:	2200      	movs	r2, #0
 80031b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f88c 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d021      	beq.n	800320a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031da:	653b      	str	r3, [r7, #80]	@ 0x50
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031ec:	e841 2300 	strex	r3, r2, [r1]
 80031f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1e6      	bne.n	80031c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e062      	b.n	80032d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d149      	bne.n	80032ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003218:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003220:	2200      	movs	r2, #0
 8003222:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f856 	bl	80032d8 <UART_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d03c      	beq.n	80032ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	623b      	str	r3, [r7, #32]
   return(result);
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003250:	633b      	str	r3, [r7, #48]	@ 0x30
 8003252:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e6      	bne.n	8003232 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3308      	adds	r3, #8
 800326a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	60fb      	str	r3, [r7, #12]
   return(result);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3308      	adds	r3, #8
 8003282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003284:	61fa      	str	r2, [r7, #28]
 8003286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	69b9      	ldr	r1, [r7, #24]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	617b      	str	r3, [r7, #20]
   return(result);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e5      	bne.n	8003264 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e011      	b.n	80032d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3758      	adds	r7, #88	@ 0x58
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e8:	e04f      	b.n	800338a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d04b      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fd fafb 	bl	80008ec <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <UART_WaitOnFlagUntilTimeout+0x30>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e04e      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d037      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0xb2>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b80      	cmp	r3, #128	@ 0x80
 800331e:	d034      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b40      	cmp	r3, #64	@ 0x40
 8003324:	d031      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b08      	cmp	r3, #8
 8003332:	d110      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2208      	movs	r2, #8
 800333a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f838 	bl	80033b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2208      	movs	r2, #8
 8003346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e029      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003364:	d111      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800336e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f81e 	bl	80033b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e00f      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4013      	ands	r3, r2
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d0a0      	beq.n	80032ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b095      	sub	sp, #84	@ 0x54
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80033da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e6      	bne.n	80033ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3308      	adds	r3, #8
 80033f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3308      	adds	r3, #8
 800340a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800340c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800340e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e5      	bne.n	80033ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003424:	2b01      	cmp	r3, #1
 8003426:	d118      	bne.n	800345a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	60bb      	str	r3, [r7, #8]
   return(result);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f023 0310 	bic.w	r3, r3, #16
 800343c:	647b      	str	r3, [r7, #68]	@ 0x44
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6979      	ldr	r1, [r7, #20]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	613b      	str	r3, [r7, #16]
   return(result);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e6      	bne.n	8003428 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800346e:	bf00      	nop
 8003470:	3754      	adds	r7, #84	@ 0x54
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff fc87 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b088      	sub	sp, #32
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6979      	ldr	r1, [r7, #20]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	613b      	str	r3, [r7, #16]
   return(result);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e6      	bne.n	80034ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fc53 	bl	8002d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034f2:	bf00      	nop
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <std>:
 8003510:	2300      	movs	r3, #0
 8003512:	b510      	push	{r4, lr}
 8003514:	4604      	mov	r4, r0
 8003516:	e9c0 3300 	strd	r3, r3, [r0]
 800351a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800351e:	6083      	str	r3, [r0, #8]
 8003520:	8181      	strh	r1, [r0, #12]
 8003522:	6643      	str	r3, [r0, #100]	@ 0x64
 8003524:	81c2      	strh	r2, [r0, #14]
 8003526:	6183      	str	r3, [r0, #24]
 8003528:	4619      	mov	r1, r3
 800352a:	2208      	movs	r2, #8
 800352c:	305c      	adds	r0, #92	@ 0x5c
 800352e:	f000 f906 	bl	800373e <memset>
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <std+0x58>)
 8003534:	6263      	str	r3, [r4, #36]	@ 0x24
 8003536:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <std+0x5c>)
 8003538:	62a3      	str	r3, [r4, #40]	@ 0x28
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <std+0x60>)
 800353c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800353e:	4b0d      	ldr	r3, [pc, #52]	@ (8003574 <std+0x64>)
 8003540:	6323      	str	r3, [r4, #48]	@ 0x30
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <std+0x68>)
 8003544:	6224      	str	r4, [r4, #32]
 8003546:	429c      	cmp	r4, r3
 8003548:	d006      	beq.n	8003558 <std+0x48>
 800354a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800354e:	4294      	cmp	r4, r2
 8003550:	d002      	beq.n	8003558 <std+0x48>
 8003552:	33d0      	adds	r3, #208	@ 0xd0
 8003554:	429c      	cmp	r4, r3
 8003556:	d105      	bne.n	8003564 <std+0x54>
 8003558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800355c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003560:	f000 b966 	b.w	8003830 <__retarget_lock_init_recursive>
 8003564:	bd10      	pop	{r4, pc}
 8003566:	bf00      	nop
 8003568:	080036b9 	.word	0x080036b9
 800356c:	080036db 	.word	0x080036db
 8003570:	08003713 	.word	0x08003713
 8003574:	08003737 	.word	0x08003737
 8003578:	200001a0 	.word	0x200001a0

0800357c <stdio_exit_handler>:
 800357c:	4a02      	ldr	r2, [pc, #8]	@ (8003588 <stdio_exit_handler+0xc>)
 800357e:	4903      	ldr	r1, [pc, #12]	@ (800358c <stdio_exit_handler+0x10>)
 8003580:	4803      	ldr	r0, [pc, #12]	@ (8003590 <stdio_exit_handler+0x14>)
 8003582:	f000 b869 	b.w	8003658 <_fwalk_sglue>
 8003586:	bf00      	nop
 8003588:	2000000c 	.word	0x2000000c
 800358c:	080040d1 	.word	0x080040d1
 8003590:	2000001c 	.word	0x2000001c

08003594 <cleanup_stdio>:
 8003594:	6841      	ldr	r1, [r0, #4]
 8003596:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <cleanup_stdio+0x34>)
 8003598:	4299      	cmp	r1, r3
 800359a:	b510      	push	{r4, lr}
 800359c:	4604      	mov	r4, r0
 800359e:	d001      	beq.n	80035a4 <cleanup_stdio+0x10>
 80035a0:	f000 fd96 	bl	80040d0 <_fflush_r>
 80035a4:	68a1      	ldr	r1, [r4, #8]
 80035a6:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <cleanup_stdio+0x38>)
 80035a8:	4299      	cmp	r1, r3
 80035aa:	d002      	beq.n	80035b2 <cleanup_stdio+0x1e>
 80035ac:	4620      	mov	r0, r4
 80035ae:	f000 fd8f 	bl	80040d0 <_fflush_r>
 80035b2:	68e1      	ldr	r1, [r4, #12]
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <cleanup_stdio+0x3c>)
 80035b6:	4299      	cmp	r1, r3
 80035b8:	d004      	beq.n	80035c4 <cleanup_stdio+0x30>
 80035ba:	4620      	mov	r0, r4
 80035bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c0:	f000 bd86 	b.w	80040d0 <_fflush_r>
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	bf00      	nop
 80035c8:	200001a0 	.word	0x200001a0
 80035cc:	20000208 	.word	0x20000208
 80035d0:	20000270 	.word	0x20000270

080035d4 <global_stdio_init.part.0>:
 80035d4:	b510      	push	{r4, lr}
 80035d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <global_stdio_init.part.0+0x30>)
 80035d8:	4c0b      	ldr	r4, [pc, #44]	@ (8003608 <global_stdio_init.part.0+0x34>)
 80035da:	4a0c      	ldr	r2, [pc, #48]	@ (800360c <global_stdio_init.part.0+0x38>)
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	4620      	mov	r0, r4
 80035e0:	2200      	movs	r2, #0
 80035e2:	2104      	movs	r1, #4
 80035e4:	f7ff ff94 	bl	8003510 <std>
 80035e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035ec:	2201      	movs	r2, #1
 80035ee:	2109      	movs	r1, #9
 80035f0:	f7ff ff8e 	bl	8003510 <std>
 80035f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80035f8:	2202      	movs	r2, #2
 80035fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035fe:	2112      	movs	r1, #18
 8003600:	f7ff bf86 	b.w	8003510 <std>
 8003604:	200002d8 	.word	0x200002d8
 8003608:	200001a0 	.word	0x200001a0
 800360c:	0800357d 	.word	0x0800357d

08003610 <__sfp_lock_acquire>:
 8003610:	4801      	ldr	r0, [pc, #4]	@ (8003618 <__sfp_lock_acquire+0x8>)
 8003612:	f000 b90e 	b.w	8003832 <__retarget_lock_acquire_recursive>
 8003616:	bf00      	nop
 8003618:	200002e1 	.word	0x200002e1

0800361c <__sfp_lock_release>:
 800361c:	4801      	ldr	r0, [pc, #4]	@ (8003624 <__sfp_lock_release+0x8>)
 800361e:	f000 b909 	b.w	8003834 <__retarget_lock_release_recursive>
 8003622:	bf00      	nop
 8003624:	200002e1 	.word	0x200002e1

08003628 <__sinit>:
 8003628:	b510      	push	{r4, lr}
 800362a:	4604      	mov	r4, r0
 800362c:	f7ff fff0 	bl	8003610 <__sfp_lock_acquire>
 8003630:	6a23      	ldr	r3, [r4, #32]
 8003632:	b11b      	cbz	r3, 800363c <__sinit+0x14>
 8003634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003638:	f7ff bff0 	b.w	800361c <__sfp_lock_release>
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <__sinit+0x28>)
 800363e:	6223      	str	r3, [r4, #32]
 8003640:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <__sinit+0x2c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f5      	bne.n	8003634 <__sinit+0xc>
 8003648:	f7ff ffc4 	bl	80035d4 <global_stdio_init.part.0>
 800364c:	e7f2      	b.n	8003634 <__sinit+0xc>
 800364e:	bf00      	nop
 8003650:	08003595 	.word	0x08003595
 8003654:	200002d8 	.word	0x200002d8

08003658 <_fwalk_sglue>:
 8003658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800365c:	4607      	mov	r7, r0
 800365e:	4688      	mov	r8, r1
 8003660:	4614      	mov	r4, r2
 8003662:	2600      	movs	r6, #0
 8003664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003668:	f1b9 0901 	subs.w	r9, r9, #1
 800366c:	d505      	bpl.n	800367a <_fwalk_sglue+0x22>
 800366e:	6824      	ldr	r4, [r4, #0]
 8003670:	2c00      	cmp	r4, #0
 8003672:	d1f7      	bne.n	8003664 <_fwalk_sglue+0xc>
 8003674:	4630      	mov	r0, r6
 8003676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800367a:	89ab      	ldrh	r3, [r5, #12]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d907      	bls.n	8003690 <_fwalk_sglue+0x38>
 8003680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003684:	3301      	adds	r3, #1
 8003686:	d003      	beq.n	8003690 <_fwalk_sglue+0x38>
 8003688:	4629      	mov	r1, r5
 800368a:	4638      	mov	r0, r7
 800368c:	47c0      	blx	r8
 800368e:	4306      	orrs	r6, r0
 8003690:	3568      	adds	r5, #104	@ 0x68
 8003692:	e7e9      	b.n	8003668 <_fwalk_sglue+0x10>

08003694 <iprintf>:
 8003694:	b40f      	push	{r0, r1, r2, r3}
 8003696:	b507      	push	{r0, r1, r2, lr}
 8003698:	4906      	ldr	r1, [pc, #24]	@ (80036b4 <iprintf+0x20>)
 800369a:	ab04      	add	r3, sp, #16
 800369c:	6808      	ldr	r0, [r1, #0]
 800369e:	f853 2b04 	ldr.w	r2, [r3], #4
 80036a2:	6881      	ldr	r1, [r0, #8]
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	f000 f9e9 	bl	8003a7c <_vfiprintf_r>
 80036aa:	b003      	add	sp, #12
 80036ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80036b0:	b004      	add	sp, #16
 80036b2:	4770      	bx	lr
 80036b4:	20000018 	.word	0x20000018

080036b8 <__sread>:
 80036b8:	b510      	push	{r4, lr}
 80036ba:	460c      	mov	r4, r1
 80036bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c0:	f000 f868 	bl	8003794 <_read_r>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	bfab      	itete	ge
 80036c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036ca:	89a3      	ldrhlt	r3, [r4, #12]
 80036cc:	181b      	addge	r3, r3, r0
 80036ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036d2:	bfac      	ite	ge
 80036d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036d6:	81a3      	strhlt	r3, [r4, #12]
 80036d8:	bd10      	pop	{r4, pc}

080036da <__swrite>:
 80036da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036de:	461f      	mov	r7, r3
 80036e0:	898b      	ldrh	r3, [r1, #12]
 80036e2:	05db      	lsls	r3, r3, #23
 80036e4:	4605      	mov	r5, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	4616      	mov	r6, r2
 80036ea:	d505      	bpl.n	80036f8 <__swrite+0x1e>
 80036ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f0:	2302      	movs	r3, #2
 80036f2:	2200      	movs	r2, #0
 80036f4:	f000 f83c 	bl	8003770 <_lseek_r>
 80036f8:	89a3      	ldrh	r3, [r4, #12]
 80036fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003702:	81a3      	strh	r3, [r4, #12]
 8003704:	4632      	mov	r2, r6
 8003706:	463b      	mov	r3, r7
 8003708:	4628      	mov	r0, r5
 800370a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800370e:	f000 b853 	b.w	80037b8 <_write_r>

08003712 <__sseek>:
 8003712:	b510      	push	{r4, lr}
 8003714:	460c      	mov	r4, r1
 8003716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371a:	f000 f829 	bl	8003770 <_lseek_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	bf15      	itete	ne
 8003724:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003726:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800372a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800372e:	81a3      	strheq	r3, [r4, #12]
 8003730:	bf18      	it	ne
 8003732:	81a3      	strhne	r3, [r4, #12]
 8003734:	bd10      	pop	{r4, pc}

08003736 <__sclose>:
 8003736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373a:	f000 b809 	b.w	8003750 <_close_r>

0800373e <memset>:
 800373e:	4402      	add	r2, r0
 8003740:	4603      	mov	r3, r0
 8003742:	4293      	cmp	r3, r2
 8003744:	d100      	bne.n	8003748 <memset+0xa>
 8003746:	4770      	bx	lr
 8003748:	f803 1b01 	strb.w	r1, [r3], #1
 800374c:	e7f9      	b.n	8003742 <memset+0x4>
	...

08003750 <_close_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4d06      	ldr	r5, [pc, #24]	@ (800376c <_close_r+0x1c>)
 8003754:	2300      	movs	r3, #0
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	f7fc ffc5 	bl	80006ea <_close>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_close_r+0x1a>
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	b103      	cbz	r3, 800376a <_close_r+0x1a>
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	200002dc 	.word	0x200002dc

08003770 <_lseek_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4d07      	ldr	r5, [pc, #28]	@ (8003790 <_lseek_r+0x20>)
 8003774:	4604      	mov	r4, r0
 8003776:	4608      	mov	r0, r1
 8003778:	4611      	mov	r1, r2
 800377a:	2200      	movs	r2, #0
 800377c:	602a      	str	r2, [r5, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f7fc ffda 	bl	8000738 <_lseek>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_lseek_r+0x1e>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	b103      	cbz	r3, 800378e <_lseek_r+0x1e>
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	200002dc 	.word	0x200002dc

08003794 <_read_r>:
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	4d07      	ldr	r5, [pc, #28]	@ (80037b4 <_read_r+0x20>)
 8003798:	4604      	mov	r4, r0
 800379a:	4608      	mov	r0, r1
 800379c:	4611      	mov	r1, r2
 800379e:	2200      	movs	r2, #0
 80037a0:	602a      	str	r2, [r5, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	f7fc ff84 	bl	80006b0 <_read>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d102      	bne.n	80037b2 <_read_r+0x1e>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b103      	cbz	r3, 80037b2 <_read_r+0x1e>
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	200002dc 	.word	0x200002dc

080037b8 <_write_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d07      	ldr	r5, [pc, #28]	@ (80037d8 <_write_r+0x20>)
 80037bc:	4604      	mov	r4, r0
 80037be:	4608      	mov	r0, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	602a      	str	r2, [r5, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7fc fe32 	bl	8000430 <_write>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_write_r+0x1e>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_write_r+0x1e>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	200002dc 	.word	0x200002dc

080037dc <__errno>:
 80037dc:	4b01      	ldr	r3, [pc, #4]	@ (80037e4 <__errno+0x8>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000018 	.word	0x20000018

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003820 <__libc_init_array+0x38>)
 80037ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003824 <__libc_init_array+0x3c>)
 80037ee:	1b64      	subs	r4, r4, r5
 80037f0:	10a4      	asrs	r4, r4, #2
 80037f2:	2600      	movs	r6, #0
 80037f4:	42a6      	cmp	r6, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003828 <__libc_init_array+0x40>)
 80037fa:	4c0c      	ldr	r4, [pc, #48]	@ (800382c <__libc_init_array+0x44>)
 80037fc:	f000 fdb8 	bl	8004370 <_init>
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	2600      	movs	r6, #0
 8003806:	42a6      	cmp	r6, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003810:	4798      	blx	r3
 8003812:	3601      	adds	r6, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	f855 3b04 	ldr.w	r3, [r5], #4
 800381a:	4798      	blx	r3
 800381c:	3601      	adds	r6, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	0800440c 	.word	0x0800440c
 8003824:	0800440c 	.word	0x0800440c
 8003828:	0800440c 	.word	0x0800440c
 800382c:	08004410 	.word	0x08004410

08003830 <__retarget_lock_init_recursive>:
 8003830:	4770      	bx	lr

08003832 <__retarget_lock_acquire_recursive>:
 8003832:	4770      	bx	lr

08003834 <__retarget_lock_release_recursive>:
 8003834:	4770      	bx	lr
	...

08003838 <_free_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	4605      	mov	r5, r0
 800383c:	2900      	cmp	r1, #0
 800383e:	d041      	beq.n	80038c4 <_free_r+0x8c>
 8003840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003844:	1f0c      	subs	r4, r1, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	bfb8      	it	lt
 800384a:	18e4      	addlt	r4, r4, r3
 800384c:	f000 f8e0 	bl	8003a10 <__malloc_lock>
 8003850:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <_free_r+0x90>)
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	b933      	cbnz	r3, 8003864 <_free_r+0x2c>
 8003856:	6063      	str	r3, [r4, #4]
 8003858:	6014      	str	r4, [r2, #0]
 800385a:	4628      	mov	r0, r5
 800385c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003860:	f000 b8dc 	b.w	8003a1c <__malloc_unlock>
 8003864:	42a3      	cmp	r3, r4
 8003866:	d908      	bls.n	800387a <_free_r+0x42>
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	1821      	adds	r1, r4, r0
 800386c:	428b      	cmp	r3, r1
 800386e:	bf01      	itttt	eq
 8003870:	6819      	ldreq	r1, [r3, #0]
 8003872:	685b      	ldreq	r3, [r3, #4]
 8003874:	1809      	addeq	r1, r1, r0
 8003876:	6021      	streq	r1, [r4, #0]
 8003878:	e7ed      	b.n	8003856 <_free_r+0x1e>
 800387a:	461a      	mov	r2, r3
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b10b      	cbz	r3, 8003884 <_free_r+0x4c>
 8003880:	42a3      	cmp	r3, r4
 8003882:	d9fa      	bls.n	800387a <_free_r+0x42>
 8003884:	6811      	ldr	r1, [r2, #0]
 8003886:	1850      	adds	r0, r2, r1
 8003888:	42a0      	cmp	r0, r4
 800388a:	d10b      	bne.n	80038a4 <_free_r+0x6c>
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	4401      	add	r1, r0
 8003890:	1850      	adds	r0, r2, r1
 8003892:	4283      	cmp	r3, r0
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	d1e0      	bne.n	800385a <_free_r+0x22>
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	6053      	str	r3, [r2, #4]
 800389e:	4408      	add	r0, r1
 80038a0:	6010      	str	r0, [r2, #0]
 80038a2:	e7da      	b.n	800385a <_free_r+0x22>
 80038a4:	d902      	bls.n	80038ac <_free_r+0x74>
 80038a6:	230c      	movs	r3, #12
 80038a8:	602b      	str	r3, [r5, #0]
 80038aa:	e7d6      	b.n	800385a <_free_r+0x22>
 80038ac:	6820      	ldr	r0, [r4, #0]
 80038ae:	1821      	adds	r1, r4, r0
 80038b0:	428b      	cmp	r3, r1
 80038b2:	bf04      	itt	eq
 80038b4:	6819      	ldreq	r1, [r3, #0]
 80038b6:	685b      	ldreq	r3, [r3, #4]
 80038b8:	6063      	str	r3, [r4, #4]
 80038ba:	bf04      	itt	eq
 80038bc:	1809      	addeq	r1, r1, r0
 80038be:	6021      	streq	r1, [r4, #0]
 80038c0:	6054      	str	r4, [r2, #4]
 80038c2:	e7ca      	b.n	800385a <_free_r+0x22>
 80038c4:	bd38      	pop	{r3, r4, r5, pc}
 80038c6:	bf00      	nop
 80038c8:	200002e8 	.word	0x200002e8

080038cc <sbrk_aligned>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4e0f      	ldr	r6, [pc, #60]	@ (800390c <sbrk_aligned+0x40>)
 80038d0:	460c      	mov	r4, r1
 80038d2:	6831      	ldr	r1, [r6, #0]
 80038d4:	4605      	mov	r5, r0
 80038d6:	b911      	cbnz	r1, 80038de <sbrk_aligned+0x12>
 80038d8:	f000 fcb6 	bl	8004248 <_sbrk_r>
 80038dc:	6030      	str	r0, [r6, #0]
 80038de:	4621      	mov	r1, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 fcb1 	bl	8004248 <_sbrk_r>
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	d103      	bne.n	80038f2 <sbrk_aligned+0x26>
 80038ea:	f04f 34ff 	mov.w	r4, #4294967295
 80038ee:	4620      	mov	r0, r4
 80038f0:	bd70      	pop	{r4, r5, r6, pc}
 80038f2:	1cc4      	adds	r4, r0, #3
 80038f4:	f024 0403 	bic.w	r4, r4, #3
 80038f8:	42a0      	cmp	r0, r4
 80038fa:	d0f8      	beq.n	80038ee <sbrk_aligned+0x22>
 80038fc:	1a21      	subs	r1, r4, r0
 80038fe:	4628      	mov	r0, r5
 8003900:	f000 fca2 	bl	8004248 <_sbrk_r>
 8003904:	3001      	adds	r0, #1
 8003906:	d1f2      	bne.n	80038ee <sbrk_aligned+0x22>
 8003908:	e7ef      	b.n	80038ea <sbrk_aligned+0x1e>
 800390a:	bf00      	nop
 800390c:	200002e4 	.word	0x200002e4

08003910 <_malloc_r>:
 8003910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003914:	1ccd      	adds	r5, r1, #3
 8003916:	f025 0503 	bic.w	r5, r5, #3
 800391a:	3508      	adds	r5, #8
 800391c:	2d0c      	cmp	r5, #12
 800391e:	bf38      	it	cc
 8003920:	250c      	movcc	r5, #12
 8003922:	2d00      	cmp	r5, #0
 8003924:	4606      	mov	r6, r0
 8003926:	db01      	blt.n	800392c <_malloc_r+0x1c>
 8003928:	42a9      	cmp	r1, r5
 800392a:	d904      	bls.n	8003936 <_malloc_r+0x26>
 800392c:	230c      	movs	r3, #12
 800392e:	6033      	str	r3, [r6, #0]
 8003930:	2000      	movs	r0, #0
 8003932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a0c <_malloc_r+0xfc>
 800393a:	f000 f869 	bl	8003a10 <__malloc_lock>
 800393e:	f8d8 3000 	ldr.w	r3, [r8]
 8003942:	461c      	mov	r4, r3
 8003944:	bb44      	cbnz	r4, 8003998 <_malloc_r+0x88>
 8003946:	4629      	mov	r1, r5
 8003948:	4630      	mov	r0, r6
 800394a:	f7ff ffbf 	bl	80038cc <sbrk_aligned>
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	4604      	mov	r4, r0
 8003952:	d158      	bne.n	8003a06 <_malloc_r+0xf6>
 8003954:	f8d8 4000 	ldr.w	r4, [r8]
 8003958:	4627      	mov	r7, r4
 800395a:	2f00      	cmp	r7, #0
 800395c:	d143      	bne.n	80039e6 <_malloc_r+0xd6>
 800395e:	2c00      	cmp	r4, #0
 8003960:	d04b      	beq.n	80039fa <_malloc_r+0xea>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	4639      	mov	r1, r7
 8003966:	4630      	mov	r0, r6
 8003968:	eb04 0903 	add.w	r9, r4, r3
 800396c:	f000 fc6c 	bl	8004248 <_sbrk_r>
 8003970:	4581      	cmp	r9, r0
 8003972:	d142      	bne.n	80039fa <_malloc_r+0xea>
 8003974:	6821      	ldr	r1, [r4, #0]
 8003976:	1a6d      	subs	r5, r5, r1
 8003978:	4629      	mov	r1, r5
 800397a:	4630      	mov	r0, r6
 800397c:	f7ff ffa6 	bl	80038cc <sbrk_aligned>
 8003980:	3001      	adds	r0, #1
 8003982:	d03a      	beq.n	80039fa <_malloc_r+0xea>
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	442b      	add	r3, r5
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	f8d8 3000 	ldr.w	r3, [r8]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	bb62      	cbnz	r2, 80039ec <_malloc_r+0xdc>
 8003992:	f8c8 7000 	str.w	r7, [r8]
 8003996:	e00f      	b.n	80039b8 <_malloc_r+0xa8>
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	1b52      	subs	r2, r2, r5
 800399c:	d420      	bmi.n	80039e0 <_malloc_r+0xd0>
 800399e:	2a0b      	cmp	r2, #11
 80039a0:	d917      	bls.n	80039d2 <_malloc_r+0xc2>
 80039a2:	1961      	adds	r1, r4, r5
 80039a4:	42a3      	cmp	r3, r4
 80039a6:	6025      	str	r5, [r4, #0]
 80039a8:	bf18      	it	ne
 80039aa:	6059      	strne	r1, [r3, #4]
 80039ac:	6863      	ldr	r3, [r4, #4]
 80039ae:	bf08      	it	eq
 80039b0:	f8c8 1000 	streq.w	r1, [r8]
 80039b4:	5162      	str	r2, [r4, r5]
 80039b6:	604b      	str	r3, [r1, #4]
 80039b8:	4630      	mov	r0, r6
 80039ba:	f000 f82f 	bl	8003a1c <__malloc_unlock>
 80039be:	f104 000b 	add.w	r0, r4, #11
 80039c2:	1d23      	adds	r3, r4, #4
 80039c4:	f020 0007 	bic.w	r0, r0, #7
 80039c8:	1ac2      	subs	r2, r0, r3
 80039ca:	bf1c      	itt	ne
 80039cc:	1a1b      	subne	r3, r3, r0
 80039ce:	50a3      	strne	r3, [r4, r2]
 80039d0:	e7af      	b.n	8003932 <_malloc_r+0x22>
 80039d2:	6862      	ldr	r2, [r4, #4]
 80039d4:	42a3      	cmp	r3, r4
 80039d6:	bf0c      	ite	eq
 80039d8:	f8c8 2000 	streq.w	r2, [r8]
 80039dc:	605a      	strne	r2, [r3, #4]
 80039de:	e7eb      	b.n	80039b8 <_malloc_r+0xa8>
 80039e0:	4623      	mov	r3, r4
 80039e2:	6864      	ldr	r4, [r4, #4]
 80039e4:	e7ae      	b.n	8003944 <_malloc_r+0x34>
 80039e6:	463c      	mov	r4, r7
 80039e8:	687f      	ldr	r7, [r7, #4]
 80039ea:	e7b6      	b.n	800395a <_malloc_r+0x4a>
 80039ec:	461a      	mov	r2, r3
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	d1fb      	bne.n	80039ec <_malloc_r+0xdc>
 80039f4:	2300      	movs	r3, #0
 80039f6:	6053      	str	r3, [r2, #4]
 80039f8:	e7de      	b.n	80039b8 <_malloc_r+0xa8>
 80039fa:	230c      	movs	r3, #12
 80039fc:	6033      	str	r3, [r6, #0]
 80039fe:	4630      	mov	r0, r6
 8003a00:	f000 f80c 	bl	8003a1c <__malloc_unlock>
 8003a04:	e794      	b.n	8003930 <_malloc_r+0x20>
 8003a06:	6005      	str	r5, [r0, #0]
 8003a08:	e7d6      	b.n	80039b8 <_malloc_r+0xa8>
 8003a0a:	bf00      	nop
 8003a0c:	200002e8 	.word	0x200002e8

08003a10 <__malloc_lock>:
 8003a10:	4801      	ldr	r0, [pc, #4]	@ (8003a18 <__malloc_lock+0x8>)
 8003a12:	f7ff bf0e 	b.w	8003832 <__retarget_lock_acquire_recursive>
 8003a16:	bf00      	nop
 8003a18:	200002e0 	.word	0x200002e0

08003a1c <__malloc_unlock>:
 8003a1c:	4801      	ldr	r0, [pc, #4]	@ (8003a24 <__malloc_unlock+0x8>)
 8003a1e:	f7ff bf09 	b.w	8003834 <__retarget_lock_release_recursive>
 8003a22:	bf00      	nop
 8003a24:	200002e0 	.word	0x200002e0

08003a28 <__sfputc_r>:
 8003a28:	6893      	ldr	r3, [r2, #8]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	b410      	push	{r4}
 8003a30:	6093      	str	r3, [r2, #8]
 8003a32:	da08      	bge.n	8003a46 <__sfputc_r+0x1e>
 8003a34:	6994      	ldr	r4, [r2, #24]
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	db01      	blt.n	8003a3e <__sfputc_r+0x16>
 8003a3a:	290a      	cmp	r1, #10
 8003a3c:	d103      	bne.n	8003a46 <__sfputc_r+0x1e>
 8003a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a42:	f000 bb6d 	b.w	8004120 <__swbuf_r>
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	1c58      	adds	r0, r3, #1
 8003a4a:	6010      	str	r0, [r2, #0]
 8003a4c:	7019      	strb	r1, [r3, #0]
 8003a4e:	4608      	mov	r0, r1
 8003a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <__sfputs_r>:
 8003a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a58:	4606      	mov	r6, r0
 8003a5a:	460f      	mov	r7, r1
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	18d5      	adds	r5, r2, r3
 8003a60:	42ac      	cmp	r4, r5
 8003a62:	d101      	bne.n	8003a68 <__sfputs_r+0x12>
 8003a64:	2000      	movs	r0, #0
 8003a66:	e007      	b.n	8003a78 <__sfputs_r+0x22>
 8003a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6c:	463a      	mov	r2, r7
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f7ff ffda 	bl	8003a28 <__sfputc_r>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d1f3      	bne.n	8003a60 <__sfputs_r+0xa>
 8003a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a7c <_vfiprintf_r>:
 8003a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a80:	460d      	mov	r5, r1
 8003a82:	b09d      	sub	sp, #116	@ 0x74
 8003a84:	4614      	mov	r4, r2
 8003a86:	4698      	mov	r8, r3
 8003a88:	4606      	mov	r6, r0
 8003a8a:	b118      	cbz	r0, 8003a94 <_vfiprintf_r+0x18>
 8003a8c:	6a03      	ldr	r3, [r0, #32]
 8003a8e:	b90b      	cbnz	r3, 8003a94 <_vfiprintf_r+0x18>
 8003a90:	f7ff fdca 	bl	8003628 <__sinit>
 8003a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a96:	07d9      	lsls	r1, r3, #31
 8003a98:	d405      	bmi.n	8003aa6 <_vfiprintf_r+0x2a>
 8003a9a:	89ab      	ldrh	r3, [r5, #12]
 8003a9c:	059a      	lsls	r2, r3, #22
 8003a9e:	d402      	bmi.n	8003aa6 <_vfiprintf_r+0x2a>
 8003aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003aa2:	f7ff fec6 	bl	8003832 <__retarget_lock_acquire_recursive>
 8003aa6:	89ab      	ldrh	r3, [r5, #12]
 8003aa8:	071b      	lsls	r3, r3, #28
 8003aaa:	d501      	bpl.n	8003ab0 <_vfiprintf_r+0x34>
 8003aac:	692b      	ldr	r3, [r5, #16]
 8003aae:	b99b      	cbnz	r3, 8003ad8 <_vfiprintf_r+0x5c>
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f000 fb72 	bl	800419c <__swsetup_r>
 8003ab8:	b170      	cbz	r0, 8003ad8 <_vfiprintf_r+0x5c>
 8003aba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003abc:	07dc      	lsls	r4, r3, #31
 8003abe:	d504      	bpl.n	8003aca <_vfiprintf_r+0x4e>
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	b01d      	add	sp, #116	@ 0x74
 8003ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aca:	89ab      	ldrh	r3, [r5, #12]
 8003acc:	0598      	lsls	r0, r3, #22
 8003ace:	d4f7      	bmi.n	8003ac0 <_vfiprintf_r+0x44>
 8003ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ad2:	f7ff feaf 	bl	8003834 <__retarget_lock_release_recursive>
 8003ad6:	e7f3      	b.n	8003ac0 <_vfiprintf_r+0x44>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9309      	str	r3, [sp, #36]	@ 0x24
 8003adc:	2320      	movs	r3, #32
 8003ade:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ae6:	2330      	movs	r3, #48	@ 0x30
 8003ae8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003c98 <_vfiprintf_r+0x21c>
 8003aec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003af0:	f04f 0901 	mov.w	r9, #1
 8003af4:	4623      	mov	r3, r4
 8003af6:	469a      	mov	sl, r3
 8003af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003afc:	b10a      	cbz	r2, 8003b02 <_vfiprintf_r+0x86>
 8003afe:	2a25      	cmp	r2, #37	@ 0x25
 8003b00:	d1f9      	bne.n	8003af6 <_vfiprintf_r+0x7a>
 8003b02:	ebba 0b04 	subs.w	fp, sl, r4
 8003b06:	d00b      	beq.n	8003b20 <_vfiprintf_r+0xa4>
 8003b08:	465b      	mov	r3, fp
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f7ff ffa1 	bl	8003a56 <__sfputs_r>
 8003b14:	3001      	adds	r0, #1
 8003b16:	f000 80a7 	beq.w	8003c68 <_vfiprintf_r+0x1ec>
 8003b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b1c:	445a      	add	r2, fp
 8003b1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b20:	f89a 3000 	ldrb.w	r3, [sl]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 809f 	beq.w	8003c68 <_vfiprintf_r+0x1ec>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b34:	f10a 0a01 	add.w	sl, sl, #1
 8003b38:	9304      	str	r3, [sp, #16]
 8003b3a:	9307      	str	r3, [sp, #28]
 8003b3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b40:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b42:	4654      	mov	r4, sl
 8003b44:	2205      	movs	r2, #5
 8003b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4a:	4853      	ldr	r0, [pc, #332]	@ (8003c98 <_vfiprintf_r+0x21c>)
 8003b4c:	f7fc fb40 	bl	80001d0 <memchr>
 8003b50:	9a04      	ldr	r2, [sp, #16]
 8003b52:	b9d8      	cbnz	r0, 8003b8c <_vfiprintf_r+0x110>
 8003b54:	06d1      	lsls	r1, r2, #27
 8003b56:	bf44      	itt	mi
 8003b58:	2320      	movmi	r3, #32
 8003b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b5e:	0713      	lsls	r3, r2, #28
 8003b60:	bf44      	itt	mi
 8003b62:	232b      	movmi	r3, #43	@ 0x2b
 8003b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b68:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b6e:	d015      	beq.n	8003b9c <_vfiprintf_r+0x120>
 8003b70:	9a07      	ldr	r2, [sp, #28]
 8003b72:	4654      	mov	r4, sl
 8003b74:	2000      	movs	r0, #0
 8003b76:	f04f 0c0a 	mov.w	ip, #10
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b80:	3b30      	subs	r3, #48	@ 0x30
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	d94b      	bls.n	8003c1e <_vfiprintf_r+0x1a2>
 8003b86:	b1b0      	cbz	r0, 8003bb6 <_vfiprintf_r+0x13a>
 8003b88:	9207      	str	r2, [sp, #28]
 8003b8a:	e014      	b.n	8003bb6 <_vfiprintf_r+0x13a>
 8003b8c:	eba0 0308 	sub.w	r3, r0, r8
 8003b90:	fa09 f303 	lsl.w	r3, r9, r3
 8003b94:	4313      	orrs	r3, r2
 8003b96:	9304      	str	r3, [sp, #16]
 8003b98:	46a2      	mov	sl, r4
 8003b9a:	e7d2      	b.n	8003b42 <_vfiprintf_r+0xc6>
 8003b9c:	9b03      	ldr	r3, [sp, #12]
 8003b9e:	1d19      	adds	r1, r3, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	9103      	str	r1, [sp, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bfbb      	ittet	lt
 8003ba8:	425b      	neglt	r3, r3
 8003baa:	f042 0202 	orrlt.w	r2, r2, #2
 8003bae:	9307      	strge	r3, [sp, #28]
 8003bb0:	9307      	strlt	r3, [sp, #28]
 8003bb2:	bfb8      	it	lt
 8003bb4:	9204      	strlt	r2, [sp, #16]
 8003bb6:	7823      	ldrb	r3, [r4, #0]
 8003bb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bba:	d10a      	bne.n	8003bd2 <_vfiprintf_r+0x156>
 8003bbc:	7863      	ldrb	r3, [r4, #1]
 8003bbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bc0:	d132      	bne.n	8003c28 <_vfiprintf_r+0x1ac>
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	1d1a      	adds	r2, r3, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	9203      	str	r2, [sp, #12]
 8003bca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bce:	3402      	adds	r4, #2
 8003bd0:	9305      	str	r3, [sp, #20]
 8003bd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003ca8 <_vfiprintf_r+0x22c>
 8003bd6:	7821      	ldrb	r1, [r4, #0]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	4650      	mov	r0, sl
 8003bdc:	f7fc faf8 	bl	80001d0 <memchr>
 8003be0:	b138      	cbz	r0, 8003bf2 <_vfiprintf_r+0x176>
 8003be2:	9b04      	ldr	r3, [sp, #16]
 8003be4:	eba0 000a 	sub.w	r0, r0, sl
 8003be8:	2240      	movs	r2, #64	@ 0x40
 8003bea:	4082      	lsls	r2, r0
 8003bec:	4313      	orrs	r3, r2
 8003bee:	3401      	adds	r4, #1
 8003bf0:	9304      	str	r3, [sp, #16]
 8003bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf6:	4829      	ldr	r0, [pc, #164]	@ (8003c9c <_vfiprintf_r+0x220>)
 8003bf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bfc:	2206      	movs	r2, #6
 8003bfe:	f7fc fae7 	bl	80001d0 <memchr>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d03f      	beq.n	8003c86 <_vfiprintf_r+0x20a>
 8003c06:	4b26      	ldr	r3, [pc, #152]	@ (8003ca0 <_vfiprintf_r+0x224>)
 8003c08:	bb1b      	cbnz	r3, 8003c52 <_vfiprintf_r+0x1d6>
 8003c0a:	9b03      	ldr	r3, [sp, #12]
 8003c0c:	3307      	adds	r3, #7
 8003c0e:	f023 0307 	bic.w	r3, r3, #7
 8003c12:	3308      	adds	r3, #8
 8003c14:	9303      	str	r3, [sp, #12]
 8003c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c18:	443b      	add	r3, r7
 8003c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c1c:	e76a      	b.n	8003af4 <_vfiprintf_r+0x78>
 8003c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c22:	460c      	mov	r4, r1
 8003c24:	2001      	movs	r0, #1
 8003c26:	e7a8      	b.n	8003b7a <_vfiprintf_r+0xfe>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	3401      	adds	r4, #1
 8003c2c:	9305      	str	r3, [sp, #20]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f04f 0c0a 	mov.w	ip, #10
 8003c34:	4620      	mov	r0, r4
 8003c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c3a:	3a30      	subs	r2, #48	@ 0x30
 8003c3c:	2a09      	cmp	r2, #9
 8003c3e:	d903      	bls.n	8003c48 <_vfiprintf_r+0x1cc>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0c6      	beq.n	8003bd2 <_vfiprintf_r+0x156>
 8003c44:	9105      	str	r1, [sp, #20]
 8003c46:	e7c4      	b.n	8003bd2 <_vfiprintf_r+0x156>
 8003c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e7f0      	b.n	8003c34 <_vfiprintf_r+0x1b8>
 8003c52:	ab03      	add	r3, sp, #12
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	462a      	mov	r2, r5
 8003c58:	4b12      	ldr	r3, [pc, #72]	@ (8003ca4 <_vfiprintf_r+0x228>)
 8003c5a:	a904      	add	r1, sp, #16
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f3af 8000 	nop.w
 8003c62:	4607      	mov	r7, r0
 8003c64:	1c78      	adds	r0, r7, #1
 8003c66:	d1d6      	bne.n	8003c16 <_vfiprintf_r+0x19a>
 8003c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c6a:	07d9      	lsls	r1, r3, #31
 8003c6c:	d405      	bmi.n	8003c7a <_vfiprintf_r+0x1fe>
 8003c6e:	89ab      	ldrh	r3, [r5, #12]
 8003c70:	059a      	lsls	r2, r3, #22
 8003c72:	d402      	bmi.n	8003c7a <_vfiprintf_r+0x1fe>
 8003c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c76:	f7ff fddd 	bl	8003834 <__retarget_lock_release_recursive>
 8003c7a:	89ab      	ldrh	r3, [r5, #12]
 8003c7c:	065b      	lsls	r3, r3, #25
 8003c7e:	f53f af1f 	bmi.w	8003ac0 <_vfiprintf_r+0x44>
 8003c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c84:	e71e      	b.n	8003ac4 <_vfiprintf_r+0x48>
 8003c86:	ab03      	add	r3, sp, #12
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	462a      	mov	r2, r5
 8003c8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <_vfiprintf_r+0x228>)
 8003c8e:	a904      	add	r1, sp, #16
 8003c90:	4630      	mov	r0, r6
 8003c92:	f000 f879 	bl	8003d88 <_printf_i>
 8003c96:	e7e4      	b.n	8003c62 <_vfiprintf_r+0x1e6>
 8003c98:	080043d0 	.word	0x080043d0
 8003c9c:	080043da 	.word	0x080043da
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	08003a57 	.word	0x08003a57
 8003ca8:	080043d6 	.word	0x080043d6

08003cac <_printf_common>:
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	4698      	mov	r8, r3
 8003cb4:	688a      	ldr	r2, [r1, #8]
 8003cb6:	690b      	ldr	r3, [r1, #16]
 8003cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bfb8      	it	lt
 8003cc0:	4613      	movlt	r3, r2
 8003cc2:	6033      	str	r3, [r6, #0]
 8003cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cc8:	4607      	mov	r7, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_printf_common+0x26>
 8003cce:	3301      	adds	r3, #1
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	0699      	lsls	r1, r3, #26
 8003cd6:	bf42      	ittt	mi
 8003cd8:	6833      	ldrmi	r3, [r6, #0]
 8003cda:	3302      	addmi	r3, #2
 8003cdc:	6033      	strmi	r3, [r6, #0]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	f015 0506 	ands.w	r5, r5, #6
 8003ce4:	d106      	bne.n	8003cf4 <_printf_common+0x48>
 8003ce6:	f104 0a19 	add.w	sl, r4, #25
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	6832      	ldr	r2, [r6, #0]
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dc26      	bgt.n	8003d42 <_printf_common+0x96>
 8003cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	3b00      	subs	r3, #0
 8003cfc:	bf18      	it	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	0692      	lsls	r2, r2, #26
 8003d02:	d42b      	bmi.n	8003d5c <_printf_common+0xb0>
 8003d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d08:	4641      	mov	r1, r8
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	47c8      	blx	r9
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d01e      	beq.n	8003d50 <_printf_common+0xa4>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	6922      	ldr	r2, [r4, #16]
 8003d16:	f003 0306 	and.w	r3, r3, #6
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf02      	ittt	eq
 8003d1e:	68e5      	ldreq	r5, [r4, #12]
 8003d20:	6833      	ldreq	r3, [r6, #0]
 8003d22:	1aed      	subeq	r5, r5, r3
 8003d24:	68a3      	ldr	r3, [r4, #8]
 8003d26:	bf0c      	ite	eq
 8003d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d2c:	2500      	movne	r5, #0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bfc4      	itt	gt
 8003d32:	1a9b      	subgt	r3, r3, r2
 8003d34:	18ed      	addgt	r5, r5, r3
 8003d36:	2600      	movs	r6, #0
 8003d38:	341a      	adds	r4, #26
 8003d3a:	42b5      	cmp	r5, r6
 8003d3c:	d11a      	bne.n	8003d74 <_printf_common+0xc8>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e008      	b.n	8003d54 <_printf_common+0xa8>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4652      	mov	r2, sl
 8003d46:	4641      	mov	r1, r8
 8003d48:	4638      	mov	r0, r7
 8003d4a:	47c8      	blx	r9
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_printf_common+0xac>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	3501      	adds	r5, #1
 8003d5a:	e7c6      	b.n	8003cea <_printf_common+0x3e>
 8003d5c:	18e1      	adds	r1, r4, r3
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	2030      	movs	r0, #48	@ 0x30
 8003d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d66:	4422      	add	r2, r4
 8003d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d70:	3302      	adds	r3, #2
 8003d72:	e7c7      	b.n	8003d04 <_printf_common+0x58>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4622      	mov	r2, r4
 8003d78:	4641      	mov	r1, r8
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c8      	blx	r9
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0e6      	beq.n	8003d50 <_printf_common+0xa4>
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7d9      	b.n	8003d3a <_printf_common+0x8e>
	...

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d90:	2f78      	cmp	r7, #120	@ 0x78
 8003d92:	4691      	mov	r9, r2
 8003d94:	4680      	mov	r8, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	469a      	mov	sl, r3
 8003d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	@ 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d2 	beq.w	8003f4e <_printf_i+0x1c6>
 8003daa:	2f58      	cmp	r7, #88	@ 0x58
 8003dac:	f000 80b9 	beq.w	8003f22 <_printf_i+0x19a>
 8003db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f35 	.word	0x08003f35
 8003df8:	08003e5f 	.word	0x08003e5f
 8003dfc:	08003eef 	.word	0x08003eef
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f57 	.word	0x08003f57
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e5f 	.word	0x08003e5f
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003ef7 	.word	0x08003ef7
 8003e20:	6833      	ldr	r3, [r6, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6032      	str	r2, [r6, #0]
 8003e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09d      	b.n	8003f70 <_printf_i+0x1e8>
 8003e34:	6833      	ldr	r3, [r6, #0]
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	6031      	str	r1, [r6, #0]
 8003e3c:	0606      	lsls	r6, r0, #24
 8003e3e:	d501      	bpl.n	8003e44 <_printf_i+0xbc>
 8003e40:	681d      	ldr	r5, [r3, #0]
 8003e42:	e003      	b.n	8003e4c <_printf_i+0xc4>
 8003e44:	0645      	lsls	r5, r0, #25
 8003e46:	d5fb      	bpl.n	8003e40 <_printf_i+0xb8>
 8003e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	da03      	bge.n	8003e58 <_printf_i+0xd0>
 8003e50:	232d      	movs	r3, #45	@ 0x2d
 8003e52:	426d      	negs	r5, r5
 8003e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e58:	4859      	ldr	r0, [pc, #356]	@ (8003fc0 <_printf_i+0x238>)
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	e011      	b.n	8003e82 <_printf_i+0xfa>
 8003e5e:	6821      	ldr	r1, [r4, #0]
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	0608      	lsls	r0, r1, #24
 8003e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e68:	d402      	bmi.n	8003e70 <_printf_i+0xe8>
 8003e6a:	0649      	lsls	r1, r1, #25
 8003e6c:	bf48      	it	mi
 8003e6e:	b2ad      	uxthmi	r5, r5
 8003e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e72:	4853      	ldr	r0, [pc, #332]	@ (8003fc0 <_printf_i+0x238>)
 8003e74:	6033      	str	r3, [r6, #0]
 8003e76:	bf14      	ite	ne
 8003e78:	230a      	movne	r3, #10
 8003e7a:	2308      	moveq	r3, #8
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e82:	6866      	ldr	r6, [r4, #4]
 8003e84:	60a6      	str	r6, [r4, #8]
 8003e86:	2e00      	cmp	r6, #0
 8003e88:	bfa2      	ittt	ge
 8003e8a:	6821      	ldrge	r1, [r4, #0]
 8003e8c:	f021 0104 	bicge.w	r1, r1, #4
 8003e90:	6021      	strge	r1, [r4, #0]
 8003e92:	b90d      	cbnz	r5, 8003e98 <_printf_i+0x110>
 8003e94:	2e00      	cmp	r6, #0
 8003e96:	d04b      	beq.n	8003f30 <_printf_i+0x1a8>
 8003e98:	4616      	mov	r6, r2
 8003e9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e9e:	fb03 5711 	mls	r7, r3, r1, r5
 8003ea2:	5dc7      	ldrb	r7, [r0, r7]
 8003ea4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ea8:	462f      	mov	r7, r5
 8003eaa:	42bb      	cmp	r3, r7
 8003eac:	460d      	mov	r5, r1
 8003eae:	d9f4      	bls.n	8003e9a <_printf_i+0x112>
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d10b      	bne.n	8003ecc <_printf_i+0x144>
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	07df      	lsls	r7, r3, #31
 8003eb8:	d508      	bpl.n	8003ecc <_printf_i+0x144>
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	6861      	ldr	r1, [r4, #4]
 8003ebe:	4299      	cmp	r1, r3
 8003ec0:	bfde      	ittt	le
 8003ec2:	2330      	movle	r3, #48	@ 0x30
 8003ec4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ec8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ecc:	1b92      	subs	r2, r2, r6
 8003ece:	6122      	str	r2, [r4, #16]
 8003ed0:	f8cd a000 	str.w	sl, [sp]
 8003ed4:	464b      	mov	r3, r9
 8003ed6:	aa03      	add	r2, sp, #12
 8003ed8:	4621      	mov	r1, r4
 8003eda:	4640      	mov	r0, r8
 8003edc:	f7ff fee6 	bl	8003cac <_printf_common>
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d14a      	bne.n	8003f7a <_printf_i+0x1f2>
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	b004      	add	sp, #16
 8003eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	f043 0320 	orr.w	r3, r3, #32
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	4833      	ldr	r0, [pc, #204]	@ (8003fc4 <_printf_i+0x23c>)
 8003ef8:	2778      	movs	r7, #120	@ 0x78
 8003efa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	6831      	ldr	r1, [r6, #0]
 8003f02:	061f      	lsls	r7, r3, #24
 8003f04:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f08:	d402      	bmi.n	8003f10 <_printf_i+0x188>
 8003f0a:	065f      	lsls	r7, r3, #25
 8003f0c:	bf48      	it	mi
 8003f0e:	b2ad      	uxthmi	r5, r5
 8003f10:	6031      	str	r1, [r6, #0]
 8003f12:	07d9      	lsls	r1, r3, #31
 8003f14:	bf44      	itt	mi
 8003f16:	f043 0320 	orrmi.w	r3, r3, #32
 8003f1a:	6023      	strmi	r3, [r4, #0]
 8003f1c:	b11d      	cbz	r5, 8003f26 <_printf_i+0x19e>
 8003f1e:	2310      	movs	r3, #16
 8003f20:	e7ac      	b.n	8003e7c <_printf_i+0xf4>
 8003f22:	4827      	ldr	r0, [pc, #156]	@ (8003fc0 <_printf_i+0x238>)
 8003f24:	e7e9      	b.n	8003efa <_printf_i+0x172>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	f023 0320 	bic.w	r3, r3, #32
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	e7f6      	b.n	8003f1e <_printf_i+0x196>
 8003f30:	4616      	mov	r6, r2
 8003f32:	e7bd      	b.n	8003eb0 <_printf_i+0x128>
 8003f34:	6833      	ldr	r3, [r6, #0]
 8003f36:	6825      	ldr	r5, [r4, #0]
 8003f38:	6961      	ldr	r1, [r4, #20]
 8003f3a:	1d18      	adds	r0, r3, #4
 8003f3c:	6030      	str	r0, [r6, #0]
 8003f3e:	062e      	lsls	r6, r5, #24
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	d501      	bpl.n	8003f48 <_printf_i+0x1c0>
 8003f44:	6019      	str	r1, [r3, #0]
 8003f46:	e002      	b.n	8003f4e <_printf_i+0x1c6>
 8003f48:	0668      	lsls	r0, r5, #25
 8003f4a:	d5fb      	bpl.n	8003f44 <_printf_i+0x1bc>
 8003f4c:	8019      	strh	r1, [r3, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6123      	str	r3, [r4, #16]
 8003f52:	4616      	mov	r6, r2
 8003f54:	e7bc      	b.n	8003ed0 <_printf_i+0x148>
 8003f56:	6833      	ldr	r3, [r6, #0]
 8003f58:	1d1a      	adds	r2, r3, #4
 8003f5a:	6032      	str	r2, [r6, #0]
 8003f5c:	681e      	ldr	r6, [r3, #0]
 8003f5e:	6862      	ldr	r2, [r4, #4]
 8003f60:	2100      	movs	r1, #0
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7fc f934 	bl	80001d0 <memchr>
 8003f68:	b108      	cbz	r0, 8003f6e <_printf_i+0x1e6>
 8003f6a:	1b80      	subs	r0, r0, r6
 8003f6c:	6060      	str	r0, [r4, #4]
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	6123      	str	r3, [r4, #16]
 8003f72:	2300      	movs	r3, #0
 8003f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f78:	e7aa      	b.n	8003ed0 <_printf_i+0x148>
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4640      	mov	r0, r8
 8003f82:	47d0      	blx	sl
 8003f84:	3001      	adds	r0, #1
 8003f86:	d0ad      	beq.n	8003ee4 <_printf_i+0x15c>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	079b      	lsls	r3, r3, #30
 8003f8c:	d413      	bmi.n	8003fb6 <_printf_i+0x22e>
 8003f8e:	68e0      	ldr	r0, [r4, #12]
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	4298      	cmp	r0, r3
 8003f94:	bfb8      	it	lt
 8003f96:	4618      	movlt	r0, r3
 8003f98:	e7a6      	b.n	8003ee8 <_printf_i+0x160>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4632      	mov	r2, r6
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	47d0      	blx	sl
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d09d      	beq.n	8003ee4 <_printf_i+0x15c>
 8003fa8:	3501      	adds	r5, #1
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	9903      	ldr	r1, [sp, #12]
 8003fae:	1a5b      	subs	r3, r3, r1
 8003fb0:	42ab      	cmp	r3, r5
 8003fb2:	dcf2      	bgt.n	8003f9a <_printf_i+0x212>
 8003fb4:	e7eb      	b.n	8003f8e <_printf_i+0x206>
 8003fb6:	2500      	movs	r5, #0
 8003fb8:	f104 0619 	add.w	r6, r4, #25
 8003fbc:	e7f5      	b.n	8003faa <_printf_i+0x222>
 8003fbe:	bf00      	nop
 8003fc0:	080043e1 	.word	0x080043e1
 8003fc4:	080043f2 	.word	0x080043f2

08003fc8 <__sflush_r>:
 8003fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd0:	0716      	lsls	r6, r2, #28
 8003fd2:	4605      	mov	r5, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	d454      	bmi.n	8004082 <__sflush_r+0xba>
 8003fd8:	684b      	ldr	r3, [r1, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	dc02      	bgt.n	8003fe4 <__sflush_r+0x1c>
 8003fde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dd48      	ble.n	8004076 <__sflush_r+0xae>
 8003fe4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fe6:	2e00      	cmp	r6, #0
 8003fe8:	d045      	beq.n	8004076 <__sflush_r+0xae>
 8003fea:	2300      	movs	r3, #0
 8003fec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ff0:	682f      	ldr	r7, [r5, #0]
 8003ff2:	6a21      	ldr	r1, [r4, #32]
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	d030      	beq.n	800405a <__sflush_r+0x92>
 8003ff8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	0759      	lsls	r1, r3, #29
 8003ffe:	d505      	bpl.n	800400c <__sflush_r+0x44>
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004006:	b10b      	cbz	r3, 800400c <__sflush_r+0x44>
 8004008:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	2300      	movs	r3, #0
 800400e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004010:	6a21      	ldr	r1, [r4, #32]
 8004012:	4628      	mov	r0, r5
 8004014:	47b0      	blx	r6
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	d106      	bne.n	800402a <__sflush_r+0x62>
 800401c:	6829      	ldr	r1, [r5, #0]
 800401e:	291d      	cmp	r1, #29
 8004020:	d82b      	bhi.n	800407a <__sflush_r+0xb2>
 8004022:	4a2a      	ldr	r2, [pc, #168]	@ (80040cc <__sflush_r+0x104>)
 8004024:	410a      	asrs	r2, r1
 8004026:	07d6      	lsls	r6, r2, #31
 8004028:	d427      	bmi.n	800407a <__sflush_r+0xb2>
 800402a:	2200      	movs	r2, #0
 800402c:	6062      	str	r2, [r4, #4]
 800402e:	04d9      	lsls	r1, r3, #19
 8004030:	6922      	ldr	r2, [r4, #16]
 8004032:	6022      	str	r2, [r4, #0]
 8004034:	d504      	bpl.n	8004040 <__sflush_r+0x78>
 8004036:	1c42      	adds	r2, r0, #1
 8004038:	d101      	bne.n	800403e <__sflush_r+0x76>
 800403a:	682b      	ldr	r3, [r5, #0]
 800403c:	b903      	cbnz	r3, 8004040 <__sflush_r+0x78>
 800403e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004042:	602f      	str	r7, [r5, #0]
 8004044:	b1b9      	cbz	r1, 8004076 <__sflush_r+0xae>
 8004046:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800404a:	4299      	cmp	r1, r3
 800404c:	d002      	beq.n	8004054 <__sflush_r+0x8c>
 800404e:	4628      	mov	r0, r5
 8004050:	f7ff fbf2 	bl	8003838 <_free_r>
 8004054:	2300      	movs	r3, #0
 8004056:	6363      	str	r3, [r4, #52]	@ 0x34
 8004058:	e00d      	b.n	8004076 <__sflush_r+0xae>
 800405a:	2301      	movs	r3, #1
 800405c:	4628      	mov	r0, r5
 800405e:	47b0      	blx	r6
 8004060:	4602      	mov	r2, r0
 8004062:	1c50      	adds	r0, r2, #1
 8004064:	d1c9      	bne.n	8003ffa <__sflush_r+0x32>
 8004066:	682b      	ldr	r3, [r5, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0c6      	beq.n	8003ffa <__sflush_r+0x32>
 800406c:	2b1d      	cmp	r3, #29
 800406e:	d001      	beq.n	8004074 <__sflush_r+0xac>
 8004070:	2b16      	cmp	r3, #22
 8004072:	d11e      	bne.n	80040b2 <__sflush_r+0xea>
 8004074:	602f      	str	r7, [r5, #0]
 8004076:	2000      	movs	r0, #0
 8004078:	e022      	b.n	80040c0 <__sflush_r+0xf8>
 800407a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800407e:	b21b      	sxth	r3, r3
 8004080:	e01b      	b.n	80040ba <__sflush_r+0xf2>
 8004082:	690f      	ldr	r7, [r1, #16]
 8004084:	2f00      	cmp	r7, #0
 8004086:	d0f6      	beq.n	8004076 <__sflush_r+0xae>
 8004088:	0793      	lsls	r3, r2, #30
 800408a:	680e      	ldr	r6, [r1, #0]
 800408c:	bf08      	it	eq
 800408e:	694b      	ldreq	r3, [r1, #20]
 8004090:	600f      	str	r7, [r1, #0]
 8004092:	bf18      	it	ne
 8004094:	2300      	movne	r3, #0
 8004096:	eba6 0807 	sub.w	r8, r6, r7
 800409a:	608b      	str	r3, [r1, #8]
 800409c:	f1b8 0f00 	cmp.w	r8, #0
 80040a0:	dde9      	ble.n	8004076 <__sflush_r+0xae>
 80040a2:	6a21      	ldr	r1, [r4, #32]
 80040a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80040a6:	4643      	mov	r3, r8
 80040a8:	463a      	mov	r2, r7
 80040aa:	4628      	mov	r0, r5
 80040ac:	47b0      	blx	r6
 80040ae:	2800      	cmp	r0, #0
 80040b0:	dc08      	bgt.n	80040c4 <__sflush_r+0xfc>
 80040b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ba:	81a3      	strh	r3, [r4, #12]
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
 80040c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c4:	4407      	add	r7, r0
 80040c6:	eba8 0800 	sub.w	r8, r8, r0
 80040ca:	e7e7      	b.n	800409c <__sflush_r+0xd4>
 80040cc:	dfbffffe 	.word	0xdfbffffe

080040d0 <_fflush_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	690b      	ldr	r3, [r1, #16]
 80040d4:	4605      	mov	r5, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	b913      	cbnz	r3, 80040e0 <_fflush_r+0x10>
 80040da:	2500      	movs	r5, #0
 80040dc:	4628      	mov	r0, r5
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	b118      	cbz	r0, 80040ea <_fflush_r+0x1a>
 80040e2:	6a03      	ldr	r3, [r0, #32]
 80040e4:	b90b      	cbnz	r3, 80040ea <_fflush_r+0x1a>
 80040e6:	f7ff fa9f 	bl	8003628 <__sinit>
 80040ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f3      	beq.n	80040da <_fflush_r+0xa>
 80040f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040f4:	07d0      	lsls	r0, r2, #31
 80040f6:	d404      	bmi.n	8004102 <_fflush_r+0x32>
 80040f8:	0599      	lsls	r1, r3, #22
 80040fa:	d402      	bmi.n	8004102 <_fflush_r+0x32>
 80040fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040fe:	f7ff fb98 	bl	8003832 <__retarget_lock_acquire_recursive>
 8004102:	4628      	mov	r0, r5
 8004104:	4621      	mov	r1, r4
 8004106:	f7ff ff5f 	bl	8003fc8 <__sflush_r>
 800410a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800410c:	07da      	lsls	r2, r3, #31
 800410e:	4605      	mov	r5, r0
 8004110:	d4e4      	bmi.n	80040dc <_fflush_r+0xc>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	059b      	lsls	r3, r3, #22
 8004116:	d4e1      	bmi.n	80040dc <_fflush_r+0xc>
 8004118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800411a:	f7ff fb8b 	bl	8003834 <__retarget_lock_release_recursive>
 800411e:	e7dd      	b.n	80040dc <_fflush_r+0xc>

08004120 <__swbuf_r>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	460e      	mov	r6, r1
 8004124:	4614      	mov	r4, r2
 8004126:	4605      	mov	r5, r0
 8004128:	b118      	cbz	r0, 8004132 <__swbuf_r+0x12>
 800412a:	6a03      	ldr	r3, [r0, #32]
 800412c:	b90b      	cbnz	r3, 8004132 <__swbuf_r+0x12>
 800412e:	f7ff fa7b 	bl	8003628 <__sinit>
 8004132:	69a3      	ldr	r3, [r4, #24]
 8004134:	60a3      	str	r3, [r4, #8]
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	071a      	lsls	r2, r3, #28
 800413a:	d501      	bpl.n	8004140 <__swbuf_r+0x20>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	b943      	cbnz	r3, 8004152 <__swbuf_r+0x32>
 8004140:	4621      	mov	r1, r4
 8004142:	4628      	mov	r0, r5
 8004144:	f000 f82a 	bl	800419c <__swsetup_r>
 8004148:	b118      	cbz	r0, 8004152 <__swbuf_r+0x32>
 800414a:	f04f 37ff 	mov.w	r7, #4294967295
 800414e:	4638      	mov	r0, r7
 8004150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	6922      	ldr	r2, [r4, #16]
 8004156:	1a98      	subs	r0, r3, r2
 8004158:	6963      	ldr	r3, [r4, #20]
 800415a:	b2f6      	uxtb	r6, r6
 800415c:	4283      	cmp	r3, r0
 800415e:	4637      	mov	r7, r6
 8004160:	dc05      	bgt.n	800416e <__swbuf_r+0x4e>
 8004162:	4621      	mov	r1, r4
 8004164:	4628      	mov	r0, r5
 8004166:	f7ff ffb3 	bl	80040d0 <_fflush_r>
 800416a:	2800      	cmp	r0, #0
 800416c:	d1ed      	bne.n	800414a <__swbuf_r+0x2a>
 800416e:	68a3      	ldr	r3, [r4, #8]
 8004170:	3b01      	subs	r3, #1
 8004172:	60a3      	str	r3, [r4, #8]
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	6022      	str	r2, [r4, #0]
 800417a:	701e      	strb	r6, [r3, #0]
 800417c:	6962      	ldr	r2, [r4, #20]
 800417e:	1c43      	adds	r3, r0, #1
 8004180:	429a      	cmp	r2, r3
 8004182:	d004      	beq.n	800418e <__swbuf_r+0x6e>
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	07db      	lsls	r3, r3, #31
 8004188:	d5e1      	bpl.n	800414e <__swbuf_r+0x2e>
 800418a:	2e0a      	cmp	r6, #10
 800418c:	d1df      	bne.n	800414e <__swbuf_r+0x2e>
 800418e:	4621      	mov	r1, r4
 8004190:	4628      	mov	r0, r5
 8004192:	f7ff ff9d 	bl	80040d0 <_fflush_r>
 8004196:	2800      	cmp	r0, #0
 8004198:	d0d9      	beq.n	800414e <__swbuf_r+0x2e>
 800419a:	e7d6      	b.n	800414a <__swbuf_r+0x2a>

0800419c <__swsetup_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4b29      	ldr	r3, [pc, #164]	@ (8004244 <__swsetup_r+0xa8>)
 80041a0:	4605      	mov	r5, r0
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	460c      	mov	r4, r1
 80041a6:	b118      	cbz	r0, 80041b0 <__swsetup_r+0x14>
 80041a8:	6a03      	ldr	r3, [r0, #32]
 80041aa:	b90b      	cbnz	r3, 80041b0 <__swsetup_r+0x14>
 80041ac:	f7ff fa3c 	bl	8003628 <__sinit>
 80041b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041b4:	0719      	lsls	r1, r3, #28
 80041b6:	d422      	bmi.n	80041fe <__swsetup_r+0x62>
 80041b8:	06da      	lsls	r2, r3, #27
 80041ba:	d407      	bmi.n	80041cc <__swsetup_r+0x30>
 80041bc:	2209      	movs	r2, #9
 80041be:	602a      	str	r2, [r5, #0]
 80041c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ca:	e033      	b.n	8004234 <__swsetup_r+0x98>
 80041cc:	0758      	lsls	r0, r3, #29
 80041ce:	d512      	bpl.n	80041f6 <__swsetup_r+0x5a>
 80041d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041d2:	b141      	cbz	r1, 80041e6 <__swsetup_r+0x4a>
 80041d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041d8:	4299      	cmp	r1, r3
 80041da:	d002      	beq.n	80041e2 <__swsetup_r+0x46>
 80041dc:	4628      	mov	r0, r5
 80041de:	f7ff fb2b 	bl	8003838 <_free_r>
 80041e2:	2300      	movs	r3, #0
 80041e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80041ec:	81a3      	strh	r3, [r4, #12]
 80041ee:	2300      	movs	r3, #0
 80041f0:	6063      	str	r3, [r4, #4]
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	f043 0308 	orr.w	r3, r3, #8
 80041fc:	81a3      	strh	r3, [r4, #12]
 80041fe:	6923      	ldr	r3, [r4, #16]
 8004200:	b94b      	cbnz	r3, 8004216 <__swsetup_r+0x7a>
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420c:	d003      	beq.n	8004216 <__swsetup_r+0x7a>
 800420e:	4621      	mov	r1, r4
 8004210:	4628      	mov	r0, r5
 8004212:	f000 f84f 	bl	80042b4 <__smakebuf_r>
 8004216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800421a:	f013 0201 	ands.w	r2, r3, #1
 800421e:	d00a      	beq.n	8004236 <__swsetup_r+0x9a>
 8004220:	2200      	movs	r2, #0
 8004222:	60a2      	str	r2, [r4, #8]
 8004224:	6962      	ldr	r2, [r4, #20]
 8004226:	4252      	negs	r2, r2
 8004228:	61a2      	str	r2, [r4, #24]
 800422a:	6922      	ldr	r2, [r4, #16]
 800422c:	b942      	cbnz	r2, 8004240 <__swsetup_r+0xa4>
 800422e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004232:	d1c5      	bne.n	80041c0 <__swsetup_r+0x24>
 8004234:	bd38      	pop	{r3, r4, r5, pc}
 8004236:	0799      	lsls	r1, r3, #30
 8004238:	bf58      	it	pl
 800423a:	6962      	ldrpl	r2, [r4, #20]
 800423c:	60a2      	str	r2, [r4, #8]
 800423e:	e7f4      	b.n	800422a <__swsetup_r+0x8e>
 8004240:	2000      	movs	r0, #0
 8004242:	e7f7      	b.n	8004234 <__swsetup_r+0x98>
 8004244:	20000018 	.word	0x20000018

08004248 <_sbrk_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d06      	ldr	r5, [pc, #24]	@ (8004264 <_sbrk_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fc fa7e 	bl	8000754 <_sbrk>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_sbrk_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_sbrk_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200002dc 	.word	0x200002dc

08004268 <__swhatbuf_r>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	460c      	mov	r4, r1
 800426c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004270:	2900      	cmp	r1, #0
 8004272:	b096      	sub	sp, #88	@ 0x58
 8004274:	4615      	mov	r5, r2
 8004276:	461e      	mov	r6, r3
 8004278:	da0d      	bge.n	8004296 <__swhatbuf_r+0x2e>
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004280:	f04f 0100 	mov.w	r1, #0
 8004284:	bf14      	ite	ne
 8004286:	2340      	movne	r3, #64	@ 0x40
 8004288:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800428c:	2000      	movs	r0, #0
 800428e:	6031      	str	r1, [r6, #0]
 8004290:	602b      	str	r3, [r5, #0]
 8004292:	b016      	add	sp, #88	@ 0x58
 8004294:	bd70      	pop	{r4, r5, r6, pc}
 8004296:	466a      	mov	r2, sp
 8004298:	f000 f848 	bl	800432c <_fstat_r>
 800429c:	2800      	cmp	r0, #0
 800429e:	dbec      	blt.n	800427a <__swhatbuf_r+0x12>
 80042a0:	9901      	ldr	r1, [sp, #4]
 80042a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80042a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80042aa:	4259      	negs	r1, r3
 80042ac:	4159      	adcs	r1, r3
 80042ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042b2:	e7eb      	b.n	800428c <__swhatbuf_r+0x24>

080042b4 <__smakebuf_r>:
 80042b4:	898b      	ldrh	r3, [r1, #12]
 80042b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042b8:	079d      	lsls	r5, r3, #30
 80042ba:	4606      	mov	r6, r0
 80042bc:	460c      	mov	r4, r1
 80042be:	d507      	bpl.n	80042d0 <__smakebuf_r+0x1c>
 80042c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	6123      	str	r3, [r4, #16]
 80042c8:	2301      	movs	r3, #1
 80042ca:	6163      	str	r3, [r4, #20]
 80042cc:	b003      	add	sp, #12
 80042ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d0:	ab01      	add	r3, sp, #4
 80042d2:	466a      	mov	r2, sp
 80042d4:	f7ff ffc8 	bl	8004268 <__swhatbuf_r>
 80042d8:	9f00      	ldr	r7, [sp, #0]
 80042da:	4605      	mov	r5, r0
 80042dc:	4639      	mov	r1, r7
 80042de:	4630      	mov	r0, r6
 80042e0:	f7ff fb16 	bl	8003910 <_malloc_r>
 80042e4:	b948      	cbnz	r0, 80042fa <__smakebuf_r+0x46>
 80042e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ea:	059a      	lsls	r2, r3, #22
 80042ec:	d4ee      	bmi.n	80042cc <__smakebuf_r+0x18>
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	f043 0302 	orr.w	r3, r3, #2
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	e7e2      	b.n	80042c0 <__smakebuf_r+0xc>
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	6020      	str	r0, [r4, #0]
 80042fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	9b01      	ldr	r3, [sp, #4]
 8004306:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800430a:	b15b      	cbz	r3, 8004324 <__smakebuf_r+0x70>
 800430c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004310:	4630      	mov	r0, r6
 8004312:	f000 f81d 	bl	8004350 <_isatty_r>
 8004316:	b128      	cbz	r0, 8004324 <__smakebuf_r+0x70>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	f023 0303 	bic.w	r3, r3, #3
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	81a3      	strh	r3, [r4, #12]
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	431d      	orrs	r5, r3
 8004328:	81a5      	strh	r5, [r4, #12]
 800432a:	e7cf      	b.n	80042cc <__smakebuf_r+0x18>

0800432c <_fstat_r>:
 800432c:	b538      	push	{r3, r4, r5, lr}
 800432e:	4d07      	ldr	r5, [pc, #28]	@ (800434c <_fstat_r+0x20>)
 8004330:	2300      	movs	r3, #0
 8004332:	4604      	mov	r4, r0
 8004334:	4608      	mov	r0, r1
 8004336:	4611      	mov	r1, r2
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	f7fc f9e2 	bl	8000702 <_fstat>
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d102      	bne.n	8004348 <_fstat_r+0x1c>
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	b103      	cbz	r3, 8004348 <_fstat_r+0x1c>
 8004346:	6023      	str	r3, [r4, #0]
 8004348:	bd38      	pop	{r3, r4, r5, pc}
 800434a:	bf00      	nop
 800434c:	200002dc 	.word	0x200002dc

08004350 <_isatty_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4d06      	ldr	r5, [pc, #24]	@ (800436c <_isatty_r+0x1c>)
 8004354:	2300      	movs	r3, #0
 8004356:	4604      	mov	r4, r0
 8004358:	4608      	mov	r0, r1
 800435a:	602b      	str	r3, [r5, #0]
 800435c:	f7fc f9e1 	bl	8000722 <_isatty>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_isatty_r+0x1a>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	b103      	cbz	r3, 800436a <_isatty_r+0x1a>
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	200002dc 	.word	0x200002dc

08004370 <_init>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	bf00      	nop
 8004374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004376:	bc08      	pop	{r3}
 8004378:	469e      	mov	lr, r3
 800437a:	4770      	bx	lr

0800437c <_fini>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr
