
buttonLedSimple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c9c  08003c9c  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003c9c  08003c9c  00004c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ca4  08003ca4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ca8  08003ca8  00004ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003cac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000240  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a8  200002a8  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009492  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001860  00000000  00000000  0000e52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0000fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a6  00000000  00000000  00010500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b365  00000000  00000000  00010aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1e0  00000000  00000000  0002be0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c762  00000000  00000000  00035feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d274d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002464  00000000  00000000  000d2790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  000d4bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c10 	.word	0x08003c10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003c10 	.word	0x08003c10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 facc 	bl	8000810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f826 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f8ae 	bl	80003dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000280:	f000 f88e 	bl	80003a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f85c 	bl	8000340 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	buttonState = HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin);
 8000288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800028c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000290:	f000 fed6 	bl	8001040 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b08      	ldr	r3, [pc, #32]	@ (80002bc <main+0x4c>)
 800029a:	701a      	strb	r2, [r3, #0]
	printf(": %d",counter++);
 800029c:	4b08      	ldr	r3, [pc, #32]	@ (80002c0 <main+0x50>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	1c5a      	adds	r2, r3, #1
 80002a2:	b2d1      	uxtb	r1, r2
 80002a4:	4a06      	ldr	r2, [pc, #24]	@ (80002c0 <main+0x50>)
 80002a6:	7011      	strb	r1, [r2, #0]
 80002a8:	4619      	mov	r1, r3
 80002aa:	4806      	ldr	r0, [pc, #24]	@ (80002c4 <main+0x54>)
 80002ac:	f002 fe42 	bl	8002f34 <iprintf>
	HAL_Delay(1000);
 80002b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b4:	f000 fb12 	bl	80008dc <HAL_Delay>
	buttonState = HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin);
 80002b8:	bf00      	nop
 80002ba:	e7e5      	b.n	8000288 <main+0x18>
 80002bc:	20000150 	.word	0x20000150
 80002c0:	20000151 	.word	0x20000151
 80002c4:	08003c28 	.word	0x08003c28

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b090      	sub	sp, #64	@ 0x40
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2228      	movs	r2, #40	@ 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fe81 	bl	8002fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	2310      	movs	r3, #16
 80002f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fece 	bl	80010a0 <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800030a:	f000 f8eb 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fef8 	bl	800211c <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000332:	f000 f8d7 	bl	80004e4 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	@ 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000344:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 8000346:	4a15      	ldr	r2, [pc, #84]	@ (800039c <MX_USART2_UART_Init+0x5c>)
 8000348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800034a:	4b13      	ldr	r3, [pc, #76]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 800034c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000376:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000382:	4805      	ldr	r0, [pc, #20]	@ (8000398 <MX_USART2_UART_Init+0x58>)
 8000384:	f002 f8ea 	bl	800255c <HAL_UART_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800038e:	f000 f8a9 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000084 	.word	0x20000084
 800039c:	40004400 	.word	0x40004400

080003a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003a6:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <MX_DMA_Init+0x38>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a0b      	ldr	r2, [pc, #44]	@ (80003d8 <MX_DMA_Init+0x38>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <MX_DMA_Init+0x38>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	2011      	movs	r0, #17
 80003c4:	f000 fb89 	bl	8000ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003c8:	2011      	movs	r0, #17
 80003ca:	f000 fba2 	bl	8000b12 <HAL_NVIC_EnableIRQ>

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f2:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <MX_GPIO_Init+0xd0>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a2d      	ldr	r2, [pc, #180]	@ (80004ac <MX_GPIO_Init+0xd0>)
 80003f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <MX_GPIO_Init+0xd0>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b28      	ldr	r3, [pc, #160]	@ (80004ac <MX_GPIO_Init+0xd0>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a27      	ldr	r2, [pc, #156]	@ (80004ac <MX_GPIO_Init+0xd0>)
 8000410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <MX_GPIO_Init+0xd0>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000422:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <MX_GPIO_Init+0xd0>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a21      	ldr	r2, [pc, #132]	@ (80004ac <MX_GPIO_Init+0xd0>)
 8000428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b1f      	ldr	r3, [pc, #124]	@ (80004ac <MX_GPIO_Init+0xd0>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2102      	movs	r1, #2
 800043e:	481c      	ldr	r0, [pc, #112]	@ (80004b0 <MX_GPIO_Init+0xd4>)
 8000440:	f000 fe16 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led3_Pin|Led2_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2118      	movs	r1, #24
 8000448:	481a      	ldr	r0, [pc, #104]	@ (80004b4 <MX_GPIO_Init+0xd8>)
 800044a:	f000 fe11 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 800044e:	2302      	movs	r3, #2
 8000450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	4619      	mov	r1, r3
 8000464:	4812      	ldr	r0, [pc, #72]	@ (80004b0 <MX_GPIO_Init+0xd4>)
 8000466:	f000 fc79 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800046a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800046e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	4619      	mov	r1, r3
 800047e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000482:	f000 fc6b 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led3_Pin Led2_Pin */
  GPIO_InitStruct.Pin = Led3_Pin|Led2_Pin;
 8000486:	2318      	movs	r3, #24
 8000488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <MX_GPIO_Init+0xd8>)
 800049e:	f000 fc5d 	bl	8000d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a2:	bf00      	nop
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48001400 	.word	0x48001400
 80004b4:	48000400 	.word	0x48000400

080004b8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <_write+0x28>)
 80004d0:	f002 f892 	bl	80025f8 <HAL_UART_Transmit>
    return len;
 80004d4:	687b      	ldr	r3, [r7, #4]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000084 	.word	0x20000084

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <Error_Handler+0x8>

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <HAL_MspInit+0x44>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000534 <HAL_MspInit+0x44>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <HAL_MspInit+0x44>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <HAL_MspInit+0x44>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <HAL_MspInit+0x44>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <HAL_MspInit+0x44>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	@ 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a2b      	ldr	r2, [pc, #172]	@ (8000604 <HAL_UART_MspInit+0xcc>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d14f      	bne.n	80005fa <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800055a:	4b2b      	ldr	r3, [pc, #172]	@ (8000608 <HAL_UART_MspInit+0xd0>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a2a      	ldr	r2, [pc, #168]	@ (8000608 <HAL_UART_MspInit+0xd0>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <HAL_UART_MspInit+0xd0>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <HAL_UART_MspInit+0xd0>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a24      	ldr	r2, [pc, #144]	@ (8000608 <HAL_UART_MspInit+0xd0>)
 8000578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b22      	ldr	r3, [pc, #136]	@ (8000608 <HAL_UART_MspInit+0xd0>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800058a:	230c      	movs	r3, #12
 800058c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000596:	2303      	movs	r3, #3
 8000598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800059a:	2307      	movs	r3, #7
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a8:	f000 fbd8 	bl	8000d5c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80005ac:	4b17      	ldr	r3, [pc, #92]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005ae:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <HAL_UART_MspInit+0xd8>)
 80005b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005b2:	4b16      	ldr	r3, [pc, #88]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005b4:	2210      	movs	r2, #16
 80005b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005d2:	2220      	movs	r2, #32
 80005d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80005de:	480b      	ldr	r0, [pc, #44]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005e0:	f000 fab1 	bl	8000b46 <HAL_DMA_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80005ea:	f7ff ff7b 	bl	80004e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005f2:	671a      	str	r2, [r3, #112]	@ 0x70
 80005f4:	4a05      	ldr	r2, [pc, #20]	@ (800060c <HAL_UART_MspInit+0xd4>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005fa:	bf00      	nop
 80005fc:	3728      	adds	r7, #40	@ 0x28
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40004400 	.word	0x40004400
 8000608:	40021000 	.word	0x40021000
 800060c:	2000010c 	.word	0x2000010c
 8000610:	40020080 	.word	0x40020080

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <NMI_Handler+0x4>

0800061c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <MemManage_Handler+0x4>

0800062c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <UsageFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066a:	f000 f917 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000678:	4802      	ldr	r0, [pc, #8]	@ (8000684 <DMA1_Channel7_IRQHandler+0x10>)
 800067a:	f000 faab 	bl	8000bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000010c 	.word	0x2000010c

08000688 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	e00a      	b.n	80006b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800069a:	f3af 8000 	nop.w
 800069e:	4601      	mov	r1, r0
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	60ba      	str	r2, [r7, #8]
 80006a6:	b2ca      	uxtb	r2, r1
 80006a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbf0      	blt.n	800069a <_read+0x12>
  }

  return len;
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006ea:	605a      	str	r2, [r3, #4]
  return 0;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_isatty>:

int _isatty(int file)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000734:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <_sbrk+0x5c>)
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <_sbrk+0x60>)
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <_sbrk+0x64>)
 800074a:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <_sbrk+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	429a      	cmp	r2, r3
 800075a:	d207      	bcs.n	800076c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800075c:	f002 fc8e 	bl	800307c <__errno>
 8000760:	4603      	mov	r3, r0
 8000762:	220c      	movs	r2, #12
 8000764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e009      	b.n	8000780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	4a05      	ldr	r2, [pc, #20]	@ (8000790 <_sbrk+0x64>)
 800077c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20003000 	.word	0x20003000
 800078c:	00000400 	.word	0x00000400
 8000790:	20000154 	.word	0x20000154
 8000794:	200002a8 	.word	0x200002a8

08000798 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <SystemInit+0x20>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007a2:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <SystemInit+0x20>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c0:	f7ff ffea 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c6:	490d      	ldr	r1, [pc, #52]	@ (80007fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000800 <LoopForever+0xe>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000808 <LoopForever+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ea:	f002 fc4d 	bl	8003088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ee:	f7ff fd3f 	bl	8000270 <main>

080007f2 <LoopForever>:

LoopForever:
    b LoopForever
 80007f2:	e7fe      	b.n	80007f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000800:	08003cac 	.word	0x08003cac
  ldr r2, =_sbss
 8000804:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000808:	200002a8 	.word	0x200002a8

0800080c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC1_2_IRQHandler>
	...

08000810 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <HAL_Init+0x28>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <HAL_Init+0x28>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f94f 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000826:	2000      	movs	r0, #0
 8000828:	f000 f808 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800082c:	f7ff fe60 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40022000 	.word	0x40022000

0800083c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <HAL_InitTick+0x54>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <HAL_InitTick+0x58>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000852:	fbb3 f3f1 	udiv	r3, r3, r1
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f967 	bl	8000b2e <HAL_SYSTICK_Config>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e00e      	b.n	8000888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b0f      	cmp	r3, #15
 800086e:	d80a      	bhi.n	8000886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000870:	2200      	movs	r2, #0
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f000 f92f 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800087c:	4a06      	ldr	r2, [pc, #24]	@ (8000898 <HAL_InitTick+0x5c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	e000      	b.n	8000888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000000 	.word	0x20000000
 8000894:	20000008 	.word	0x20000008
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_IncTick+0x20>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_IncTick+0x24>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_IncTick+0x24>)
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000158 	.word	0x20000158

080008c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <HAL_GetTick+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000158 	.word	0x20000158

080008dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff ffee 	bl	80008c4 <HAL_GetTick>
 80008e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f4:	d005      	beq.n	8000902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <HAL_Delay+0x44>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000902:	bf00      	nop
 8000904:	f7ff ffde 	bl	80008c4 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	429a      	cmp	r2, r3
 8000912:	d8f7      	bhi.n	8000904 <HAL_Delay+0x28>
  {
  }
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008

08000924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800094c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000956:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	60d3      	str	r3, [r2, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000970:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <__NVIC_GetPriorityGrouping+0x18>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	f003 0307 	and.w	r3, r3, #7
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	2b00      	cmp	r3, #0
 8000998:	db0b      	blt.n	80009b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 021f 	and.w	r2, r3, #31
 80009a0:	4907      	ldr	r1, [pc, #28]	@ (80009c0 <__NVIC_EnableIRQ+0x38>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	095b      	lsrs	r3, r3, #5
 80009a8:	2001      	movs	r0, #1
 80009aa:	fa00 f202 	lsl.w	r2, r0, r2
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	@ (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	@ (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	@ 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	@ 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff8e 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff29 	bl	8000924 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff3e 	bl	800096c <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff8e 	bl	8000a18 <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff31 	bl	8000988 <__NVIC_EnableIRQ>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffa2 	bl	8000a80 <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e037      	b.n	8000bcc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2202      	movs	r2, #2
 8000b60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000b72:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f8b4 	bl	8000d1c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d024      	beq.n	8000c46 <HAL_DMA_IRQHandler+0x72>
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d01f      	beq.n	8000c46 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 0320 	and.w	r3, r3, #32
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d107      	bne.n	8000c24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0204 	bic.w	r2, r2, #4
 8000c22:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c32:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d06a      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c44:	e065      	b.n	8000d12 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4013      	ands	r3, r2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d02c      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0xdc>
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d027      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0320 	and.w	r3, r3, #32
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10b      	bne.n	8000c86 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 020a 	bic.w	r2, r2, #10
 8000c7c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c8e:	2102      	movs	r1, #2
 8000c90:	fa01 f202 	lsl.w	r2, r1, r2
 8000c94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d035      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000cae:	e030      	b.n	8000d12 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	2208      	movs	r2, #8
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d028      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x13e>
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d023      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f022 020e 	bic.w	r2, r2, #14
 8000cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2201      	movs	r2, #1
 8000cee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d004      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	4798      	blx	r3
    }
  }
}
 8000d10:	e7ff      	b.n	8000d12 <HAL_DMA_IRQHandler+0x13e>
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <DMA_CalcBaseAndBitshift+0x34>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a09      	ldr	r2, [pc, #36]	@ (8000d54 <DMA_CalcBaseAndBitshift+0x38>)
 8000d30:	fba2 2303 	umull	r2, r3, r2, r3
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	009a      	lsls	r2, r3, #2
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <DMA_CalcBaseAndBitshift+0x3c>)
 8000d40:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	bffdfff8 	.word	0xbffdfff8
 8000d54:	cccccccd 	.word	0xcccccccd
 8000d58:	40020000 	.word	0x40020000

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	e14e      	b.n	800100a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8140 	beq.w	8001004 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d005      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d130      	bne.n	8000dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	f003 0201 	and.w	r2, r3, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d017      	beq.n	8000e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d123      	bne.n	8000e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	6939      	ldr	r1, [r7, #16]
 8000e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0203 	and.w	r2, r3, #3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 809a 	beq.w	8001004 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	4b55      	ldr	r3, [pc, #340]	@ (8001028 <HAL_GPIO_Init+0x2cc>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a54      	ldr	r2, [pc, #336]	@ (8001028 <HAL_GPIO_Init+0x2cc>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b52      	ldr	r3, [pc, #328]	@ (8001028 <HAL_GPIO_Init+0x2cc>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee8:	4a50      	ldr	r2, [pc, #320]	@ (800102c <HAL_GPIO_Init+0x2d0>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f12:	d013      	beq.n	8000f3c <HAL_GPIO_Init+0x1e0>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a46      	ldr	r2, [pc, #280]	@ (8001030 <HAL_GPIO_Init+0x2d4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00d      	beq.n	8000f38 <HAL_GPIO_Init+0x1dc>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a45      	ldr	r2, [pc, #276]	@ (8001034 <HAL_GPIO_Init+0x2d8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x1d8>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a44      	ldr	r2, [pc, #272]	@ (8001038 <HAL_GPIO_Init+0x2dc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <HAL_GPIO_Init+0x1d4>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x1e2>
 8000f30:	2305      	movs	r3, #5
 8000f32:	e004      	b.n	8000f3e <HAL_GPIO_Init+0x1e2>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x1e2>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_GPIO_Init+0x1e2>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4093      	lsls	r3, r2
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f4e:	4937      	ldr	r1, [pc, #220]	@ (800102c <HAL_GPIO_Init+0x2d0>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5c:	4b37      	ldr	r3, [pc, #220]	@ (800103c <HAL_GPIO_Init+0x2e0>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f80:	4a2e      	ldr	r2, [pc, #184]	@ (800103c <HAL_GPIO_Init+0x2e0>)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f86:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <HAL_GPIO_Init+0x2e0>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000faa:	4a24      	ldr	r2, [pc, #144]	@ (800103c <HAL_GPIO_Init+0x2e0>)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <HAL_GPIO_Init+0x2e0>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd4:	4a19      	ldr	r2, [pc, #100]	@ (800103c <HAL_GPIO_Init+0x2e0>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_GPIO_Init+0x2e0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <HAL_GPIO_Init+0x2e0>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	f47f aea9 	bne.w	8000d6c <HAL_GPIO_Init+0x10>
  }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	371c      	adds	r7, #28
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000
 8001030:	48000400 	.word	0x48000400
 8001034:	48000800 	.word	0x48000800
 8001038:	48000c00 	.word	0x48000c00
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	4013      	ands	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001058:	2301      	movs	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e001      	b.n	8001062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800108c:	e002      	b.n	8001094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	f001 b823 	b.w	800210c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 817d 	beq.w	80013d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010dc:	4bbc      	ldr	r3, [pc, #752]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d00c      	beq.n	8001102 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010e8:	4bb9      	ldr	r3, [pc, #740]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d15c      	bne.n	80011ae <HAL_RCC_OscConfig+0x10e>
 80010f4:	4bb6      	ldr	r3, [pc, #728]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001100:	d155      	bne.n	80011ae <HAL_RCC_OscConfig+0x10e>
 8001102:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001106:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001116:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	095b      	lsrs	r3, r3, #5
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <HAL_RCC_OscConfig+0x94>
 800112e:	4ba8      	ldr	r3, [pc, #672]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	e015      	b.n	8001160 <HAL_RCC_OscConfig+0xc0>
 8001134:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001138:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001148:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800114c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001150:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800115c:	4b9c      	ldr	r3, [pc, #624]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 800115e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001160:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001164:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001168:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800116c:	fa92 f2a2 	rbit	r2, r2
 8001170:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001174:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001178:	fab2 f282 	clz	r2, r2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f002 021f 	and.w	r2, r2, #31
 8001188:	2101      	movs	r1, #1
 800118a:	fa01 f202 	lsl.w	r2, r1, r2
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 811f 	beq.w	80013d4 <HAL_RCC_OscConfig+0x334>
 8001196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800119a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 8116 	bne.w	80013d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f000 bfaf 	b.w	800210c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x12e>
 80011c0:	4b83      	ldr	r3, [pc, #524]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a82      	ldr	r2, [pc, #520]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80011c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	e036      	b.n	800123c <HAL_RCC_OscConfig+0x19c>
 80011ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x158>
 80011de:	4b7c      	ldr	r3, [pc, #496]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7b      	ldr	r2, [pc, #492]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80011e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b79      	ldr	r3, [pc, #484]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a78      	ldr	r2, [pc, #480]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e021      	b.n	800123c <HAL_RCC_OscConfig+0x19c>
 80011f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x184>
 800120a:	4b71      	ldr	r3, [pc, #452]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a70      	ldr	r2, [pc, #448]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b6e      	ldr	r3, [pc, #440]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6d      	ldr	r2, [pc, #436]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0x19c>
 8001224:	4b6a      	ldr	r3, [pc, #424]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a69      	ldr	r2, [pc, #420]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b67      	ldr	r3, [pc, #412]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a66      	ldr	r2, [pc, #408]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800123c:	4b64      	ldr	r3, [pc, #400]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 800123e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001240:	f023 020f 	bic.w	r2, r3, #15
 8001244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001248:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	495f      	ldr	r1, [pc, #380]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 8001252:	4313      	orrs	r3, r2
 8001254:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800125a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d059      	beq.n	800131a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fb2d 	bl	80008c4 <HAL_GetTick>
 800126a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	e00a      	b.n	8001286 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fb28 	bl	80008c4 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b64      	cmp	r3, #100	@ 0x64
 800127e:	d902      	bls.n	8001286 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	f000 bf43 	b.w	800210c <HAL_RCC_OscConfig+0x106c>
 8001286:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800128a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800129a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	095b      	lsrs	r3, r3, #5
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_RCC_OscConfig+0x218>
 80012b2:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	e015      	b.n	80012e4 <HAL_RCC_OscConfig+0x244>
 80012b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012bc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80012cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012d0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80012d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80012e0:	4b3b      	ldr	r3, [pc, #236]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012e8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80012ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80012f0:	fa92 f2a2 	rbit	r2, r2
 80012f4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80012f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80012fc:	fab2 f282 	clz	r2, r2
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f002 021f 	and.w	r2, r2, #31
 800130c:	2101      	movs	r1, #1
 800130e:	fa01 f202 	lsl.w	r2, r1, r2
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ab      	beq.n	8001270 <HAL_RCC_OscConfig+0x1d0>
 8001318:	e05d      	b.n	80013d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fad3 	bl	80008c4 <HAL_GetTick>
 800131e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff face 	bl	80008c4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	@ 0x64
 8001332:	d902      	bls.n	800133a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	f000 bee9 	b.w	800210c <HAL_RCC_OscConfig+0x106c>
 800133a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800133e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800134e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <HAL_RCC_OscConfig+0x2cc>
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e015      	b.n	8001398 <HAL_RCC_OscConfig+0x2f8>
 800136c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001370:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001380:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001384:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001388:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_RCC_OscConfig+0x330>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800139c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80013a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80013a4:	fa92 f2a2 	rbit	r2, r2
 80013a8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80013ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80013b0:	fab2 f282 	clz	r2, r2
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f042 0220 	orr.w	r2, r2, #32
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	f002 021f 	and.w	r2, r2, #31
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f202 	lsl.w	r2, r1, r2
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1ab      	bne.n	8001324 <HAL_RCC_OscConfig+0x284>
 80013cc:	e003      	b.n	80013d6 <HAL_RCC_OscConfig+0x336>
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 817d 	beq.w	80016e6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013ec:	4ba6      	ldr	r3, [pc, #664]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013f8:	4ba3      	ldr	r3, [pc, #652]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d172      	bne.n	80014ea <HAL_RCC_OscConfig+0x44a>
 8001404:	4ba0      	ldr	r3, [pc, #640]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d16c      	bne.n	80014ea <HAL_RCC_OscConfig+0x44a>
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001422:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	095b      	lsrs	r3, r3, #5
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <HAL_RCC_OscConfig+0x3a0>
 800143a:	4b93      	ldr	r3, [pc, #588]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	e013      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001458:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800145c:	fa93 f3a3 	rbit	r3, r3
 8001460:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001464:	4b88      	ldr	r3, [pc, #544]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001468:	2202      	movs	r2, #2
 800146a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800146e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001472:	fa92 f2a2 	rbit	r2, r2
 8001476:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800147a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800147e:	fab2 f282 	clz	r2, r2
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	f042 0220 	orr.w	r2, r2, #32
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f002 021f 	and.w	r2, r2, #31
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f202 	lsl.w	r2, r1, r2
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00a      	beq.n	80014b0 <HAL_RCC_OscConfig+0x410>
 800149a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d002      	beq.n	80014b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f000 be2e 	b.w	800210c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b0:	4b75      	ldr	r3, [pc, #468]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	21f8      	movs	r1, #248	@ 0xf8
 80014c6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80014ce:	fa91 f1a1 	rbit	r1, r1
 80014d2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80014d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80014da:	fab1 f181 	clz	r1, r1
 80014de:	b2c9      	uxtb	r1, r1
 80014e0:	408b      	lsls	r3, r1
 80014e2:	4969      	ldr	r1, [pc, #420]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e8:	e0fd      	b.n	80016e6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8088 	beq.w	800160c <HAL_RCC_OscConfig+0x56c>
 80014fc:	2301      	movs	r3, #1
 80014fe:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800150e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001512:	fab3 f383 	clz	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800151c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	461a      	mov	r2, r3
 8001524:	2301      	movs	r3, #1
 8001526:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff f9cc 	bl	80008c4 <HAL_GetTick>
 800152c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff f9c7 	bl	80008c4 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d902      	bls.n	8001548 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	f000 bde2 	b.w	800210c <HAL_RCC_OscConfig+0x106c>
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800155a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <HAL_RCC_OscConfig+0x4d8>
 8001572:	4b45      	ldr	r3, [pc, #276]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	e013      	b.n	80015a0 <HAL_RCC_OscConfig+0x500>
 8001578:	2302      	movs	r3, #2
 800157a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001590:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800159c:	4b3a      	ldr	r3, [pc, #232]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	2202      	movs	r2, #2
 80015a2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80015a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80015aa:	fa92 f2a2 	rbit	r2, r2
 80015ae:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80015b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80015b6:	fab2 f282 	clz	r2, r2
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	f042 0220 	orr.w	r2, r2, #32
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	f002 021f 	and.w	r2, r2, #31
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f202 	lsl.w	r2, r1, r2
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0af      	beq.n	8001532 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	21f8      	movs	r1, #248	@ 0xf8
 80015e8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80015f0:	fa91 f1a1 	rbit	r1, r1
 80015f4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80015f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80015fc:	fab1 f181 	clz	r1, r1
 8001600:	b2c9      	uxtb	r1, r1
 8001602:	408b      	lsls	r3, r1
 8001604:	4920      	ldr	r1, [pc, #128]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
 800160a:	e06c      	b.n	80016e6 <HAL_RCC_OscConfig+0x646>
 800160c:	2301      	movs	r3, #1
 800160e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800161e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800162c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	461a      	mov	r2, r3
 8001634:	2300      	movs	r3, #0
 8001636:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff f944 	bl	80008c4 <HAL_GetTick>
 800163c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff f93f 	bl	80008c4 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d902      	bls.n	8001658 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	f000 bd5a 	b.w	800210c <HAL_RCC_OscConfig+0x106c>
 8001658:	2302      	movs	r3, #2
 800165a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800166a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	fab3 f383 	clz	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	095b      	lsrs	r3, r3, #5
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d104      	bne.n	800168c <HAL_RCC_OscConfig+0x5ec>
 8001682:	4b01      	ldr	r3, [pc, #4]	@ (8001688 <HAL_RCC_OscConfig+0x5e8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	e015      	b.n	80016b4 <HAL_RCC_OscConfig+0x614>
 8001688:	40021000 	.word	0x40021000
 800168c:	2302      	movs	r3, #2
 800168e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80016a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80016b0:	4bc8      	ldr	r3, [pc, #800]	@ (80019d4 <HAL_RCC_OscConfig+0x934>)
 80016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b4:	2202      	movs	r2, #2
 80016b6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80016ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80016be:	fa92 f2a2 	rbit	r2, r2
 80016c2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80016c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80016ca:	fab2 f282 	clz	r2, r2
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	f042 0220 	orr.w	r2, r2, #32
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	f002 021f 	and.w	r2, r2, #31
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ad      	bne.n	8001642 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8110 	beq.w	800191c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d079      	beq.n	8001800 <HAL_RCC_OscConfig+0x760>
 800170c:	2301      	movs	r3, #1
 800170e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800171e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	4bab      	ldr	r3, [pc, #684]	@ (80019d8 <HAL_RCC_OscConfig+0x938>)
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	461a      	mov	r2, r3
 8001732:	2301      	movs	r3, #1
 8001734:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7ff f8c5 	bl	80008c4 <HAL_GetTick>
 800173a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	e00a      	b.n	8001756 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff f8c0 	bl	80008c4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d902      	bls.n	8001756 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	f000 bcdb 	b.w	800210c <HAL_RCC_OscConfig+0x106c>
 8001756:	2302      	movs	r3, #2
 8001758:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001760:	fa93 f3a3 	rbit	r3, r3
 8001764:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001770:	2202      	movs	r2, #2
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001778:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fa93 f2a3 	rbit	r2, r3
 8001782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001794:	2202      	movs	r2, #2
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b0:	4b88      	ldr	r3, [pc, #544]	@ (80019d4 <HAL_RCC_OscConfig+0x934>)
 80017b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017bc:	2102      	movs	r1, #2
 80017be:	6019      	str	r1, [r3, #0]
 80017c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	fa93 f1a3 	rbit	r1, r3
 80017ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017d6:	6019      	str	r1, [r3, #0]
  return result;
 80017d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0a0      	beq.n	8001740 <HAL_RCC_OscConfig+0x6a0>
 80017fe:	e08d      	b.n	800191c <HAL_RCC_OscConfig+0x87c>
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001810:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fa93 f2a3 	rbit	r2, r3
 800181a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001822:	601a      	str	r2, [r3, #0]
  return result;
 8001824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001828:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800182c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	4b68      	ldr	r3, [pc, #416]	@ (80019d8 <HAL_RCC_OscConfig+0x938>)
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	461a      	mov	r2, r3
 800183e:	2300      	movs	r3, #0
 8001840:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff f83f 	bl	80008c4 <HAL_GetTick>
 8001846:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff f83a 	bl	80008c4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d902      	bls.n	8001862 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	f000 bc55 	b.w	800210c <HAL_RCC_OscConfig+0x106c>
 8001862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001866:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800186a:	2202      	movs	r2, #2
 800186c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001872:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	fa93 f2a3 	rbit	r2, r3
 800187c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001880:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800188e:	2202      	movs	r2, #2
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001896:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018b2:	2202      	movs	r2, #2
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80018cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ce:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <HAL_RCC_OscConfig+0x934>)
 80018d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018da:	2102      	movs	r1, #2
 80018dc:	6019      	str	r1, [r3, #0]
 80018de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f1a3 	rbit	r1, r3
 80018ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018f4:	6019      	str	r1, [r3, #0]
  return result;
 80018f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d197      	bne.n	800184c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001920:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 81a1 	beq.w	8001c74 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001938:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <HAL_RCC_OscConfig+0x934>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d116      	bne.n	8001972 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_RCC_OscConfig+0x934>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	4a22      	ldr	r2, [pc, #136]	@ (80019d4 <HAL_RCC_OscConfig+0x934>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194e:	61d3      	str	r3, [r2, #28]
 8001950:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <HAL_RCC_OscConfig+0x934>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001966:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800196a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <HAL_RCC_OscConfig+0x93c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d11a      	bne.n	80019b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_RCC_OscConfig+0x93c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a16      	ldr	r2, [pc, #88]	@ (80019dc <HAL_RCC_OscConfig+0x93c>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198a:	f7fe ff9b 	bl	80008c4 <HAL_GetTick>
 800198e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	e009      	b.n	80019a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001994:	f7fe ff96 	bl	80008c4 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b64      	cmp	r3, #100	@ 0x64
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e3b1      	b.n	800210c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <HAL_RCC_OscConfig+0x93c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ef      	beq.n	8001994 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d10d      	bne.n	80019e0 <HAL_RCC_OscConfig+0x940>
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_RCC_OscConfig+0x934>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a02      	ldr	r2, [pc, #8]	@ (80019d4 <HAL_RCC_OscConfig+0x934>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6213      	str	r3, [r2, #32]
 80019d0:	e03c      	b.n	8001a4c <HAL_RCC_OscConfig+0x9ac>
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	10908120 	.word	0x10908120
 80019dc:	40007000 	.word	0x40007000
 80019e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x96a>
 80019f0:	4bc1      	ldr	r3, [pc, #772]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4ac0      	ldr	r2, [pc, #768]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	4bbe      	ldr	r3, [pc, #760]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4abd      	ldr	r2, [pc, #756]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001a02:	f023 0304 	bic.w	r3, r3, #4
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e020      	b.n	8001a4c <HAL_RCC_OscConfig+0x9ac>
 8001a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x994>
 8001a1a:	4bb7      	ldr	r3, [pc, #732]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4ab6      	ldr	r2, [pc, #728]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	4bb4      	ldr	r3, [pc, #720]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4ab3      	ldr	r2, [pc, #716]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	e00b      	b.n	8001a4c <HAL_RCC_OscConfig+0x9ac>
 8001a34:	4bb0      	ldr	r3, [pc, #704]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4aaf      	ldr	r2, [pc, #700]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	4bad      	ldr	r3, [pc, #692]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4aac      	ldr	r2, [pc, #688]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001a46:	f023 0304 	bic.w	r3, r3, #4
 8001a4a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8081 	beq.w	8001b60 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7fe ff31 	bl	80008c4 <HAL_GetTick>
 8001a62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7fe ff2c 	bl	80008c4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e345      	b.n	800210c <HAL_RCC_OscConfig+0x106c>
 8001a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a88:	2202      	movs	r2, #2
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001aac:	2202      	movs	r2, #2
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fa93 f2a3 	rbit	r2, r3
 8001abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ac6:	601a      	str	r2, [r3, #0]
  return result;
 8001ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001acc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ad0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	095b      	lsrs	r3, r3, #5
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d102      	bne.n	8001aec <HAL_RCC_OscConfig+0xa4c>
 8001ae6:	4b84      	ldr	r3, [pc, #528]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	e013      	b.n	8001b14 <HAL_RCC_OscConfig+0xa74>
 8001aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001af4:	2202      	movs	r2, #2
 8001af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fa93 f2a3 	rbit	r2, r3
 8001b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	4b79      	ldr	r3, [pc, #484]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b18:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	6011      	str	r1, [r2, #0]
 8001b20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b24:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	fa92 f1a2 	rbit	r1, r2
 8001b2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b32:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b36:	6011      	str	r1, [r2, #0]
  return result;
 8001b38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b3c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f002 021f 	and.w	r2, r2, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d084      	beq.n	8001a68 <HAL_RCC_OscConfig+0x9c8>
 8001b5e:	e07f      	b.n	8001c60 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7fe feb0 	bl	80008c4 <HAL_GetTick>
 8001b64:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	e00b      	b.n	8001b82 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7fe feab 	bl	80008c4 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e2c4      	b.n	800210c <HAL_RCC_OscConfig+0x106c>
 8001b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b86:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b92:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001baa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001bae:	2202      	movs	r2, #2
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bc8:	601a      	str	r2, [r3, #0]
  return result;
 8001bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bce:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001bd2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f043 0302 	orr.w	r3, r3, #2
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_OscConfig+0xb4e>
 8001be8:	4b43      	ldr	r3, [pc, #268]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	e013      	b.n	8001c16 <HAL_RCC_OscConfig+0xb76>
 8001bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	4b39      	ldr	r3, [pc, #228]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c1a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c1e:	2102      	movs	r1, #2
 8001c20:	6011      	str	r1, [r2, #0]
 8001c22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c26:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	fa92 f1a2 	rbit	r1, r2
 8001c30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c34:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c38:	6011      	str	r1, [r2, #0]
  return result;
 8001c3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c3e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	fab2 f282 	clz	r2, r2
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	f002 021f 	and.w	r2, r2, #31
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d184      	bne.n	8001b6a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c60:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c68:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	4a22      	ldr	r2, [pc, #136]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8242 	beq.w	800210a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <HAL_RCC_OscConfig+0xc58>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	f000 8213 	beq.w	80020ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	f040 8162 	bne.w	8001f6a <HAL_RCC_OscConfig+0xeca>
 8001ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001caa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001cae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	fa93 f2a3 	rbit	r2, r3
 8001cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cca:	601a      	str	r2, [r3, #0]
  return result;
 8001ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001cd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ce0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe fdea 	bl	80008c4 <HAL_GetTick>
 8001cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	e00c      	b.n	8001d10 <HAL_RCC_OscConfig+0xc70>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7fe fde2 	bl	80008c4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1fd      	b.n	800210c <HAL_RCC_OscConfig+0x106c>
 8001d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d14:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d22:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d30:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d34:	601a      	str	r2, [r3, #0]
  return result;
 8001d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001d3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0xcba>
 8001d54:	4bb0      	ldr	r3, [pc, #704]	@ (8002018 <HAL_RCC_OscConfig+0xf78>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	e027      	b.n	8001daa <HAL_RCC_OscConfig+0xd0a>
 8001d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d84:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d92:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	4b9c      	ldr	r3, [pc, #624]	@ (8002018 <HAL_RCC_OscConfig+0xf78>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dae:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001db2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001db6:	6011      	str	r1, [r2, #0]
 8001db8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dbc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	fa92 f1a2 	rbit	r1, r2
 8001dc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001dce:	6011      	str	r1, [r2, #0]
  return result;
 8001dd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dd4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	fab2 f282 	clz	r2, r2
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f042 0220 	orr.w	r2, r2, #32
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f002 021f 	and.w	r2, r2, #31
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d182      	bne.n	8001cfc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df6:	4b88      	ldr	r3, [pc, #544]	@ (8002018 <HAL_RCC_OscConfig+0xf78>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	430b      	orrs	r3, r1
 8001e18:	497f      	ldr	r1, [pc, #508]	@ (8002018 <HAL_RCC_OscConfig+0xf78>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
 8001e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e22:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e30:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e42:	601a      	str	r2, [r3, #0]
  return result;
 8001e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e48:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001e4c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2301      	movs	r3, #1
 8001e62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fd2e 	bl	80008c4 <HAL_GetTick>
 8001e68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6c:	e009      	b.n	8001e82 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe fd29 	bl	80008c4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e144      	b.n	800210c <HAL_RCC_OscConfig+0x106c>
 8001e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e86:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e94:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ea6:	601a      	str	r2, [r3, #0]
  return result;
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001eb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_OscConfig+0xe2c>
 8001ec6:	4b54      	ldr	r3, [pc, #336]	@ (8002018 <HAL_RCC_OscConfig+0xf78>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	e027      	b.n	8001f1c <HAL_RCC_OscConfig+0xe7c>
 8001ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ed4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ede:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eec:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001efa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	4b3f      	ldr	r3, [pc, #252]	@ (8002018 <HAL_RCC_OscConfig+0xf78>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f20:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f24:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f28:	6011      	str	r1, [r2, #0]
 8001f2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f2e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	fa92 f1a2 	rbit	r1, r2
 8001f38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f3c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f40:	6011      	str	r1, [r2, #0]
  return result;
 8001f42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f46:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	fab2 f282 	clz	r2, r2
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f042 0220 	orr.w	r2, r2, #32
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f002 021f 	and.w	r2, r2, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d082      	beq.n	8001e6e <HAL_RCC_OscConfig+0xdce>
 8001f68:	e0cf      	b.n	800210a <HAL_RCC_OscConfig+0x106a>
 8001f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001f72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	fa93 f2a3 	rbit	r2, r3
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f8e:	601a      	str	r2, [r3, #0]
  return result;
 8001f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f94:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001f98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fa4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	461a      	mov	r2, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fc88 	bl	80008c4 <HAL_GetTick>
 8001fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fba:	f7fe fc83 	bl	80008c4 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e09e      	b.n	800210c <HAL_RCC_OscConfig+0x106c>
 8001fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001fd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fa93 f2a3 	rbit	r2, r3
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ff2:	601a      	str	r2, [r3, #0]
  return result;
 8001ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ffc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d104      	bne.n	800201c <HAL_RCC_OscConfig+0xf7c>
 8002012:	4b01      	ldr	r3, [pc, #4]	@ (8002018 <HAL_RCC_OscConfig+0xf78>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e029      	b.n	800206c <HAL_RCC_OscConfig+0xfcc>
 8002018:	40021000 	.word	0x40021000
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002024:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fa93 f2a3 	rbit	r2, r3
 8002038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002046:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800204a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002054:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f2a3 	rbit	r2, r3
 800205e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002062:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	4b2b      	ldr	r3, [pc, #172]	@ (8002118 <HAL_RCC_OscConfig+0x1078>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002070:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002074:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002078:	6011      	str	r1, [r2, #0]
 800207a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800207e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	fa92 f1a2 	rbit	r1, r2
 8002088:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800208c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002090:	6011      	str	r1, [r2, #0]
  return result;
 8002092:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002096:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f042 0220 	orr.w	r2, r2, #32
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 021f 	and.w	r2, r2, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f202 	lsl.w	r2, r1, r2
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d180      	bne.n	8001fba <HAL_RCC_OscConfig+0xf1a>
 80020b8:	e027      	b.n	800210a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e01e      	b.n	800210c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_RCC_OscConfig+0x1078>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020da:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d10b      	bne.n	8002106 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000

0800211c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b09e      	sub	sp, #120	@ 0x78
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e162      	b.n	80023fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b90      	ldr	r3, [pc, #576]	@ (8002378 <HAL_RCC_ClockConfig+0x25c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d910      	bls.n	8002164 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b8d      	ldr	r3, [pc, #564]	@ (8002378 <HAL_RCC_ClockConfig+0x25c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	498b      	ldr	r1, [pc, #556]	@ (8002378 <HAL_RCC_ClockConfig+0x25c>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b89      	ldr	r3, [pc, #548]	@ (8002378 <HAL_RCC_ClockConfig+0x25c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e14a      	b.n	80023fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b82      	ldr	r3, [pc, #520]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	497f      	ldr	r1, [pc, #508]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80dc 	beq.w	8002348 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d13c      	bne.n	8002212 <HAL_RCC_ClockConfig+0xf6>
 8002198:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800219c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d102      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xa6>
 80021bc:	4b6f      	ldr	r3, [pc, #444]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	e00f      	b.n	80021e2 <HAL_RCC_ClockConfig+0xc6>
 80021c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80021d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80021d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021de:	4b67      	ldr	r3, [pc, #412]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021ea:	fa92 f2a2 	rbit	r2, r2
 80021ee:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80021f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80021f2:	fab2 f282 	clz	r2, r2
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f002 021f 	and.w	r2, r2, #31
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d17b      	bne.n	8002306 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0f3      	b.n	80023fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d13c      	bne.n	8002294 <HAL_RCC_ClockConfig+0x178>
 800221a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800221e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_RCC_ClockConfig+0x128>
 800223e:	4b4f      	ldr	r3, [pc, #316]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	e00f      	b.n	8002264 <HAL_RCC_ClockConfig+0x148>
 8002244:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002248:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	647b      	str	r3, [r7, #68]	@ 0x44
 8002252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002256:	643b      	str	r3, [r7, #64]	@ 0x40
 8002258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002260:	4b46      	ldr	r3, [pc, #280]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002268:	63ba      	str	r2, [r7, #56]	@ 0x38
 800226a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800226c:	fa92 f2a2 	rbit	r2, r2
 8002270:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002274:	fab2 f282 	clz	r2, r2
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	f042 0220 	orr.w	r2, r2, #32
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f002 021f 	and.w	r2, r2, #31
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f202 	lsl.w	r2, r1, r2
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d13a      	bne.n	8002306 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b2      	b.n	80023fa <HAL_RCC_ClockConfig+0x2de>
 8002294:	2302      	movs	r3, #2
 8002296:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d102      	bne.n	80022bc <HAL_RCC_ClockConfig+0x1a0>
 80022b6:	4b31      	ldr	r3, [pc, #196]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	e00d      	b.n	80022d8 <HAL_RCC_ClockConfig+0x1bc>
 80022bc:	2302      	movs	r3, #2
 80022be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c8:	2302      	movs	r3, #2
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	4b29      	ldr	r3, [pc, #164]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	2202      	movs	r2, #2
 80022da:	61ba      	str	r2, [r7, #24]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	fa92 f2a2 	rbit	r2, r2
 80022e2:	617a      	str	r2, [r7, #20]
  return result;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	fab2 f282 	clz	r2, r2
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f042 0220 	orr.w	r2, r2, #32
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	f002 021f 	and.w	r2, r2, #31
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f202 	lsl.w	r2, r1, r2
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e079      	b.n	80023fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	491a      	ldr	r1, [pc, #104]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7fe fad4 	bl	80008c4 <HAL_GetTick>
 800231c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7fe fad0 	bl	80008c4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e061      	b.n	80023fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_RCC_ClockConfig+0x25c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d214      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_RCC_ClockConfig+0x25c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4906      	ldr	r1, [pc, #24]	@ (8002378 <HAL_RCC_ClockConfig+0x25c>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <HAL_RCC_ClockConfig+0x25c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e040      	b.n	80023fa <HAL_RCC_ClockConfig+0x2de>
 8002378:	40022000 	.word	0x40022000
 800237c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238c:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <HAL_RCC_ClockConfig+0x2e8>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	491a      	ldr	r1, [pc, #104]	@ (8002404 <HAL_RCC_ClockConfig+0x2e8>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023aa:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <HAL_RCC_ClockConfig+0x2e8>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4912      	ldr	r1, [pc, #72]	@ (8002404 <HAL_RCC_ClockConfig+0x2e8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023be:	f000 f829 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023c2:	4601      	mov	r1, r0
 80023c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002404 <HAL_RCC_ClockConfig+0x2e8>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023cc:	22f0      	movs	r2, #240	@ 0xf0
 80023ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	fa92 f2a2 	rbit	r2, r2
 80023d6:	60fa      	str	r2, [r7, #12]
  return result;
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	40d3      	lsrs	r3, r2
 80023e2:	4a09      	ldr	r2, [pc, #36]	@ (8002408 <HAL_RCC_ClockConfig+0x2ec>)
 80023e4:	5cd3      	ldrb	r3, [r2, r3]
 80023e6:	fa21 f303 	lsr.w	r3, r1, r3
 80023ea:	4a08      	ldr	r2, [pc, #32]	@ (800240c <HAL_RCC_ClockConfig+0x2f0>)
 80023ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023ee:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <HAL_RCC_ClockConfig+0x2f4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fa22 	bl	800083c <HAL_InitTick>
  
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3778      	adds	r7, #120	@ 0x78
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	08003c30 	.word	0x08003c30
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d002      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x30>
 800243e:	2b08      	cmp	r3, #8
 8002440:	d003      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0x36>
 8002442:	e026      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002444:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002446:	613b      	str	r3, [r7, #16]
      break;
 8002448:	e026      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	0c9b      	lsrs	r3, r3, #18
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	4a17      	ldr	r2, [pc, #92]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002454:	5cd3      	ldrb	r3, [r2, r3]
 8002456:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002458:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002470:	4a0e      	ldr	r2, [pc, #56]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	fbb2 f2f3 	udiv	r2, r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e004      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a0c      	ldr	r2, [pc, #48]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
      break;
 8002490:	e002      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002494:	613b      	str	r3, [r7, #16]
      break;
 8002496:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002498:	693b      	ldr	r3, [r7, #16]
}
 800249a:	4618      	mov	r0, r3
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	007a1200 	.word	0x007a1200
 80024b0:	08003c48 	.word	0x08003c48
 80024b4:	08003c58 	.word	0x08003c58
 80024b8:	003d0900 	.word	0x003d0900

080024bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c0:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000000 	.word	0x20000000

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024da:	f7ff ffef 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024de:	4601      	mov	r1, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024e8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80024ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	fa92 f2a2 	rbit	r2, r2
 80024f4:	603a      	str	r2, [r7, #0]
  return result;
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	fab2 f282 	clz	r2, r2
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	40d3      	lsrs	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08003c40 	.word	0x08003c40

08002518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800251e:	f7ff ffcd 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002522:	4601      	mov	r1, r0
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800252c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002530:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	fa92 f2a2 	rbit	r2, r2
 8002538:	603a      	str	r2, [r7, #0]
  return result;
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	40d3      	lsrs	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	08003c40 	.word	0x08003c40

0800255c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e040      	b.n	80025f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fd ffda 	bl	8000538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	@ 0x24
 8002588:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0201 	bic.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f9e8 	bl	8002978 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f8af 	bl	800270c <UART_SetConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e01b      	b.n	80025f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fa67 	bl	8002abc <UART_CheckIdleState>
 80025ee:	4603      	mov	r3, r0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800260c:	2b20      	cmp	r3, #32
 800260e:	d177      	bne.n	8002700 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_UART_Transmit+0x24>
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e070      	b.n	8002702 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2221      	movs	r2, #33	@ 0x21
 800262c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800262e:	f7fe f949 	bl	80008c4 <HAL_GetTick>
 8002632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	88fa      	ldrh	r2, [r7, #6]
 8002638:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800264c:	d108      	bne.n	8002660 <HAL_UART_Transmit+0x68>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d104      	bne.n	8002660 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	e003      	b.n	8002668 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002668:	e02f      	b.n	80026ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2200      	movs	r2, #0
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fac9 	bl	8002c0c <UART_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e03b      	b.n	8002702 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	881a      	ldrh	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800269c:	b292      	uxth	r2, r2
 800269e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	3302      	adds	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e007      	b.n	80026b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1c9      	bne.n	800266a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2200      	movs	r2, #0
 80026de:	2140      	movs	r1, #64	@ 0x40
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fa93 	bl	8002c0c <UART_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e005      	b.n	8002702 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b8a      	ldr	r3, [pc, #552]	@ (8002960 <UART_SetConfig+0x254>)
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	6979      	ldr	r1, [r7, #20]
 8002740:	430b      	orrs	r3, r1
 8002742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	430a      	orrs	r2, r1
 800277c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a78      	ldr	r2, [pc, #480]	@ (8002964 <UART_SetConfig+0x258>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d120      	bne.n	80027ca <UART_SetConfig+0xbe>
 8002788:	4b77      	ldr	r3, [pc, #476]	@ (8002968 <UART_SetConfig+0x25c>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b03      	cmp	r3, #3
 8002792:	d817      	bhi.n	80027c4 <UART_SetConfig+0xb8>
 8002794:	a201      	add	r2, pc, #4	@ (adr r2, 800279c <UART_SetConfig+0x90>)
 8002796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279a:	bf00      	nop
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027b9 	.word	0x080027b9
 80027a4:	080027bf 	.word	0x080027bf
 80027a8:	080027b3 	.word	0x080027b3
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e01d      	b.n	80027ee <UART_SetConfig+0xe2>
 80027b2:	2302      	movs	r3, #2
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e01a      	b.n	80027ee <UART_SetConfig+0xe2>
 80027b8:	2304      	movs	r3, #4
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e017      	b.n	80027ee <UART_SetConfig+0xe2>
 80027be:	2308      	movs	r3, #8
 80027c0:	77fb      	strb	r3, [r7, #31]
 80027c2:	e014      	b.n	80027ee <UART_SetConfig+0xe2>
 80027c4:	2310      	movs	r3, #16
 80027c6:	77fb      	strb	r3, [r7, #31]
 80027c8:	e011      	b.n	80027ee <UART_SetConfig+0xe2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a67      	ldr	r2, [pc, #412]	@ (800296c <UART_SetConfig+0x260>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d102      	bne.n	80027da <UART_SetConfig+0xce>
 80027d4:	2300      	movs	r3, #0
 80027d6:	77fb      	strb	r3, [r7, #31]
 80027d8:	e009      	b.n	80027ee <UART_SetConfig+0xe2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a64      	ldr	r2, [pc, #400]	@ (8002970 <UART_SetConfig+0x264>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <UART_SetConfig+0xde>
 80027e4:	2300      	movs	r3, #0
 80027e6:	77fb      	strb	r3, [r7, #31]
 80027e8:	e001      	b.n	80027ee <UART_SetConfig+0xe2>
 80027ea:	2310      	movs	r3, #16
 80027ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027f6:	d15a      	bne.n	80028ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80027f8:	7ffb      	ldrb	r3, [r7, #31]
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d827      	bhi.n	800284e <UART_SetConfig+0x142>
 80027fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002804 <UART_SetConfig+0xf8>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	08002829 	.word	0x08002829
 8002808:	08002831 	.word	0x08002831
 800280c:	08002839 	.word	0x08002839
 8002810:	0800284f 	.word	0x0800284f
 8002814:	0800283f 	.word	0x0800283f
 8002818:	0800284f 	.word	0x0800284f
 800281c:	0800284f 	.word	0x0800284f
 8002820:	0800284f 	.word	0x0800284f
 8002824:	08002847 	.word	0x08002847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002828:	f7ff fe54 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 800282c:	61b8      	str	r0, [r7, #24]
        break;
 800282e:	e013      	b.n	8002858 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002830:	f7ff fe72 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 8002834:	61b8      	str	r0, [r7, #24]
        break;
 8002836:	e00f      	b.n	8002858 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002838:	4b4e      	ldr	r3, [pc, #312]	@ (8002974 <UART_SetConfig+0x268>)
 800283a:	61bb      	str	r3, [r7, #24]
        break;
 800283c:	e00c      	b.n	8002858 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800283e:	f7ff fde9 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 8002842:	61b8      	str	r0, [r7, #24]
        break;
 8002844:	e008      	b.n	8002858 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800284a:	61bb      	str	r3, [r7, #24]
        break;
 800284c:	e004      	b.n	8002858 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	77bb      	strb	r3, [r7, #30]
        break;
 8002856:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d074      	beq.n	8002948 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	005a      	lsls	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	441a      	add	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	d916      	bls.n	80028a8 <UART_SetConfig+0x19c>
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002880:	d212      	bcs.n	80028a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f023 030f 	bic.w	r3, r3, #15
 800288a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	b29b      	uxth	r3, r3
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	b29a      	uxth	r2, r3
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	4313      	orrs	r3, r2
 800289c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	89fa      	ldrh	r2, [r7, #14]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	e04f      	b.n	8002948 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	77bb      	strb	r3, [r7, #30]
 80028ac:	e04c      	b.n	8002948 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d828      	bhi.n	8002906 <UART_SetConfig+0x1fa>
 80028b4:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <UART_SetConfig+0x1b0>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028e1 	.word	0x080028e1
 80028c0:	080028e9 	.word	0x080028e9
 80028c4:	080028f1 	.word	0x080028f1
 80028c8:	08002907 	.word	0x08002907
 80028cc:	080028f7 	.word	0x080028f7
 80028d0:	08002907 	.word	0x08002907
 80028d4:	08002907 	.word	0x08002907
 80028d8:	08002907 	.word	0x08002907
 80028dc:	080028ff 	.word	0x080028ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e0:	f7ff fdf8 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 80028e4:	61b8      	str	r0, [r7, #24]
        break;
 80028e6:	e013      	b.n	8002910 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028e8:	f7ff fe16 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 80028ec:	61b8      	str	r0, [r7, #24]
        break;
 80028ee:	e00f      	b.n	8002910 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028f0:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <UART_SetConfig+0x268>)
 80028f2:	61bb      	str	r3, [r7, #24]
        break;
 80028f4:	e00c      	b.n	8002910 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028f6:	f7ff fd8d 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80028fa:	61b8      	str	r0, [r7, #24]
        break;
 80028fc:	e008      	b.n	8002910 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002902:	61bb      	str	r3, [r7, #24]
        break;
 8002904:	e004      	b.n	8002910 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	77bb      	strb	r3, [r7, #30]
        break;
 800290e:	bf00      	nop
    }

    if (pclk != 0U)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d018      	beq.n	8002948 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	085a      	lsrs	r2, r3, #1
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	441a      	add	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b0f      	cmp	r3, #15
 800292e:	d909      	bls.n	8002944 <UART_SetConfig+0x238>
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002936:	d205      	bcs.n	8002944 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	e001      	b.n	8002948 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002954:	7fbb      	ldrb	r3, [r7, #30]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	efff69f3 	.word	0xefff69f3
 8002964:	40013800 	.word	0x40013800
 8002968:	40021000 	.word	0x40021000
 800296c:	40004400 	.word	0x40004400
 8002970:	40004800 	.word	0x40004800
 8002974:	007a1200 	.word	0x007a1200

08002978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01a      	beq.n	8002a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a76:	d10a      	bne.n	8002a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	605a      	str	r2, [r3, #4]
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b098      	sub	sp, #96	@ 0x60
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002acc:	f7fd fefa 	bl	80008c4 <HAL_GetTick>
 8002ad0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d12e      	bne.n	8002b3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f88c 	bl	8002c0c <UART_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d021      	beq.n	8002b3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e6      	bne.n	8002afa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e062      	b.n	8002c04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d149      	bne.n	8002be0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	2200      	movs	r2, #0
 8002b56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f856 	bl	8002c0c <UART_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d03c      	beq.n	8002be0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	623b      	str	r3, [r7, #32]
   return(result);
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e6      	bne.n	8002b66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	e853 3f00 	ldrex	r3, [r3]
 8002ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bb8:	61fa      	str	r2, [r7, #28]
 8002bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbc:	69b9      	ldr	r1, [r7, #24]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	e841 2300 	strex	r3, r2, [r1]
 8002bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e5      	bne.n	8002b98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e011      	b.n	8002c04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3758      	adds	r7, #88	@ 0x58
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1c:	e04f      	b.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d04b      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7fd fe4d 	bl	80008c4 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e04e      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d037      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b80      	cmp	r3, #128	@ 0x80
 8002c52:	d034      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b40      	cmp	r3, #64	@ 0x40
 8002c58:	d031      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d110      	bne.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f838 	bl	8002ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e029      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c98:	d111      	bne.n	8002cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f81e 	bl	8002ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e00f      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d0a0      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b095      	sub	sp, #84	@ 0x54
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e6      	bne.n	8002cee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3308      	adds	r3, #8
 8002d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e5      	bne.n	8002d20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d118      	bne.n	8002d8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f023 0310 	bic.w	r3, r3, #16
 8002d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6979      	ldr	r1, [r7, #20]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	613b      	str	r3, [r7, #16]
   return(result);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e6      	bne.n	8002d5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002da2:	bf00      	nop
 8002da4:	3754      	adds	r7, #84	@ 0x54
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <std>:
 8002db0:	2300      	movs	r3, #0
 8002db2:	b510      	push	{r4, lr}
 8002db4:	4604      	mov	r4, r0
 8002db6:	e9c0 3300 	strd	r3, r3, [r0]
 8002dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dbe:	6083      	str	r3, [r0, #8]
 8002dc0:	8181      	strh	r1, [r0, #12]
 8002dc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002dc4:	81c2      	strh	r2, [r0, #14]
 8002dc6:	6183      	str	r3, [r0, #24]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	2208      	movs	r2, #8
 8002dcc:	305c      	adds	r0, #92	@ 0x5c
 8002dce:	f000 f906 	bl	8002fde <memset>
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <std+0x58>)
 8002dd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <std+0x5c>)
 8002dd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002dda:	4b0d      	ldr	r3, [pc, #52]	@ (8002e10 <std+0x60>)
 8002ddc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002dde:	4b0d      	ldr	r3, [pc, #52]	@ (8002e14 <std+0x64>)
 8002de0:	6323      	str	r3, [r4, #48]	@ 0x30
 8002de2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <std+0x68>)
 8002de4:	6224      	str	r4, [r4, #32]
 8002de6:	429c      	cmp	r4, r3
 8002de8:	d006      	beq.n	8002df8 <std+0x48>
 8002dea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002dee:	4294      	cmp	r4, r2
 8002df0:	d002      	beq.n	8002df8 <std+0x48>
 8002df2:	33d0      	adds	r3, #208	@ 0xd0
 8002df4:	429c      	cmp	r4, r3
 8002df6:	d105      	bne.n	8002e04 <std+0x54>
 8002df8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e00:	f000 b966 	b.w	80030d0 <__retarget_lock_init_recursive>
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop
 8002e08:	08002f59 	.word	0x08002f59
 8002e0c:	08002f7b 	.word	0x08002f7b
 8002e10:	08002fb3 	.word	0x08002fb3
 8002e14:	08002fd7 	.word	0x08002fd7
 8002e18:	2000015c 	.word	0x2000015c

08002e1c <stdio_exit_handler>:
 8002e1c:	4a02      	ldr	r2, [pc, #8]	@ (8002e28 <stdio_exit_handler+0xc>)
 8002e1e:	4903      	ldr	r1, [pc, #12]	@ (8002e2c <stdio_exit_handler+0x10>)
 8002e20:	4803      	ldr	r0, [pc, #12]	@ (8002e30 <stdio_exit_handler+0x14>)
 8002e22:	f000 b869 	b.w	8002ef8 <_fwalk_sglue>
 8002e26:	bf00      	nop
 8002e28:	2000000c 	.word	0x2000000c
 8002e2c:	08003971 	.word	0x08003971
 8002e30:	2000001c 	.word	0x2000001c

08002e34 <cleanup_stdio>:
 8002e34:	6841      	ldr	r1, [r0, #4]
 8002e36:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <cleanup_stdio+0x34>)
 8002e38:	4299      	cmp	r1, r3
 8002e3a:	b510      	push	{r4, lr}
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	d001      	beq.n	8002e44 <cleanup_stdio+0x10>
 8002e40:	f000 fd96 	bl	8003970 <_fflush_r>
 8002e44:	68a1      	ldr	r1, [r4, #8]
 8002e46:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <cleanup_stdio+0x38>)
 8002e48:	4299      	cmp	r1, r3
 8002e4a:	d002      	beq.n	8002e52 <cleanup_stdio+0x1e>
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f000 fd8f 	bl	8003970 <_fflush_r>
 8002e52:	68e1      	ldr	r1, [r4, #12]
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <cleanup_stdio+0x3c>)
 8002e56:	4299      	cmp	r1, r3
 8002e58:	d004      	beq.n	8002e64 <cleanup_stdio+0x30>
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e60:	f000 bd86 	b.w	8003970 <_fflush_r>
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	bf00      	nop
 8002e68:	2000015c 	.word	0x2000015c
 8002e6c:	200001c4 	.word	0x200001c4
 8002e70:	2000022c 	.word	0x2000022c

08002e74 <global_stdio_init.part.0>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <global_stdio_init.part.0+0x30>)
 8002e78:	4c0b      	ldr	r4, [pc, #44]	@ (8002ea8 <global_stdio_init.part.0+0x34>)
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002eac <global_stdio_init.part.0+0x38>)
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	4620      	mov	r0, r4
 8002e80:	2200      	movs	r2, #0
 8002e82:	2104      	movs	r1, #4
 8002e84:	f7ff ff94 	bl	8002db0 <std>
 8002e88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2109      	movs	r1, #9
 8002e90:	f7ff ff8e 	bl	8002db0 <std>
 8002e94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e98:	2202      	movs	r2, #2
 8002e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e9e:	2112      	movs	r1, #18
 8002ea0:	f7ff bf86 	b.w	8002db0 <std>
 8002ea4:	20000294 	.word	0x20000294
 8002ea8:	2000015c 	.word	0x2000015c
 8002eac:	08002e1d 	.word	0x08002e1d

08002eb0 <__sfp_lock_acquire>:
 8002eb0:	4801      	ldr	r0, [pc, #4]	@ (8002eb8 <__sfp_lock_acquire+0x8>)
 8002eb2:	f000 b90e 	b.w	80030d2 <__retarget_lock_acquire_recursive>
 8002eb6:	bf00      	nop
 8002eb8:	2000029d 	.word	0x2000029d

08002ebc <__sfp_lock_release>:
 8002ebc:	4801      	ldr	r0, [pc, #4]	@ (8002ec4 <__sfp_lock_release+0x8>)
 8002ebe:	f000 b909 	b.w	80030d4 <__retarget_lock_release_recursive>
 8002ec2:	bf00      	nop
 8002ec4:	2000029d 	.word	0x2000029d

08002ec8 <__sinit>:
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	4604      	mov	r4, r0
 8002ecc:	f7ff fff0 	bl	8002eb0 <__sfp_lock_acquire>
 8002ed0:	6a23      	ldr	r3, [r4, #32]
 8002ed2:	b11b      	cbz	r3, 8002edc <__sinit+0x14>
 8002ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed8:	f7ff bff0 	b.w	8002ebc <__sfp_lock_release>
 8002edc:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <__sinit+0x28>)
 8002ede:	6223      	str	r3, [r4, #32]
 8002ee0:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <__sinit+0x2c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f5      	bne.n	8002ed4 <__sinit+0xc>
 8002ee8:	f7ff ffc4 	bl	8002e74 <global_stdio_init.part.0>
 8002eec:	e7f2      	b.n	8002ed4 <__sinit+0xc>
 8002eee:	bf00      	nop
 8002ef0:	08002e35 	.word	0x08002e35
 8002ef4:	20000294 	.word	0x20000294

08002ef8 <_fwalk_sglue>:
 8002ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002efc:	4607      	mov	r7, r0
 8002efe:	4688      	mov	r8, r1
 8002f00:	4614      	mov	r4, r2
 8002f02:	2600      	movs	r6, #0
 8002f04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f08:	f1b9 0901 	subs.w	r9, r9, #1
 8002f0c:	d505      	bpl.n	8002f1a <_fwalk_sglue+0x22>
 8002f0e:	6824      	ldr	r4, [r4, #0]
 8002f10:	2c00      	cmp	r4, #0
 8002f12:	d1f7      	bne.n	8002f04 <_fwalk_sglue+0xc>
 8002f14:	4630      	mov	r0, r6
 8002f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f1a:	89ab      	ldrh	r3, [r5, #12]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d907      	bls.n	8002f30 <_fwalk_sglue+0x38>
 8002f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f24:	3301      	adds	r3, #1
 8002f26:	d003      	beq.n	8002f30 <_fwalk_sglue+0x38>
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	47c0      	blx	r8
 8002f2e:	4306      	orrs	r6, r0
 8002f30:	3568      	adds	r5, #104	@ 0x68
 8002f32:	e7e9      	b.n	8002f08 <_fwalk_sglue+0x10>

08002f34 <iprintf>:
 8002f34:	b40f      	push	{r0, r1, r2, r3}
 8002f36:	b507      	push	{r0, r1, r2, lr}
 8002f38:	4906      	ldr	r1, [pc, #24]	@ (8002f54 <iprintf+0x20>)
 8002f3a:	ab04      	add	r3, sp, #16
 8002f3c:	6808      	ldr	r0, [r1, #0]
 8002f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f42:	6881      	ldr	r1, [r0, #8]
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	f000 f9e9 	bl	800331c <_vfiprintf_r>
 8002f4a:	b003      	add	sp, #12
 8002f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f50:	b004      	add	sp, #16
 8002f52:	4770      	bx	lr
 8002f54:	20000018 	.word	0x20000018

08002f58 <__sread>:
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f60:	f000 f868 	bl	8003034 <_read_r>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	bfab      	itete	ge
 8002f68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8002f6c:	181b      	addge	r3, r3, r0
 8002f6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f72:	bfac      	ite	ge
 8002f74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f76:	81a3      	strhlt	r3, [r4, #12]
 8002f78:	bd10      	pop	{r4, pc}

08002f7a <__swrite>:
 8002f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f7e:	461f      	mov	r7, r3
 8002f80:	898b      	ldrh	r3, [r1, #12]
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	4605      	mov	r5, r0
 8002f86:	460c      	mov	r4, r1
 8002f88:	4616      	mov	r6, r2
 8002f8a:	d505      	bpl.n	8002f98 <__swrite+0x1e>
 8002f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f90:	2302      	movs	r3, #2
 8002f92:	2200      	movs	r2, #0
 8002f94:	f000 f83c 	bl	8003010 <_lseek_r>
 8002f98:	89a3      	ldrh	r3, [r4, #12]
 8002f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fa2:	81a3      	strh	r3, [r4, #12]
 8002fa4:	4632      	mov	r2, r6
 8002fa6:	463b      	mov	r3, r7
 8002fa8:	4628      	mov	r0, r5
 8002faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fae:	f000 b853 	b.w	8003058 <_write_r>

08002fb2 <__sseek>:
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fba:	f000 f829 	bl	8003010 <_lseek_r>
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	bf15      	itete	ne
 8002fc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fce:	81a3      	strheq	r3, [r4, #12]
 8002fd0:	bf18      	it	ne
 8002fd2:	81a3      	strhne	r3, [r4, #12]
 8002fd4:	bd10      	pop	{r4, pc}

08002fd6 <__sclose>:
 8002fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fda:	f000 b809 	b.w	8002ff0 <_close_r>

08002fde <memset>:
 8002fde:	4402      	add	r2, r0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d100      	bne.n	8002fe8 <memset+0xa>
 8002fe6:	4770      	bx	lr
 8002fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8002fec:	e7f9      	b.n	8002fe2 <memset+0x4>
	...

08002ff0 <_close_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	4d06      	ldr	r5, [pc, #24]	@ (800300c <_close_r+0x1c>)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	602b      	str	r3, [r5, #0]
 8002ffc:	f7fd fb61 	bl	80006c2 <_close>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d102      	bne.n	800300a <_close_r+0x1a>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	b103      	cbz	r3, 800300a <_close_r+0x1a>
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	bd38      	pop	{r3, r4, r5, pc}
 800300c:	20000298 	.word	0x20000298

08003010 <_lseek_r>:
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4d07      	ldr	r5, [pc, #28]	@ (8003030 <_lseek_r+0x20>)
 8003014:	4604      	mov	r4, r0
 8003016:	4608      	mov	r0, r1
 8003018:	4611      	mov	r1, r2
 800301a:	2200      	movs	r2, #0
 800301c:	602a      	str	r2, [r5, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	f7fd fb76 	bl	8000710 <_lseek>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d102      	bne.n	800302e <_lseek_r+0x1e>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	b103      	cbz	r3, 800302e <_lseek_r+0x1e>
 800302c:	6023      	str	r3, [r4, #0]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	20000298 	.word	0x20000298

08003034 <_read_r>:
 8003034:	b538      	push	{r3, r4, r5, lr}
 8003036:	4d07      	ldr	r5, [pc, #28]	@ (8003054 <_read_r+0x20>)
 8003038:	4604      	mov	r4, r0
 800303a:	4608      	mov	r0, r1
 800303c:	4611      	mov	r1, r2
 800303e:	2200      	movs	r2, #0
 8003040:	602a      	str	r2, [r5, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	f7fd fb20 	bl	8000688 <_read>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_read_r+0x1e>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	b103      	cbz	r3, 8003052 <_read_r+0x1e>
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	20000298 	.word	0x20000298

08003058 <_write_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	4d07      	ldr	r5, [pc, #28]	@ (8003078 <_write_r+0x20>)
 800305c:	4604      	mov	r4, r0
 800305e:	4608      	mov	r0, r1
 8003060:	4611      	mov	r1, r2
 8003062:	2200      	movs	r2, #0
 8003064:	602a      	str	r2, [r5, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	f7fd fa26 	bl	80004b8 <_write>
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	d102      	bne.n	8003076 <_write_r+0x1e>
 8003070:	682b      	ldr	r3, [r5, #0]
 8003072:	b103      	cbz	r3, 8003076 <_write_r+0x1e>
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	bd38      	pop	{r3, r4, r5, pc}
 8003078:	20000298 	.word	0x20000298

0800307c <__errno>:
 800307c:	4b01      	ldr	r3, [pc, #4]	@ (8003084 <__errno+0x8>)
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000018 	.word	0x20000018

08003088 <__libc_init_array>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4d0d      	ldr	r5, [pc, #52]	@ (80030c0 <__libc_init_array+0x38>)
 800308c:	4c0d      	ldr	r4, [pc, #52]	@ (80030c4 <__libc_init_array+0x3c>)
 800308e:	1b64      	subs	r4, r4, r5
 8003090:	10a4      	asrs	r4, r4, #2
 8003092:	2600      	movs	r6, #0
 8003094:	42a6      	cmp	r6, r4
 8003096:	d109      	bne.n	80030ac <__libc_init_array+0x24>
 8003098:	4d0b      	ldr	r5, [pc, #44]	@ (80030c8 <__libc_init_array+0x40>)
 800309a:	4c0c      	ldr	r4, [pc, #48]	@ (80030cc <__libc_init_array+0x44>)
 800309c:	f000 fdb8 	bl	8003c10 <_init>
 80030a0:	1b64      	subs	r4, r4, r5
 80030a2:	10a4      	asrs	r4, r4, #2
 80030a4:	2600      	movs	r6, #0
 80030a6:	42a6      	cmp	r6, r4
 80030a8:	d105      	bne.n	80030b6 <__libc_init_array+0x2e>
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b0:	4798      	blx	r3
 80030b2:	3601      	adds	r6, #1
 80030b4:	e7ee      	b.n	8003094 <__libc_init_array+0xc>
 80030b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ba:	4798      	blx	r3
 80030bc:	3601      	adds	r6, #1
 80030be:	e7f2      	b.n	80030a6 <__libc_init_array+0x1e>
 80030c0:	08003ca4 	.word	0x08003ca4
 80030c4:	08003ca4 	.word	0x08003ca4
 80030c8:	08003ca4 	.word	0x08003ca4
 80030cc:	08003ca8 	.word	0x08003ca8

080030d0 <__retarget_lock_init_recursive>:
 80030d0:	4770      	bx	lr

080030d2 <__retarget_lock_acquire_recursive>:
 80030d2:	4770      	bx	lr

080030d4 <__retarget_lock_release_recursive>:
 80030d4:	4770      	bx	lr
	...

080030d8 <_free_r>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	4605      	mov	r5, r0
 80030dc:	2900      	cmp	r1, #0
 80030de:	d041      	beq.n	8003164 <_free_r+0x8c>
 80030e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030e4:	1f0c      	subs	r4, r1, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bfb8      	it	lt
 80030ea:	18e4      	addlt	r4, r4, r3
 80030ec:	f000 f8e0 	bl	80032b0 <__malloc_lock>
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <_free_r+0x90>)
 80030f2:	6813      	ldr	r3, [r2, #0]
 80030f4:	b933      	cbnz	r3, 8003104 <_free_r+0x2c>
 80030f6:	6063      	str	r3, [r4, #4]
 80030f8:	6014      	str	r4, [r2, #0]
 80030fa:	4628      	mov	r0, r5
 80030fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003100:	f000 b8dc 	b.w	80032bc <__malloc_unlock>
 8003104:	42a3      	cmp	r3, r4
 8003106:	d908      	bls.n	800311a <_free_r+0x42>
 8003108:	6820      	ldr	r0, [r4, #0]
 800310a:	1821      	adds	r1, r4, r0
 800310c:	428b      	cmp	r3, r1
 800310e:	bf01      	itttt	eq
 8003110:	6819      	ldreq	r1, [r3, #0]
 8003112:	685b      	ldreq	r3, [r3, #4]
 8003114:	1809      	addeq	r1, r1, r0
 8003116:	6021      	streq	r1, [r4, #0]
 8003118:	e7ed      	b.n	80030f6 <_free_r+0x1e>
 800311a:	461a      	mov	r2, r3
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	b10b      	cbz	r3, 8003124 <_free_r+0x4c>
 8003120:	42a3      	cmp	r3, r4
 8003122:	d9fa      	bls.n	800311a <_free_r+0x42>
 8003124:	6811      	ldr	r1, [r2, #0]
 8003126:	1850      	adds	r0, r2, r1
 8003128:	42a0      	cmp	r0, r4
 800312a:	d10b      	bne.n	8003144 <_free_r+0x6c>
 800312c:	6820      	ldr	r0, [r4, #0]
 800312e:	4401      	add	r1, r0
 8003130:	1850      	adds	r0, r2, r1
 8003132:	4283      	cmp	r3, r0
 8003134:	6011      	str	r1, [r2, #0]
 8003136:	d1e0      	bne.n	80030fa <_free_r+0x22>
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	6053      	str	r3, [r2, #4]
 800313e:	4408      	add	r0, r1
 8003140:	6010      	str	r0, [r2, #0]
 8003142:	e7da      	b.n	80030fa <_free_r+0x22>
 8003144:	d902      	bls.n	800314c <_free_r+0x74>
 8003146:	230c      	movs	r3, #12
 8003148:	602b      	str	r3, [r5, #0]
 800314a:	e7d6      	b.n	80030fa <_free_r+0x22>
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	1821      	adds	r1, r4, r0
 8003150:	428b      	cmp	r3, r1
 8003152:	bf04      	itt	eq
 8003154:	6819      	ldreq	r1, [r3, #0]
 8003156:	685b      	ldreq	r3, [r3, #4]
 8003158:	6063      	str	r3, [r4, #4]
 800315a:	bf04      	itt	eq
 800315c:	1809      	addeq	r1, r1, r0
 800315e:	6021      	streq	r1, [r4, #0]
 8003160:	6054      	str	r4, [r2, #4]
 8003162:	e7ca      	b.n	80030fa <_free_r+0x22>
 8003164:	bd38      	pop	{r3, r4, r5, pc}
 8003166:	bf00      	nop
 8003168:	200002a4 	.word	0x200002a4

0800316c <sbrk_aligned>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4e0f      	ldr	r6, [pc, #60]	@ (80031ac <sbrk_aligned+0x40>)
 8003170:	460c      	mov	r4, r1
 8003172:	6831      	ldr	r1, [r6, #0]
 8003174:	4605      	mov	r5, r0
 8003176:	b911      	cbnz	r1, 800317e <sbrk_aligned+0x12>
 8003178:	f000 fcb6 	bl	8003ae8 <_sbrk_r>
 800317c:	6030      	str	r0, [r6, #0]
 800317e:	4621      	mov	r1, r4
 8003180:	4628      	mov	r0, r5
 8003182:	f000 fcb1 	bl	8003ae8 <_sbrk_r>
 8003186:	1c43      	adds	r3, r0, #1
 8003188:	d103      	bne.n	8003192 <sbrk_aligned+0x26>
 800318a:	f04f 34ff 	mov.w	r4, #4294967295
 800318e:	4620      	mov	r0, r4
 8003190:	bd70      	pop	{r4, r5, r6, pc}
 8003192:	1cc4      	adds	r4, r0, #3
 8003194:	f024 0403 	bic.w	r4, r4, #3
 8003198:	42a0      	cmp	r0, r4
 800319a:	d0f8      	beq.n	800318e <sbrk_aligned+0x22>
 800319c:	1a21      	subs	r1, r4, r0
 800319e:	4628      	mov	r0, r5
 80031a0:	f000 fca2 	bl	8003ae8 <_sbrk_r>
 80031a4:	3001      	adds	r0, #1
 80031a6:	d1f2      	bne.n	800318e <sbrk_aligned+0x22>
 80031a8:	e7ef      	b.n	800318a <sbrk_aligned+0x1e>
 80031aa:	bf00      	nop
 80031ac:	200002a0 	.word	0x200002a0

080031b0 <_malloc_r>:
 80031b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b4:	1ccd      	adds	r5, r1, #3
 80031b6:	f025 0503 	bic.w	r5, r5, #3
 80031ba:	3508      	adds	r5, #8
 80031bc:	2d0c      	cmp	r5, #12
 80031be:	bf38      	it	cc
 80031c0:	250c      	movcc	r5, #12
 80031c2:	2d00      	cmp	r5, #0
 80031c4:	4606      	mov	r6, r0
 80031c6:	db01      	blt.n	80031cc <_malloc_r+0x1c>
 80031c8:	42a9      	cmp	r1, r5
 80031ca:	d904      	bls.n	80031d6 <_malloc_r+0x26>
 80031cc:	230c      	movs	r3, #12
 80031ce:	6033      	str	r3, [r6, #0]
 80031d0:	2000      	movs	r0, #0
 80031d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032ac <_malloc_r+0xfc>
 80031da:	f000 f869 	bl	80032b0 <__malloc_lock>
 80031de:	f8d8 3000 	ldr.w	r3, [r8]
 80031e2:	461c      	mov	r4, r3
 80031e4:	bb44      	cbnz	r4, 8003238 <_malloc_r+0x88>
 80031e6:	4629      	mov	r1, r5
 80031e8:	4630      	mov	r0, r6
 80031ea:	f7ff ffbf 	bl	800316c <sbrk_aligned>
 80031ee:	1c43      	adds	r3, r0, #1
 80031f0:	4604      	mov	r4, r0
 80031f2:	d158      	bne.n	80032a6 <_malloc_r+0xf6>
 80031f4:	f8d8 4000 	ldr.w	r4, [r8]
 80031f8:	4627      	mov	r7, r4
 80031fa:	2f00      	cmp	r7, #0
 80031fc:	d143      	bne.n	8003286 <_malloc_r+0xd6>
 80031fe:	2c00      	cmp	r4, #0
 8003200:	d04b      	beq.n	800329a <_malloc_r+0xea>
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	4639      	mov	r1, r7
 8003206:	4630      	mov	r0, r6
 8003208:	eb04 0903 	add.w	r9, r4, r3
 800320c:	f000 fc6c 	bl	8003ae8 <_sbrk_r>
 8003210:	4581      	cmp	r9, r0
 8003212:	d142      	bne.n	800329a <_malloc_r+0xea>
 8003214:	6821      	ldr	r1, [r4, #0]
 8003216:	1a6d      	subs	r5, r5, r1
 8003218:	4629      	mov	r1, r5
 800321a:	4630      	mov	r0, r6
 800321c:	f7ff ffa6 	bl	800316c <sbrk_aligned>
 8003220:	3001      	adds	r0, #1
 8003222:	d03a      	beq.n	800329a <_malloc_r+0xea>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	442b      	add	r3, r5
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	f8d8 3000 	ldr.w	r3, [r8]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	bb62      	cbnz	r2, 800328c <_malloc_r+0xdc>
 8003232:	f8c8 7000 	str.w	r7, [r8]
 8003236:	e00f      	b.n	8003258 <_malloc_r+0xa8>
 8003238:	6822      	ldr	r2, [r4, #0]
 800323a:	1b52      	subs	r2, r2, r5
 800323c:	d420      	bmi.n	8003280 <_malloc_r+0xd0>
 800323e:	2a0b      	cmp	r2, #11
 8003240:	d917      	bls.n	8003272 <_malloc_r+0xc2>
 8003242:	1961      	adds	r1, r4, r5
 8003244:	42a3      	cmp	r3, r4
 8003246:	6025      	str	r5, [r4, #0]
 8003248:	bf18      	it	ne
 800324a:	6059      	strne	r1, [r3, #4]
 800324c:	6863      	ldr	r3, [r4, #4]
 800324e:	bf08      	it	eq
 8003250:	f8c8 1000 	streq.w	r1, [r8]
 8003254:	5162      	str	r2, [r4, r5]
 8003256:	604b      	str	r3, [r1, #4]
 8003258:	4630      	mov	r0, r6
 800325a:	f000 f82f 	bl	80032bc <__malloc_unlock>
 800325e:	f104 000b 	add.w	r0, r4, #11
 8003262:	1d23      	adds	r3, r4, #4
 8003264:	f020 0007 	bic.w	r0, r0, #7
 8003268:	1ac2      	subs	r2, r0, r3
 800326a:	bf1c      	itt	ne
 800326c:	1a1b      	subne	r3, r3, r0
 800326e:	50a3      	strne	r3, [r4, r2]
 8003270:	e7af      	b.n	80031d2 <_malloc_r+0x22>
 8003272:	6862      	ldr	r2, [r4, #4]
 8003274:	42a3      	cmp	r3, r4
 8003276:	bf0c      	ite	eq
 8003278:	f8c8 2000 	streq.w	r2, [r8]
 800327c:	605a      	strne	r2, [r3, #4]
 800327e:	e7eb      	b.n	8003258 <_malloc_r+0xa8>
 8003280:	4623      	mov	r3, r4
 8003282:	6864      	ldr	r4, [r4, #4]
 8003284:	e7ae      	b.n	80031e4 <_malloc_r+0x34>
 8003286:	463c      	mov	r4, r7
 8003288:	687f      	ldr	r7, [r7, #4]
 800328a:	e7b6      	b.n	80031fa <_malloc_r+0x4a>
 800328c:	461a      	mov	r2, r3
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	42a3      	cmp	r3, r4
 8003292:	d1fb      	bne.n	800328c <_malloc_r+0xdc>
 8003294:	2300      	movs	r3, #0
 8003296:	6053      	str	r3, [r2, #4]
 8003298:	e7de      	b.n	8003258 <_malloc_r+0xa8>
 800329a:	230c      	movs	r3, #12
 800329c:	6033      	str	r3, [r6, #0]
 800329e:	4630      	mov	r0, r6
 80032a0:	f000 f80c 	bl	80032bc <__malloc_unlock>
 80032a4:	e794      	b.n	80031d0 <_malloc_r+0x20>
 80032a6:	6005      	str	r5, [r0, #0]
 80032a8:	e7d6      	b.n	8003258 <_malloc_r+0xa8>
 80032aa:	bf00      	nop
 80032ac:	200002a4 	.word	0x200002a4

080032b0 <__malloc_lock>:
 80032b0:	4801      	ldr	r0, [pc, #4]	@ (80032b8 <__malloc_lock+0x8>)
 80032b2:	f7ff bf0e 	b.w	80030d2 <__retarget_lock_acquire_recursive>
 80032b6:	bf00      	nop
 80032b8:	2000029c 	.word	0x2000029c

080032bc <__malloc_unlock>:
 80032bc:	4801      	ldr	r0, [pc, #4]	@ (80032c4 <__malloc_unlock+0x8>)
 80032be:	f7ff bf09 	b.w	80030d4 <__retarget_lock_release_recursive>
 80032c2:	bf00      	nop
 80032c4:	2000029c 	.word	0x2000029c

080032c8 <__sfputc_r>:
 80032c8:	6893      	ldr	r3, [r2, #8]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	b410      	push	{r4}
 80032d0:	6093      	str	r3, [r2, #8]
 80032d2:	da08      	bge.n	80032e6 <__sfputc_r+0x1e>
 80032d4:	6994      	ldr	r4, [r2, #24]
 80032d6:	42a3      	cmp	r3, r4
 80032d8:	db01      	blt.n	80032de <__sfputc_r+0x16>
 80032da:	290a      	cmp	r1, #10
 80032dc:	d103      	bne.n	80032e6 <__sfputc_r+0x1e>
 80032de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e2:	f000 bb6d 	b.w	80039c0 <__swbuf_r>
 80032e6:	6813      	ldr	r3, [r2, #0]
 80032e8:	1c58      	adds	r0, r3, #1
 80032ea:	6010      	str	r0, [r2, #0]
 80032ec:	7019      	strb	r1, [r3, #0]
 80032ee:	4608      	mov	r0, r1
 80032f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <__sfputs_r>:
 80032f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f8:	4606      	mov	r6, r0
 80032fa:	460f      	mov	r7, r1
 80032fc:	4614      	mov	r4, r2
 80032fe:	18d5      	adds	r5, r2, r3
 8003300:	42ac      	cmp	r4, r5
 8003302:	d101      	bne.n	8003308 <__sfputs_r+0x12>
 8003304:	2000      	movs	r0, #0
 8003306:	e007      	b.n	8003318 <__sfputs_r+0x22>
 8003308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800330c:	463a      	mov	r2, r7
 800330e:	4630      	mov	r0, r6
 8003310:	f7ff ffda 	bl	80032c8 <__sfputc_r>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d1f3      	bne.n	8003300 <__sfputs_r+0xa>
 8003318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800331c <_vfiprintf_r>:
 800331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003320:	460d      	mov	r5, r1
 8003322:	b09d      	sub	sp, #116	@ 0x74
 8003324:	4614      	mov	r4, r2
 8003326:	4698      	mov	r8, r3
 8003328:	4606      	mov	r6, r0
 800332a:	b118      	cbz	r0, 8003334 <_vfiprintf_r+0x18>
 800332c:	6a03      	ldr	r3, [r0, #32]
 800332e:	b90b      	cbnz	r3, 8003334 <_vfiprintf_r+0x18>
 8003330:	f7ff fdca 	bl	8002ec8 <__sinit>
 8003334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003336:	07d9      	lsls	r1, r3, #31
 8003338:	d405      	bmi.n	8003346 <_vfiprintf_r+0x2a>
 800333a:	89ab      	ldrh	r3, [r5, #12]
 800333c:	059a      	lsls	r2, r3, #22
 800333e:	d402      	bmi.n	8003346 <_vfiprintf_r+0x2a>
 8003340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003342:	f7ff fec6 	bl	80030d2 <__retarget_lock_acquire_recursive>
 8003346:	89ab      	ldrh	r3, [r5, #12]
 8003348:	071b      	lsls	r3, r3, #28
 800334a:	d501      	bpl.n	8003350 <_vfiprintf_r+0x34>
 800334c:	692b      	ldr	r3, [r5, #16]
 800334e:	b99b      	cbnz	r3, 8003378 <_vfiprintf_r+0x5c>
 8003350:	4629      	mov	r1, r5
 8003352:	4630      	mov	r0, r6
 8003354:	f000 fb72 	bl	8003a3c <__swsetup_r>
 8003358:	b170      	cbz	r0, 8003378 <_vfiprintf_r+0x5c>
 800335a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800335c:	07dc      	lsls	r4, r3, #31
 800335e:	d504      	bpl.n	800336a <_vfiprintf_r+0x4e>
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	b01d      	add	sp, #116	@ 0x74
 8003366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336a:	89ab      	ldrh	r3, [r5, #12]
 800336c:	0598      	lsls	r0, r3, #22
 800336e:	d4f7      	bmi.n	8003360 <_vfiprintf_r+0x44>
 8003370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003372:	f7ff feaf 	bl	80030d4 <__retarget_lock_release_recursive>
 8003376:	e7f3      	b.n	8003360 <_vfiprintf_r+0x44>
 8003378:	2300      	movs	r3, #0
 800337a:	9309      	str	r3, [sp, #36]	@ 0x24
 800337c:	2320      	movs	r3, #32
 800337e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003382:	f8cd 800c 	str.w	r8, [sp, #12]
 8003386:	2330      	movs	r3, #48	@ 0x30
 8003388:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003538 <_vfiprintf_r+0x21c>
 800338c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003390:	f04f 0901 	mov.w	r9, #1
 8003394:	4623      	mov	r3, r4
 8003396:	469a      	mov	sl, r3
 8003398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800339c:	b10a      	cbz	r2, 80033a2 <_vfiprintf_r+0x86>
 800339e:	2a25      	cmp	r2, #37	@ 0x25
 80033a0:	d1f9      	bne.n	8003396 <_vfiprintf_r+0x7a>
 80033a2:	ebba 0b04 	subs.w	fp, sl, r4
 80033a6:	d00b      	beq.n	80033c0 <_vfiprintf_r+0xa4>
 80033a8:	465b      	mov	r3, fp
 80033aa:	4622      	mov	r2, r4
 80033ac:	4629      	mov	r1, r5
 80033ae:	4630      	mov	r0, r6
 80033b0:	f7ff ffa1 	bl	80032f6 <__sfputs_r>
 80033b4:	3001      	adds	r0, #1
 80033b6:	f000 80a7 	beq.w	8003508 <_vfiprintf_r+0x1ec>
 80033ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033bc:	445a      	add	r2, fp
 80033be:	9209      	str	r2, [sp, #36]	@ 0x24
 80033c0:	f89a 3000 	ldrb.w	r3, [sl]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 809f 	beq.w	8003508 <_vfiprintf_r+0x1ec>
 80033ca:	2300      	movs	r3, #0
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295
 80033d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033d4:	f10a 0a01 	add.w	sl, sl, #1
 80033d8:	9304      	str	r3, [sp, #16]
 80033da:	9307      	str	r3, [sp, #28]
 80033dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80033e2:	4654      	mov	r4, sl
 80033e4:	2205      	movs	r2, #5
 80033e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ea:	4853      	ldr	r0, [pc, #332]	@ (8003538 <_vfiprintf_r+0x21c>)
 80033ec:	f7fc fef0 	bl	80001d0 <memchr>
 80033f0:	9a04      	ldr	r2, [sp, #16]
 80033f2:	b9d8      	cbnz	r0, 800342c <_vfiprintf_r+0x110>
 80033f4:	06d1      	lsls	r1, r2, #27
 80033f6:	bf44      	itt	mi
 80033f8:	2320      	movmi	r3, #32
 80033fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033fe:	0713      	lsls	r3, r2, #28
 8003400:	bf44      	itt	mi
 8003402:	232b      	movmi	r3, #43	@ 0x2b
 8003404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003408:	f89a 3000 	ldrb.w	r3, [sl]
 800340c:	2b2a      	cmp	r3, #42	@ 0x2a
 800340e:	d015      	beq.n	800343c <_vfiprintf_r+0x120>
 8003410:	9a07      	ldr	r2, [sp, #28]
 8003412:	4654      	mov	r4, sl
 8003414:	2000      	movs	r0, #0
 8003416:	f04f 0c0a 	mov.w	ip, #10
 800341a:	4621      	mov	r1, r4
 800341c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003420:	3b30      	subs	r3, #48	@ 0x30
 8003422:	2b09      	cmp	r3, #9
 8003424:	d94b      	bls.n	80034be <_vfiprintf_r+0x1a2>
 8003426:	b1b0      	cbz	r0, 8003456 <_vfiprintf_r+0x13a>
 8003428:	9207      	str	r2, [sp, #28]
 800342a:	e014      	b.n	8003456 <_vfiprintf_r+0x13a>
 800342c:	eba0 0308 	sub.w	r3, r0, r8
 8003430:	fa09 f303 	lsl.w	r3, r9, r3
 8003434:	4313      	orrs	r3, r2
 8003436:	9304      	str	r3, [sp, #16]
 8003438:	46a2      	mov	sl, r4
 800343a:	e7d2      	b.n	80033e2 <_vfiprintf_r+0xc6>
 800343c:	9b03      	ldr	r3, [sp, #12]
 800343e:	1d19      	adds	r1, r3, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	9103      	str	r1, [sp, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	bfbb      	ittet	lt
 8003448:	425b      	neglt	r3, r3
 800344a:	f042 0202 	orrlt.w	r2, r2, #2
 800344e:	9307      	strge	r3, [sp, #28]
 8003450:	9307      	strlt	r3, [sp, #28]
 8003452:	bfb8      	it	lt
 8003454:	9204      	strlt	r2, [sp, #16]
 8003456:	7823      	ldrb	r3, [r4, #0]
 8003458:	2b2e      	cmp	r3, #46	@ 0x2e
 800345a:	d10a      	bne.n	8003472 <_vfiprintf_r+0x156>
 800345c:	7863      	ldrb	r3, [r4, #1]
 800345e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003460:	d132      	bne.n	80034c8 <_vfiprintf_r+0x1ac>
 8003462:	9b03      	ldr	r3, [sp, #12]
 8003464:	1d1a      	adds	r2, r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	9203      	str	r2, [sp, #12]
 800346a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800346e:	3402      	adds	r4, #2
 8003470:	9305      	str	r3, [sp, #20]
 8003472:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003548 <_vfiprintf_r+0x22c>
 8003476:	7821      	ldrb	r1, [r4, #0]
 8003478:	2203      	movs	r2, #3
 800347a:	4650      	mov	r0, sl
 800347c:	f7fc fea8 	bl	80001d0 <memchr>
 8003480:	b138      	cbz	r0, 8003492 <_vfiprintf_r+0x176>
 8003482:	9b04      	ldr	r3, [sp, #16]
 8003484:	eba0 000a 	sub.w	r0, r0, sl
 8003488:	2240      	movs	r2, #64	@ 0x40
 800348a:	4082      	lsls	r2, r0
 800348c:	4313      	orrs	r3, r2
 800348e:	3401      	adds	r4, #1
 8003490:	9304      	str	r3, [sp, #16]
 8003492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003496:	4829      	ldr	r0, [pc, #164]	@ (800353c <_vfiprintf_r+0x220>)
 8003498:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800349c:	2206      	movs	r2, #6
 800349e:	f7fc fe97 	bl	80001d0 <memchr>
 80034a2:	2800      	cmp	r0, #0
 80034a4:	d03f      	beq.n	8003526 <_vfiprintf_r+0x20a>
 80034a6:	4b26      	ldr	r3, [pc, #152]	@ (8003540 <_vfiprintf_r+0x224>)
 80034a8:	bb1b      	cbnz	r3, 80034f2 <_vfiprintf_r+0x1d6>
 80034aa:	9b03      	ldr	r3, [sp, #12]
 80034ac:	3307      	adds	r3, #7
 80034ae:	f023 0307 	bic.w	r3, r3, #7
 80034b2:	3308      	adds	r3, #8
 80034b4:	9303      	str	r3, [sp, #12]
 80034b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034b8:	443b      	add	r3, r7
 80034ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80034bc:	e76a      	b.n	8003394 <_vfiprintf_r+0x78>
 80034be:	fb0c 3202 	mla	r2, ip, r2, r3
 80034c2:	460c      	mov	r4, r1
 80034c4:	2001      	movs	r0, #1
 80034c6:	e7a8      	b.n	800341a <_vfiprintf_r+0xfe>
 80034c8:	2300      	movs	r3, #0
 80034ca:	3401      	adds	r4, #1
 80034cc:	9305      	str	r3, [sp, #20]
 80034ce:	4619      	mov	r1, r3
 80034d0:	f04f 0c0a 	mov.w	ip, #10
 80034d4:	4620      	mov	r0, r4
 80034d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034da:	3a30      	subs	r2, #48	@ 0x30
 80034dc:	2a09      	cmp	r2, #9
 80034de:	d903      	bls.n	80034e8 <_vfiprintf_r+0x1cc>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0c6      	beq.n	8003472 <_vfiprintf_r+0x156>
 80034e4:	9105      	str	r1, [sp, #20]
 80034e6:	e7c4      	b.n	8003472 <_vfiprintf_r+0x156>
 80034e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80034ec:	4604      	mov	r4, r0
 80034ee:	2301      	movs	r3, #1
 80034f0:	e7f0      	b.n	80034d4 <_vfiprintf_r+0x1b8>
 80034f2:	ab03      	add	r3, sp, #12
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	462a      	mov	r2, r5
 80034f8:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <_vfiprintf_r+0x228>)
 80034fa:	a904      	add	r1, sp, #16
 80034fc:	4630      	mov	r0, r6
 80034fe:	f3af 8000 	nop.w
 8003502:	4607      	mov	r7, r0
 8003504:	1c78      	adds	r0, r7, #1
 8003506:	d1d6      	bne.n	80034b6 <_vfiprintf_r+0x19a>
 8003508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800350a:	07d9      	lsls	r1, r3, #31
 800350c:	d405      	bmi.n	800351a <_vfiprintf_r+0x1fe>
 800350e:	89ab      	ldrh	r3, [r5, #12]
 8003510:	059a      	lsls	r2, r3, #22
 8003512:	d402      	bmi.n	800351a <_vfiprintf_r+0x1fe>
 8003514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003516:	f7ff fddd 	bl	80030d4 <__retarget_lock_release_recursive>
 800351a:	89ab      	ldrh	r3, [r5, #12]
 800351c:	065b      	lsls	r3, r3, #25
 800351e:	f53f af1f 	bmi.w	8003360 <_vfiprintf_r+0x44>
 8003522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003524:	e71e      	b.n	8003364 <_vfiprintf_r+0x48>
 8003526:	ab03      	add	r3, sp, #12
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	462a      	mov	r2, r5
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <_vfiprintf_r+0x228>)
 800352e:	a904      	add	r1, sp, #16
 8003530:	4630      	mov	r0, r6
 8003532:	f000 f879 	bl	8003628 <_printf_i>
 8003536:	e7e4      	b.n	8003502 <_vfiprintf_r+0x1e6>
 8003538:	08003c68 	.word	0x08003c68
 800353c:	08003c72 	.word	0x08003c72
 8003540:	00000000 	.word	0x00000000
 8003544:	080032f7 	.word	0x080032f7
 8003548:	08003c6e 	.word	0x08003c6e

0800354c <_printf_common>:
 800354c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003550:	4616      	mov	r6, r2
 8003552:	4698      	mov	r8, r3
 8003554:	688a      	ldr	r2, [r1, #8]
 8003556:	690b      	ldr	r3, [r1, #16]
 8003558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800355c:	4293      	cmp	r3, r2
 800355e:	bfb8      	it	lt
 8003560:	4613      	movlt	r3, r2
 8003562:	6033      	str	r3, [r6, #0]
 8003564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003568:	4607      	mov	r7, r0
 800356a:	460c      	mov	r4, r1
 800356c:	b10a      	cbz	r2, 8003572 <_printf_common+0x26>
 800356e:	3301      	adds	r3, #1
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	0699      	lsls	r1, r3, #26
 8003576:	bf42      	ittt	mi
 8003578:	6833      	ldrmi	r3, [r6, #0]
 800357a:	3302      	addmi	r3, #2
 800357c:	6033      	strmi	r3, [r6, #0]
 800357e:	6825      	ldr	r5, [r4, #0]
 8003580:	f015 0506 	ands.w	r5, r5, #6
 8003584:	d106      	bne.n	8003594 <_printf_common+0x48>
 8003586:	f104 0a19 	add.w	sl, r4, #25
 800358a:	68e3      	ldr	r3, [r4, #12]
 800358c:	6832      	ldr	r2, [r6, #0]
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	42ab      	cmp	r3, r5
 8003592:	dc26      	bgt.n	80035e2 <_printf_common+0x96>
 8003594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003598:	6822      	ldr	r2, [r4, #0]
 800359a:	3b00      	subs	r3, #0
 800359c:	bf18      	it	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	0692      	lsls	r2, r2, #26
 80035a2:	d42b      	bmi.n	80035fc <_printf_common+0xb0>
 80035a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035a8:	4641      	mov	r1, r8
 80035aa:	4638      	mov	r0, r7
 80035ac:	47c8      	blx	r9
 80035ae:	3001      	adds	r0, #1
 80035b0:	d01e      	beq.n	80035f0 <_printf_common+0xa4>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	6922      	ldr	r2, [r4, #16]
 80035b6:	f003 0306 	and.w	r3, r3, #6
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	bf02      	ittt	eq
 80035be:	68e5      	ldreq	r5, [r4, #12]
 80035c0:	6833      	ldreq	r3, [r6, #0]
 80035c2:	1aed      	subeq	r5, r5, r3
 80035c4:	68a3      	ldr	r3, [r4, #8]
 80035c6:	bf0c      	ite	eq
 80035c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035cc:	2500      	movne	r5, #0
 80035ce:	4293      	cmp	r3, r2
 80035d0:	bfc4      	itt	gt
 80035d2:	1a9b      	subgt	r3, r3, r2
 80035d4:	18ed      	addgt	r5, r5, r3
 80035d6:	2600      	movs	r6, #0
 80035d8:	341a      	adds	r4, #26
 80035da:	42b5      	cmp	r5, r6
 80035dc:	d11a      	bne.n	8003614 <_printf_common+0xc8>
 80035de:	2000      	movs	r0, #0
 80035e0:	e008      	b.n	80035f4 <_printf_common+0xa8>
 80035e2:	2301      	movs	r3, #1
 80035e4:	4652      	mov	r2, sl
 80035e6:	4641      	mov	r1, r8
 80035e8:	4638      	mov	r0, r7
 80035ea:	47c8      	blx	r9
 80035ec:	3001      	adds	r0, #1
 80035ee:	d103      	bne.n	80035f8 <_printf_common+0xac>
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f8:	3501      	adds	r5, #1
 80035fa:	e7c6      	b.n	800358a <_printf_common+0x3e>
 80035fc:	18e1      	adds	r1, r4, r3
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	2030      	movs	r0, #48	@ 0x30
 8003602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003606:	4422      	add	r2, r4
 8003608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800360c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003610:	3302      	adds	r3, #2
 8003612:	e7c7      	b.n	80035a4 <_printf_common+0x58>
 8003614:	2301      	movs	r3, #1
 8003616:	4622      	mov	r2, r4
 8003618:	4641      	mov	r1, r8
 800361a:	4638      	mov	r0, r7
 800361c:	47c8      	blx	r9
 800361e:	3001      	adds	r0, #1
 8003620:	d0e6      	beq.n	80035f0 <_printf_common+0xa4>
 8003622:	3601      	adds	r6, #1
 8003624:	e7d9      	b.n	80035da <_printf_common+0x8e>
	...

08003628 <_printf_i>:
 8003628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800362c:	7e0f      	ldrb	r7, [r1, #24]
 800362e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003630:	2f78      	cmp	r7, #120	@ 0x78
 8003632:	4691      	mov	r9, r2
 8003634:	4680      	mov	r8, r0
 8003636:	460c      	mov	r4, r1
 8003638:	469a      	mov	sl, r3
 800363a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800363e:	d807      	bhi.n	8003650 <_printf_i+0x28>
 8003640:	2f62      	cmp	r7, #98	@ 0x62
 8003642:	d80a      	bhi.n	800365a <_printf_i+0x32>
 8003644:	2f00      	cmp	r7, #0
 8003646:	f000 80d2 	beq.w	80037ee <_printf_i+0x1c6>
 800364a:	2f58      	cmp	r7, #88	@ 0x58
 800364c:	f000 80b9 	beq.w	80037c2 <_printf_i+0x19a>
 8003650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003658:	e03a      	b.n	80036d0 <_printf_i+0xa8>
 800365a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800365e:	2b15      	cmp	r3, #21
 8003660:	d8f6      	bhi.n	8003650 <_printf_i+0x28>
 8003662:	a101      	add	r1, pc, #4	@ (adr r1, 8003668 <_printf_i+0x40>)
 8003664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003668:	080036c1 	.word	0x080036c1
 800366c:	080036d5 	.word	0x080036d5
 8003670:	08003651 	.word	0x08003651
 8003674:	08003651 	.word	0x08003651
 8003678:	08003651 	.word	0x08003651
 800367c:	08003651 	.word	0x08003651
 8003680:	080036d5 	.word	0x080036d5
 8003684:	08003651 	.word	0x08003651
 8003688:	08003651 	.word	0x08003651
 800368c:	08003651 	.word	0x08003651
 8003690:	08003651 	.word	0x08003651
 8003694:	080037d5 	.word	0x080037d5
 8003698:	080036ff 	.word	0x080036ff
 800369c:	0800378f 	.word	0x0800378f
 80036a0:	08003651 	.word	0x08003651
 80036a4:	08003651 	.word	0x08003651
 80036a8:	080037f7 	.word	0x080037f7
 80036ac:	08003651 	.word	0x08003651
 80036b0:	080036ff 	.word	0x080036ff
 80036b4:	08003651 	.word	0x08003651
 80036b8:	08003651 	.word	0x08003651
 80036bc:	08003797 	.word	0x08003797
 80036c0:	6833      	ldr	r3, [r6, #0]
 80036c2:	1d1a      	adds	r2, r3, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6032      	str	r2, [r6, #0]
 80036c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036d0:	2301      	movs	r3, #1
 80036d2:	e09d      	b.n	8003810 <_printf_i+0x1e8>
 80036d4:	6833      	ldr	r3, [r6, #0]
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	1d19      	adds	r1, r3, #4
 80036da:	6031      	str	r1, [r6, #0]
 80036dc:	0606      	lsls	r6, r0, #24
 80036de:	d501      	bpl.n	80036e4 <_printf_i+0xbc>
 80036e0:	681d      	ldr	r5, [r3, #0]
 80036e2:	e003      	b.n	80036ec <_printf_i+0xc4>
 80036e4:	0645      	lsls	r5, r0, #25
 80036e6:	d5fb      	bpl.n	80036e0 <_printf_i+0xb8>
 80036e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036ec:	2d00      	cmp	r5, #0
 80036ee:	da03      	bge.n	80036f8 <_printf_i+0xd0>
 80036f0:	232d      	movs	r3, #45	@ 0x2d
 80036f2:	426d      	negs	r5, r5
 80036f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036f8:	4859      	ldr	r0, [pc, #356]	@ (8003860 <_printf_i+0x238>)
 80036fa:	230a      	movs	r3, #10
 80036fc:	e011      	b.n	8003722 <_printf_i+0xfa>
 80036fe:	6821      	ldr	r1, [r4, #0]
 8003700:	6833      	ldr	r3, [r6, #0]
 8003702:	0608      	lsls	r0, r1, #24
 8003704:	f853 5b04 	ldr.w	r5, [r3], #4
 8003708:	d402      	bmi.n	8003710 <_printf_i+0xe8>
 800370a:	0649      	lsls	r1, r1, #25
 800370c:	bf48      	it	mi
 800370e:	b2ad      	uxthmi	r5, r5
 8003710:	2f6f      	cmp	r7, #111	@ 0x6f
 8003712:	4853      	ldr	r0, [pc, #332]	@ (8003860 <_printf_i+0x238>)
 8003714:	6033      	str	r3, [r6, #0]
 8003716:	bf14      	ite	ne
 8003718:	230a      	movne	r3, #10
 800371a:	2308      	moveq	r3, #8
 800371c:	2100      	movs	r1, #0
 800371e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003722:	6866      	ldr	r6, [r4, #4]
 8003724:	60a6      	str	r6, [r4, #8]
 8003726:	2e00      	cmp	r6, #0
 8003728:	bfa2      	ittt	ge
 800372a:	6821      	ldrge	r1, [r4, #0]
 800372c:	f021 0104 	bicge.w	r1, r1, #4
 8003730:	6021      	strge	r1, [r4, #0]
 8003732:	b90d      	cbnz	r5, 8003738 <_printf_i+0x110>
 8003734:	2e00      	cmp	r6, #0
 8003736:	d04b      	beq.n	80037d0 <_printf_i+0x1a8>
 8003738:	4616      	mov	r6, r2
 800373a:	fbb5 f1f3 	udiv	r1, r5, r3
 800373e:	fb03 5711 	mls	r7, r3, r1, r5
 8003742:	5dc7      	ldrb	r7, [r0, r7]
 8003744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003748:	462f      	mov	r7, r5
 800374a:	42bb      	cmp	r3, r7
 800374c:	460d      	mov	r5, r1
 800374e:	d9f4      	bls.n	800373a <_printf_i+0x112>
 8003750:	2b08      	cmp	r3, #8
 8003752:	d10b      	bne.n	800376c <_printf_i+0x144>
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	07df      	lsls	r7, r3, #31
 8003758:	d508      	bpl.n	800376c <_printf_i+0x144>
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	6861      	ldr	r1, [r4, #4]
 800375e:	4299      	cmp	r1, r3
 8003760:	bfde      	ittt	le
 8003762:	2330      	movle	r3, #48	@ 0x30
 8003764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800376c:	1b92      	subs	r2, r2, r6
 800376e:	6122      	str	r2, [r4, #16]
 8003770:	f8cd a000 	str.w	sl, [sp]
 8003774:	464b      	mov	r3, r9
 8003776:	aa03      	add	r2, sp, #12
 8003778:	4621      	mov	r1, r4
 800377a:	4640      	mov	r0, r8
 800377c:	f7ff fee6 	bl	800354c <_printf_common>
 8003780:	3001      	adds	r0, #1
 8003782:	d14a      	bne.n	800381a <_printf_i+0x1f2>
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	b004      	add	sp, #16
 800378a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	f043 0320 	orr.w	r3, r3, #32
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	4833      	ldr	r0, [pc, #204]	@ (8003864 <_printf_i+0x23c>)
 8003798:	2778      	movs	r7, #120	@ 0x78
 800379a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	6831      	ldr	r1, [r6, #0]
 80037a2:	061f      	lsls	r7, r3, #24
 80037a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80037a8:	d402      	bmi.n	80037b0 <_printf_i+0x188>
 80037aa:	065f      	lsls	r7, r3, #25
 80037ac:	bf48      	it	mi
 80037ae:	b2ad      	uxthmi	r5, r5
 80037b0:	6031      	str	r1, [r6, #0]
 80037b2:	07d9      	lsls	r1, r3, #31
 80037b4:	bf44      	itt	mi
 80037b6:	f043 0320 	orrmi.w	r3, r3, #32
 80037ba:	6023      	strmi	r3, [r4, #0]
 80037bc:	b11d      	cbz	r5, 80037c6 <_printf_i+0x19e>
 80037be:	2310      	movs	r3, #16
 80037c0:	e7ac      	b.n	800371c <_printf_i+0xf4>
 80037c2:	4827      	ldr	r0, [pc, #156]	@ (8003860 <_printf_i+0x238>)
 80037c4:	e7e9      	b.n	800379a <_printf_i+0x172>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	f023 0320 	bic.w	r3, r3, #32
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	e7f6      	b.n	80037be <_printf_i+0x196>
 80037d0:	4616      	mov	r6, r2
 80037d2:	e7bd      	b.n	8003750 <_printf_i+0x128>
 80037d4:	6833      	ldr	r3, [r6, #0]
 80037d6:	6825      	ldr	r5, [r4, #0]
 80037d8:	6961      	ldr	r1, [r4, #20]
 80037da:	1d18      	adds	r0, r3, #4
 80037dc:	6030      	str	r0, [r6, #0]
 80037de:	062e      	lsls	r6, r5, #24
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	d501      	bpl.n	80037e8 <_printf_i+0x1c0>
 80037e4:	6019      	str	r1, [r3, #0]
 80037e6:	e002      	b.n	80037ee <_printf_i+0x1c6>
 80037e8:	0668      	lsls	r0, r5, #25
 80037ea:	d5fb      	bpl.n	80037e4 <_printf_i+0x1bc>
 80037ec:	8019      	strh	r1, [r3, #0]
 80037ee:	2300      	movs	r3, #0
 80037f0:	6123      	str	r3, [r4, #16]
 80037f2:	4616      	mov	r6, r2
 80037f4:	e7bc      	b.n	8003770 <_printf_i+0x148>
 80037f6:	6833      	ldr	r3, [r6, #0]
 80037f8:	1d1a      	adds	r2, r3, #4
 80037fa:	6032      	str	r2, [r6, #0]
 80037fc:	681e      	ldr	r6, [r3, #0]
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	2100      	movs	r1, #0
 8003802:	4630      	mov	r0, r6
 8003804:	f7fc fce4 	bl	80001d0 <memchr>
 8003808:	b108      	cbz	r0, 800380e <_printf_i+0x1e6>
 800380a:	1b80      	subs	r0, r0, r6
 800380c:	6060      	str	r0, [r4, #4]
 800380e:	6863      	ldr	r3, [r4, #4]
 8003810:	6123      	str	r3, [r4, #16]
 8003812:	2300      	movs	r3, #0
 8003814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003818:	e7aa      	b.n	8003770 <_printf_i+0x148>
 800381a:	6923      	ldr	r3, [r4, #16]
 800381c:	4632      	mov	r2, r6
 800381e:	4649      	mov	r1, r9
 8003820:	4640      	mov	r0, r8
 8003822:	47d0      	blx	sl
 8003824:	3001      	adds	r0, #1
 8003826:	d0ad      	beq.n	8003784 <_printf_i+0x15c>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	079b      	lsls	r3, r3, #30
 800382c:	d413      	bmi.n	8003856 <_printf_i+0x22e>
 800382e:	68e0      	ldr	r0, [r4, #12]
 8003830:	9b03      	ldr	r3, [sp, #12]
 8003832:	4298      	cmp	r0, r3
 8003834:	bfb8      	it	lt
 8003836:	4618      	movlt	r0, r3
 8003838:	e7a6      	b.n	8003788 <_printf_i+0x160>
 800383a:	2301      	movs	r3, #1
 800383c:	4632      	mov	r2, r6
 800383e:	4649      	mov	r1, r9
 8003840:	4640      	mov	r0, r8
 8003842:	47d0      	blx	sl
 8003844:	3001      	adds	r0, #1
 8003846:	d09d      	beq.n	8003784 <_printf_i+0x15c>
 8003848:	3501      	adds	r5, #1
 800384a:	68e3      	ldr	r3, [r4, #12]
 800384c:	9903      	ldr	r1, [sp, #12]
 800384e:	1a5b      	subs	r3, r3, r1
 8003850:	42ab      	cmp	r3, r5
 8003852:	dcf2      	bgt.n	800383a <_printf_i+0x212>
 8003854:	e7eb      	b.n	800382e <_printf_i+0x206>
 8003856:	2500      	movs	r5, #0
 8003858:	f104 0619 	add.w	r6, r4, #25
 800385c:	e7f5      	b.n	800384a <_printf_i+0x222>
 800385e:	bf00      	nop
 8003860:	08003c79 	.word	0x08003c79
 8003864:	08003c8a 	.word	0x08003c8a

08003868 <__sflush_r>:
 8003868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800386c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003870:	0716      	lsls	r6, r2, #28
 8003872:	4605      	mov	r5, r0
 8003874:	460c      	mov	r4, r1
 8003876:	d454      	bmi.n	8003922 <__sflush_r+0xba>
 8003878:	684b      	ldr	r3, [r1, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	dc02      	bgt.n	8003884 <__sflush_r+0x1c>
 800387e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	dd48      	ble.n	8003916 <__sflush_r+0xae>
 8003884:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003886:	2e00      	cmp	r6, #0
 8003888:	d045      	beq.n	8003916 <__sflush_r+0xae>
 800388a:	2300      	movs	r3, #0
 800388c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003890:	682f      	ldr	r7, [r5, #0]
 8003892:	6a21      	ldr	r1, [r4, #32]
 8003894:	602b      	str	r3, [r5, #0]
 8003896:	d030      	beq.n	80038fa <__sflush_r+0x92>
 8003898:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	0759      	lsls	r1, r3, #29
 800389e:	d505      	bpl.n	80038ac <__sflush_r+0x44>
 80038a0:	6863      	ldr	r3, [r4, #4]
 80038a2:	1ad2      	subs	r2, r2, r3
 80038a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038a6:	b10b      	cbz	r3, 80038ac <__sflush_r+0x44>
 80038a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038aa:	1ad2      	subs	r2, r2, r3
 80038ac:	2300      	movs	r3, #0
 80038ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038b0:	6a21      	ldr	r1, [r4, #32]
 80038b2:	4628      	mov	r0, r5
 80038b4:	47b0      	blx	r6
 80038b6:	1c43      	adds	r3, r0, #1
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	d106      	bne.n	80038ca <__sflush_r+0x62>
 80038bc:	6829      	ldr	r1, [r5, #0]
 80038be:	291d      	cmp	r1, #29
 80038c0:	d82b      	bhi.n	800391a <__sflush_r+0xb2>
 80038c2:	4a2a      	ldr	r2, [pc, #168]	@ (800396c <__sflush_r+0x104>)
 80038c4:	410a      	asrs	r2, r1
 80038c6:	07d6      	lsls	r6, r2, #31
 80038c8:	d427      	bmi.n	800391a <__sflush_r+0xb2>
 80038ca:	2200      	movs	r2, #0
 80038cc:	6062      	str	r2, [r4, #4]
 80038ce:	04d9      	lsls	r1, r3, #19
 80038d0:	6922      	ldr	r2, [r4, #16]
 80038d2:	6022      	str	r2, [r4, #0]
 80038d4:	d504      	bpl.n	80038e0 <__sflush_r+0x78>
 80038d6:	1c42      	adds	r2, r0, #1
 80038d8:	d101      	bne.n	80038de <__sflush_r+0x76>
 80038da:	682b      	ldr	r3, [r5, #0]
 80038dc:	b903      	cbnz	r3, 80038e0 <__sflush_r+0x78>
 80038de:	6560      	str	r0, [r4, #84]	@ 0x54
 80038e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038e2:	602f      	str	r7, [r5, #0]
 80038e4:	b1b9      	cbz	r1, 8003916 <__sflush_r+0xae>
 80038e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038ea:	4299      	cmp	r1, r3
 80038ec:	d002      	beq.n	80038f4 <__sflush_r+0x8c>
 80038ee:	4628      	mov	r0, r5
 80038f0:	f7ff fbf2 	bl	80030d8 <_free_r>
 80038f4:	2300      	movs	r3, #0
 80038f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80038f8:	e00d      	b.n	8003916 <__sflush_r+0xae>
 80038fa:	2301      	movs	r3, #1
 80038fc:	4628      	mov	r0, r5
 80038fe:	47b0      	blx	r6
 8003900:	4602      	mov	r2, r0
 8003902:	1c50      	adds	r0, r2, #1
 8003904:	d1c9      	bne.n	800389a <__sflush_r+0x32>
 8003906:	682b      	ldr	r3, [r5, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0c6      	beq.n	800389a <__sflush_r+0x32>
 800390c:	2b1d      	cmp	r3, #29
 800390e:	d001      	beq.n	8003914 <__sflush_r+0xac>
 8003910:	2b16      	cmp	r3, #22
 8003912:	d11e      	bne.n	8003952 <__sflush_r+0xea>
 8003914:	602f      	str	r7, [r5, #0]
 8003916:	2000      	movs	r0, #0
 8003918:	e022      	b.n	8003960 <__sflush_r+0xf8>
 800391a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800391e:	b21b      	sxth	r3, r3
 8003920:	e01b      	b.n	800395a <__sflush_r+0xf2>
 8003922:	690f      	ldr	r7, [r1, #16]
 8003924:	2f00      	cmp	r7, #0
 8003926:	d0f6      	beq.n	8003916 <__sflush_r+0xae>
 8003928:	0793      	lsls	r3, r2, #30
 800392a:	680e      	ldr	r6, [r1, #0]
 800392c:	bf08      	it	eq
 800392e:	694b      	ldreq	r3, [r1, #20]
 8003930:	600f      	str	r7, [r1, #0]
 8003932:	bf18      	it	ne
 8003934:	2300      	movne	r3, #0
 8003936:	eba6 0807 	sub.w	r8, r6, r7
 800393a:	608b      	str	r3, [r1, #8]
 800393c:	f1b8 0f00 	cmp.w	r8, #0
 8003940:	dde9      	ble.n	8003916 <__sflush_r+0xae>
 8003942:	6a21      	ldr	r1, [r4, #32]
 8003944:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003946:	4643      	mov	r3, r8
 8003948:	463a      	mov	r2, r7
 800394a:	4628      	mov	r0, r5
 800394c:	47b0      	blx	r6
 800394e:	2800      	cmp	r0, #0
 8003950:	dc08      	bgt.n	8003964 <__sflush_r+0xfc>
 8003952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	f04f 30ff 	mov.w	r0, #4294967295
 8003960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003964:	4407      	add	r7, r0
 8003966:	eba8 0800 	sub.w	r8, r8, r0
 800396a:	e7e7      	b.n	800393c <__sflush_r+0xd4>
 800396c:	dfbffffe 	.word	0xdfbffffe

08003970 <_fflush_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	690b      	ldr	r3, [r1, #16]
 8003974:	4605      	mov	r5, r0
 8003976:	460c      	mov	r4, r1
 8003978:	b913      	cbnz	r3, 8003980 <_fflush_r+0x10>
 800397a:	2500      	movs	r5, #0
 800397c:	4628      	mov	r0, r5
 800397e:	bd38      	pop	{r3, r4, r5, pc}
 8003980:	b118      	cbz	r0, 800398a <_fflush_r+0x1a>
 8003982:	6a03      	ldr	r3, [r0, #32]
 8003984:	b90b      	cbnz	r3, 800398a <_fflush_r+0x1a>
 8003986:	f7ff fa9f 	bl	8002ec8 <__sinit>
 800398a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f3      	beq.n	800397a <_fflush_r+0xa>
 8003992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003994:	07d0      	lsls	r0, r2, #31
 8003996:	d404      	bmi.n	80039a2 <_fflush_r+0x32>
 8003998:	0599      	lsls	r1, r3, #22
 800399a:	d402      	bmi.n	80039a2 <_fflush_r+0x32>
 800399c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800399e:	f7ff fb98 	bl	80030d2 <__retarget_lock_acquire_recursive>
 80039a2:	4628      	mov	r0, r5
 80039a4:	4621      	mov	r1, r4
 80039a6:	f7ff ff5f 	bl	8003868 <__sflush_r>
 80039aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039ac:	07da      	lsls	r2, r3, #31
 80039ae:	4605      	mov	r5, r0
 80039b0:	d4e4      	bmi.n	800397c <_fflush_r+0xc>
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	059b      	lsls	r3, r3, #22
 80039b6:	d4e1      	bmi.n	800397c <_fflush_r+0xc>
 80039b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ba:	f7ff fb8b 	bl	80030d4 <__retarget_lock_release_recursive>
 80039be:	e7dd      	b.n	800397c <_fflush_r+0xc>

080039c0 <__swbuf_r>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	460e      	mov	r6, r1
 80039c4:	4614      	mov	r4, r2
 80039c6:	4605      	mov	r5, r0
 80039c8:	b118      	cbz	r0, 80039d2 <__swbuf_r+0x12>
 80039ca:	6a03      	ldr	r3, [r0, #32]
 80039cc:	b90b      	cbnz	r3, 80039d2 <__swbuf_r+0x12>
 80039ce:	f7ff fa7b 	bl	8002ec8 <__sinit>
 80039d2:	69a3      	ldr	r3, [r4, #24]
 80039d4:	60a3      	str	r3, [r4, #8]
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	071a      	lsls	r2, r3, #28
 80039da:	d501      	bpl.n	80039e0 <__swbuf_r+0x20>
 80039dc:	6923      	ldr	r3, [r4, #16]
 80039de:	b943      	cbnz	r3, 80039f2 <__swbuf_r+0x32>
 80039e0:	4621      	mov	r1, r4
 80039e2:	4628      	mov	r0, r5
 80039e4:	f000 f82a 	bl	8003a3c <__swsetup_r>
 80039e8:	b118      	cbz	r0, 80039f2 <__swbuf_r+0x32>
 80039ea:	f04f 37ff 	mov.w	r7, #4294967295
 80039ee:	4638      	mov	r0, r7
 80039f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	6922      	ldr	r2, [r4, #16]
 80039f6:	1a98      	subs	r0, r3, r2
 80039f8:	6963      	ldr	r3, [r4, #20]
 80039fa:	b2f6      	uxtb	r6, r6
 80039fc:	4283      	cmp	r3, r0
 80039fe:	4637      	mov	r7, r6
 8003a00:	dc05      	bgt.n	8003a0e <__swbuf_r+0x4e>
 8003a02:	4621      	mov	r1, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f7ff ffb3 	bl	8003970 <_fflush_r>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d1ed      	bne.n	80039ea <__swbuf_r+0x2a>
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	60a3      	str	r3, [r4, #8]
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	6022      	str	r2, [r4, #0]
 8003a1a:	701e      	strb	r6, [r3, #0]
 8003a1c:	6962      	ldr	r2, [r4, #20]
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d004      	beq.n	8003a2e <__swbuf_r+0x6e>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	07db      	lsls	r3, r3, #31
 8003a28:	d5e1      	bpl.n	80039ee <__swbuf_r+0x2e>
 8003a2a:	2e0a      	cmp	r6, #10
 8003a2c:	d1df      	bne.n	80039ee <__swbuf_r+0x2e>
 8003a2e:	4621      	mov	r1, r4
 8003a30:	4628      	mov	r0, r5
 8003a32:	f7ff ff9d 	bl	8003970 <_fflush_r>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d0d9      	beq.n	80039ee <__swbuf_r+0x2e>
 8003a3a:	e7d6      	b.n	80039ea <__swbuf_r+0x2a>

08003a3c <__swsetup_r>:
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ae4 <__swsetup_r+0xa8>)
 8003a40:	4605      	mov	r5, r0
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	460c      	mov	r4, r1
 8003a46:	b118      	cbz	r0, 8003a50 <__swsetup_r+0x14>
 8003a48:	6a03      	ldr	r3, [r0, #32]
 8003a4a:	b90b      	cbnz	r3, 8003a50 <__swsetup_r+0x14>
 8003a4c:	f7ff fa3c 	bl	8002ec8 <__sinit>
 8003a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a54:	0719      	lsls	r1, r3, #28
 8003a56:	d422      	bmi.n	8003a9e <__swsetup_r+0x62>
 8003a58:	06da      	lsls	r2, r3, #27
 8003a5a:	d407      	bmi.n	8003a6c <__swsetup_r+0x30>
 8003a5c:	2209      	movs	r2, #9
 8003a5e:	602a      	str	r2, [r5, #0]
 8003a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a64:	81a3      	strh	r3, [r4, #12]
 8003a66:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6a:	e033      	b.n	8003ad4 <__swsetup_r+0x98>
 8003a6c:	0758      	lsls	r0, r3, #29
 8003a6e:	d512      	bpl.n	8003a96 <__swsetup_r+0x5a>
 8003a70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a72:	b141      	cbz	r1, 8003a86 <__swsetup_r+0x4a>
 8003a74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a78:	4299      	cmp	r1, r3
 8003a7a:	d002      	beq.n	8003a82 <__swsetup_r+0x46>
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f7ff fb2b 	bl	80030d8 <_free_r>
 8003a82:	2300      	movs	r3, #0
 8003a84:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a86:	89a3      	ldrh	r3, [r4, #12]
 8003a88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a8c:	81a3      	strh	r3, [r4, #12]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6063      	str	r3, [r4, #4]
 8003a92:	6923      	ldr	r3, [r4, #16]
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	f043 0308 	orr.w	r3, r3, #8
 8003a9c:	81a3      	strh	r3, [r4, #12]
 8003a9e:	6923      	ldr	r3, [r4, #16]
 8003aa0:	b94b      	cbnz	r3, 8003ab6 <__swsetup_r+0x7a>
 8003aa2:	89a3      	ldrh	r3, [r4, #12]
 8003aa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aac:	d003      	beq.n	8003ab6 <__swsetup_r+0x7a>
 8003aae:	4621      	mov	r1, r4
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f000 f84f 	bl	8003b54 <__smakebuf_r>
 8003ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aba:	f013 0201 	ands.w	r2, r3, #1
 8003abe:	d00a      	beq.n	8003ad6 <__swsetup_r+0x9a>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	60a2      	str	r2, [r4, #8]
 8003ac4:	6962      	ldr	r2, [r4, #20]
 8003ac6:	4252      	negs	r2, r2
 8003ac8:	61a2      	str	r2, [r4, #24]
 8003aca:	6922      	ldr	r2, [r4, #16]
 8003acc:	b942      	cbnz	r2, 8003ae0 <__swsetup_r+0xa4>
 8003ace:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ad2:	d1c5      	bne.n	8003a60 <__swsetup_r+0x24>
 8003ad4:	bd38      	pop	{r3, r4, r5, pc}
 8003ad6:	0799      	lsls	r1, r3, #30
 8003ad8:	bf58      	it	pl
 8003ada:	6962      	ldrpl	r2, [r4, #20]
 8003adc:	60a2      	str	r2, [r4, #8]
 8003ade:	e7f4      	b.n	8003aca <__swsetup_r+0x8e>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	e7f7      	b.n	8003ad4 <__swsetup_r+0x98>
 8003ae4:	20000018 	.word	0x20000018

08003ae8 <_sbrk_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4d06      	ldr	r5, [pc, #24]	@ (8003b04 <_sbrk_r+0x1c>)
 8003aec:	2300      	movs	r3, #0
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	f7fc fe1a 	bl	800072c <_sbrk>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_sbrk_r+0x1a>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_sbrk_r+0x1a>
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	20000298 	.word	0x20000298

08003b08 <__swhatbuf_r>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	460c      	mov	r4, r1
 8003b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b10:	2900      	cmp	r1, #0
 8003b12:	b096      	sub	sp, #88	@ 0x58
 8003b14:	4615      	mov	r5, r2
 8003b16:	461e      	mov	r6, r3
 8003b18:	da0d      	bge.n	8003b36 <__swhatbuf_r+0x2e>
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b20:	f04f 0100 	mov.w	r1, #0
 8003b24:	bf14      	ite	ne
 8003b26:	2340      	movne	r3, #64	@ 0x40
 8003b28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	6031      	str	r1, [r6, #0]
 8003b30:	602b      	str	r3, [r5, #0]
 8003b32:	b016      	add	sp, #88	@ 0x58
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	466a      	mov	r2, sp
 8003b38:	f000 f848 	bl	8003bcc <_fstat_r>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	dbec      	blt.n	8003b1a <__swhatbuf_r+0x12>
 8003b40:	9901      	ldr	r1, [sp, #4]
 8003b42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b4a:	4259      	negs	r1, r3
 8003b4c:	4159      	adcs	r1, r3
 8003b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b52:	e7eb      	b.n	8003b2c <__swhatbuf_r+0x24>

08003b54 <__smakebuf_r>:
 8003b54:	898b      	ldrh	r3, [r1, #12]
 8003b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b58:	079d      	lsls	r5, r3, #30
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	d507      	bpl.n	8003b70 <__smakebuf_r+0x1c>
 8003b60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	6123      	str	r3, [r4, #16]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	6163      	str	r3, [r4, #20]
 8003b6c:	b003      	add	sp, #12
 8003b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b70:	ab01      	add	r3, sp, #4
 8003b72:	466a      	mov	r2, sp
 8003b74:	f7ff ffc8 	bl	8003b08 <__swhatbuf_r>
 8003b78:	9f00      	ldr	r7, [sp, #0]
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	4639      	mov	r1, r7
 8003b7e:	4630      	mov	r0, r6
 8003b80:	f7ff fb16 	bl	80031b0 <_malloc_r>
 8003b84:	b948      	cbnz	r0, 8003b9a <__smakebuf_r+0x46>
 8003b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b8a:	059a      	lsls	r2, r3, #22
 8003b8c:	d4ee      	bmi.n	8003b6c <__smakebuf_r+0x18>
 8003b8e:	f023 0303 	bic.w	r3, r3, #3
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	e7e2      	b.n	8003b60 <__smakebuf_r+0xc>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	6020      	str	r0, [r4, #0]
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba2:	81a3      	strh	r3, [r4, #12]
 8003ba4:	9b01      	ldr	r3, [sp, #4]
 8003ba6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003baa:	b15b      	cbz	r3, 8003bc4 <__smakebuf_r+0x70>
 8003bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f81d 	bl	8003bf0 <_isatty_r>
 8003bb6:	b128      	cbz	r0, 8003bc4 <__smakebuf_r+0x70>
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	431d      	orrs	r5, r3
 8003bc8:	81a5      	strh	r5, [r4, #12]
 8003bca:	e7cf      	b.n	8003b6c <__smakebuf_r+0x18>

08003bcc <_fstat_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	4d07      	ldr	r5, [pc, #28]	@ (8003bec <_fstat_r+0x20>)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	f7fc fd7e 	bl	80006da <_fstat>
 8003bde:	1c43      	adds	r3, r0, #1
 8003be0:	d102      	bne.n	8003be8 <_fstat_r+0x1c>
 8003be2:	682b      	ldr	r3, [r5, #0]
 8003be4:	b103      	cbz	r3, 8003be8 <_fstat_r+0x1c>
 8003be6:	6023      	str	r3, [r4, #0]
 8003be8:	bd38      	pop	{r3, r4, r5, pc}
 8003bea:	bf00      	nop
 8003bec:	20000298 	.word	0x20000298

08003bf0 <_isatty_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4d06      	ldr	r5, [pc, #24]	@ (8003c0c <_isatty_r+0x1c>)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	f7fc fd7d 	bl	80006fa <_isatty>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d102      	bne.n	8003c0a <_isatty_r+0x1a>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	b103      	cbz	r3, 8003c0a <_isatty_r+0x1a>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	20000298 	.word	0x20000298

08003c10 <_init>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr

08003c1c <_fini>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr
